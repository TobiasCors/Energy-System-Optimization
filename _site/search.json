[
  {
    "objectID": "part-04/tutorial-04-05-transport.html",
    "href": "part-04/tutorial-04-05-transport.html",
    "title": "Tutorial IV.V - Modelling the Transportation Problem with JuMP",
    "section": "",
    "text": "Welcome to this tutorial on the transportation problem using JuMP! As always, don’t worry if you’re new to optimization - we’ll walk through everything step by step using a real-world example.\nImagine you’re running a solar panel distribution company. You have several warehouses (suppliers) and need to ship solar panels to various solar farms (customers). Your goal is to minimize the total cost of transportation while meeting all customer demands.\nBy the end of this tutorial, you’ll be able to:\n\nUnderstand what a transportation problem is\nSet up a transportation problem using JuMP\nSolve the problem and interpret the results\n\nLet’s start by loading the necessary packages:\n\nusing JuMP, HiGHS\nusing DataFrames, CSV\n\nPrecompiling JuMP...\n    548.1 ms  ✓ BenchmarkTools\n  14741.9 ms  ✓ MathOptInterface\n   6864.6 ms  ✓ JuMP\n  3 dependencies successfully precompiled in 22 seconds. 48 already precompiled.\nPrecompiling HiGHS...\n   5181.6 ms  ✓ HiGHS\n  1 dependency successfully precompiled in 5 seconds. 51 already precompiled.\nPrecompiling DataFrames...\n  12877.0 ms  ✓ DataFrames\n  1 dependency successfully precompiled in 13 seconds. 32 already precompiled.\nPrecompiling QuartoNotebookWorkerDataFramesTablesExt...\n    944.0 ms  ✓ QuartoNotebookWorker → QuartoNotebookWorkerDataFramesTablesExt\n  1 dependency successfully precompiled in 1 seconds. 54 already precompiled.",
    "crumbs": [
      "04 Optimization",
      "05 - Transport"
    ]
  },
  {
    "objectID": "part-04/tutorial-04-05-transport.html#exercise-1.1---understand-the-data",
    "href": "part-04/tutorial-04-05-transport.html#exercise-1.1---understand-the-data",
    "title": "Tutorial IV.V - Modelling the Transportation Problem with JuMP",
    "section": "Exercise 1.1 - Understand the Data",
    "text": "Exercise 1.1 - Understand the Data\nTake a moment to look at the data. Can you answer these questions?\n\nHow many warehouses do we have? Save the number in a variable called num_warehouses.\nHow many solar farms are we supplying? Save the number in a variable called num_solar_farms.\n\n\n# YOUR ANSWERS BELOW\n# Hint: Use the `nrow()` function to count rows\n\n\n\nCode\n# Test your understanding\n@assert num_warehouses == nrow(available)\n@assert num_solar_farms == nrow(requested)\n\nprintln(\"Great job! Here are the answers:\")\nprintln(\"Number of warehouses: \", num_warehouses)\nprintln(\"Number of solar farms: \", num_solar_farms)",
    "crumbs": [
      "04 Optimization",
      "05 - Transport"
    ]
  },
  {
    "objectID": "part-04/tutorial-04-05-transport.html#exercise-3.1---creating-the-model-instance",
    "href": "part-04/tutorial-04-05-transport.html#exercise-3.1---creating-the-model-instance",
    "title": "Tutorial IV.V - Modelling the Transportation Problem with JuMP",
    "section": "Exercise 3.1 - Creating the model instance",
    "text": "Exercise 3.1 - Creating the model instance\nFrom the last tutorial, you should know how to do this. Create a model instance called transport_model and set the optimizer to HiGHS.\n\n# YOUR CODE BELOW\n\n\n\nCode\n# Test your answer\n@assert typeof(transport_model) == JuMP.Model\nprintln(\"Model instance created successfully!\")",
    "crumbs": [
      "04 Optimization",
      "05 - Transport"
    ]
  },
  {
    "objectID": "part-04/tutorial-04-05-transport.html#define-the-variables",
    "href": "part-04/tutorial-04-05-transport.html#define-the-variables",
    "title": "Tutorial IV.V - Modelling the Transportation Problem with JuMP",
    "section": "Define the variables",
    "text": "Define the variables\nWe can now define the variables of our model. We need to define a variable for each supplier and customer pair. As before, we can use the @variable macro to define the variables. The syntax is @variable(model, varname[index1,index2] &gt;= 0), where model is the model instance, varname is the name of the variable, and index1 and index2 are the indices of the variable. We can use vectors as input for the indices, but we could also use the keys of the dictionaries. In the following code block we mixed both options, to show you that it is possible.\n\n# Define variable\n@variable(\n    transport_model, \n    X[available.supplier,keys(requested_dict)] &gt;= 0\n)",
    "crumbs": [
      "04 Optimization",
      "05 - Transport"
    ]
  },
  {
    "objectID": "part-04/tutorial-04-05-transport.html#define-the-objective",
    "href": "part-04/tutorial-04-05-transport.html#define-the-objective",
    "title": "Tutorial IV.V - Modelling the Transportation Problem with JuMP",
    "section": "Define the objective",
    "text": "Define the objective\nNext, we can define the objective of our model. We want to maximize the profit, which is the revenue minus the variable costs and the transportation costs. As before, we can use the @objective macro to define the objective. The syntax is @objective(model, Max, expression), where model is the model instance, Max indicates that we want to maximize the expression, and expression is the expression we want to maximize.\n\n@objective(transport_model, Max, \n    sum((revenue-varCosts-travelCosts_dict[(i,j)]) * X[i,j] \n    for i in keys(available_dict), j in keys(requested_dict))\n)",
    "crumbs": [
      "04 Optimization",
      "05 - Transport"
    ]
  },
  {
    "objectID": "part-04/tutorial-04-05-transport.html#define-the-constraints",
    "href": "part-04/tutorial-04-05-transport.html#define-the-constraints",
    "title": "Tutorial IV.V - Modelling the Transportation Problem with JuMP",
    "section": "Define the constraints",
    "text": "Define the constraints\nWe can now define the constraints of our model. We need to ensure that the supply from each supplier is enough to cover the demand of each customer. We can use the @constraint macro to define the constraints. The syntax is @constraint(model, expression), where model is the model instance and expression is the expression we want to constrain.\nTo illustrate the use of dictionaries, we will again use the keys of the dictionaries to define the constraints in the following code block.\n\n@constraint(transport_model, \n    restrictAvailable[i in keys(available_dict)], \n    sum(X[i,j] for j in keys(requested_dict)) &lt;= available_dict[i]\n)\n\nNaturally, we could also use the vectors with the names from the DataFrames to define the constraints or we could also just work with ranges from the beginning, e.g. 1:length(available.supplier) and 1:length(requested.solar_farm). Working with names is often more convenient, though.\n\n@constraint(transport_model,\n    restrictDemand[j in requested.solar_farm], \n    sum(X[i,j] for i in available.supplier) &lt;= requested_dict[j]\n)\n\nAnd that’s it! We have now defined the model and can start optimizing.",
    "crumbs": [
      "04 Optimization",
      "05 - Transport"
    ]
  },
  {
    "objectID": "part-04/tutorial-04-05-transport.html#exercise-5.1---start-optimization",
    "href": "part-04/tutorial-04-05-transport.html#exercise-5.1---start-optimization",
    "title": "Tutorial IV.V - Modelling the Transportation Problem with JuMP",
    "section": "Exercise 5.1 - Start optimization",
    "text": "Exercise 5.1 - Start optimization\nStart the optimization as usual by calling the optimize! function on the model instance.\n\n# YOUR CODE BELOW\n\n\n\nCode\n# Test your answer\n@assert termination_status(transport_model) == MOI.OPTIMAL\nprintln(\"Model optimized successfully!\")\n\n\nNow, we can access the values of the variables at the optimal solution. But remember, we defined the variables with the keys of the dictionaries, so we need to convert the result back to a DataFrame. Calling the variable itself will just show the structure of the variable, not the values.\n\nfirst(X,5)\n\nThus, we need to use the value function to extract the values from the variable.\n\ntransport_values = value.(X)\n\nThe result is a DenseAxisArray{Float64,2,...} with index sets. To convert it to a DataFrame, we just need to iterate over the keys dictionaries and store the values in a new DataFrame. As we are not interested in values which are zero, we can skip those.\nFirst, we need to initialize an empty DataFrame with the correct column names.\n\ntransport_df = DataFrame(\n    supplier = [],\n    solar_farm = [],\n    truckloads = []\n)\n\n0×3 DataFrame\n\n\n\nRow\nsupplier\nsolar_farm\ntruckloads\n\n\n\nAny\nAny\nAny\n\n\n\n\n\n\n\n\nThen, we can iterate over the keys of the dictionaries and store the values in the DataFrame if they are greater than zero.\n\nfor i in keys(available_dict)\n    for j in keys(requested_dict)\n        if transport_values[i,j] &gt; 0\n            push!(transport_df, (\n                supplier = i,\n                solar_farm = j,\n                truckloads = transport_values[i,j]\n                )\n            )\n        end\n    end\nend\n\nFinally, we can print the first few rows of the transportation plan to check if it looks correct.\n\nprintln(\"Begining of the transportation plan:\")\nfirst(transport_df,5)\n\n\n\n\n\n\n\nNote\n\n\n\nAlthough the above code looks rather complicated, it is essentially just iterating over the keys of the dictionaries and storing the values in a new DataFrame. This is a common pattern in optimization, as we often want to convert the result of an optimization problem into a more convenient format for reporting or further processing.",
    "crumbs": [
      "04 Optimization",
      "05 - Transport"
    ]
  },
  {
    "objectID": "part-04/tutorial-04-03-constraints.html",
    "href": "part-04/tutorial-04-03-constraints.html",
    "title": "Tutorial IV.III - Constraints in JuMP",
    "section": "",
    "text": "Welcome to this tutorial on constraints in JuMP! In this lesson, we’ll explore how to add rules (constraints) to our optimization problems.\nBy the end of this tutorial, you’ll be able to: 1. Create simple constraints for your optimization problems 2. Use containers (like arrays) to manage multiple similar constraints 3. Create more complex constraints based on conditions\nLet’s start by loading the necessary packages:\n\nusing JuMP, HiGHS\n\nPrecompiling JuMP...\n    542.8 ms  ✓ BenchmarkTools\n  14798.0 ms  ✓ MathOptInterface\n   6949.2 ms  ✓ JuMP\n  3 dependencies successfully precompiled in 22 seconds. 48 already precompiled.\nPrecompiling HiGHS...\n   5119.9 ms  ✓ HiGHS\n  1 dependency successfully precompiled in 5 seconds. 51 already precompiled.\n\n\nNow, let’s create a model that we’ll use throughout this tutorial:\n\nanother_model = Model(HiGHS.Optimizer)\nprintln(\"Great! We've created a new optimization model.\")",
    "crumbs": [
      "04 Optimization",
      "03 - Constraints"
    ]
  },
  {
    "objectID": "part-04/tutorial-04-03-constraints.html#exercise-1.1---define-arrays",
    "href": "part-04/tutorial-04-03-constraints.html#exercise-1.1---define-arrays",
    "title": "Tutorial IV.III - Constraints in JuMP",
    "section": "Exercise 1.1 - Define arrays",
    "text": "Exercise 1.1 - Define arrays\nScenario: Imagine you’re optimizing the production of 8 different products in a factory. Each product has a different profit margin, and you want to maximize total profit.\nDefine an array of variables and an objective function for another_model. The variables should be called profits and have a range from 1:8. It has a lower bound of 0. The objective should be a Maximization of the sum of all profits.\n\n# YOUR CODE BELOW\n\n\n\nCode\n# Test your answer\n@assert length(profits) == 8 && all(lower_bound(profits[i]) == 0 for i in 1:8)\n@assert typeof(objective_function(another_model)) == AffExpr\nprintln(\"Objective function with container variables defined successfully!\")",
    "crumbs": [
      "04 Optimization",
      "03 - Constraints"
    ]
  },
  {
    "objectID": "part-04/tutorial-04-03-constraints.html#exercise-3.1---add-a-conditional-constraints",
    "href": "part-04/tutorial-04-03-constraints.html#exercise-3.1---add-a-conditional-constraints",
    "title": "Tutorial IV.III - Constraints in JuMP",
    "section": "Exercise 3.1 - Add a conditional constraints",
    "text": "Exercise 3.1 - Add a conditional constraints\nScenario extension: The first 4 products are new and have limited market demand.\nAdd a conditional constraint smallProfit to the previous model. Condition: Only the first 4 variables profit have to be lower or equalthan 5.\n\n# YOUR CODE BELOW\n\n\n\nCode\n# Test your answer\n@assert all(is_valid(another_model, smallProfit[i]) for i in 1:4)\nprintln(\"Conditional constraint implemented successfully!\")\nprintln(\"Checking successful implementation.\")\noptimize!(another_model)\nstatus = termination_status(another_model)\n@assert status == MOI.OPTIMAL \"Sorry, something didn't work out as the model status is $status\"\n@assert objective_value(another_model) ≈ 68 atol=1e-4 \"Although you have an optimal solution, \n    the should be 68 not $(objective_value(another_model)). Is the model correct?\"\nprintln(\"Model components validated successfully!\")",
    "crumbs": [
      "04 Optimization",
      "03 - Constraints"
    ]
  },
  {
    "objectID": "part-04/tutorial-04-01-jump.html",
    "href": "part-04/tutorial-04-01-jump.html",
    "title": "Tutorial IV.I - Introduction to Mathematical Optimization with JuMP and HiGHS",
    "section": "",
    "text": "Welcome to this beginner-friendly tutorial on mathematical optimization using JuMP and the HiGHS solver in Julia! Don’t worry if these terms sound unfamiliar – we’ll explain everything step by step.\nIn this tutorial, you’ll learn how to:\n\nSet up a simple optimization problem\nDefine variables and constraints\nCreate an objective function\nSolve the problem and interpret the results\n\nWe’ll use a real-world example to make these concepts more relatable. Imagine you’re managing a small factory that produces two types of products. Your goal is to maximize profit while working within certain limitations. This is exactly the kind of problem that mathematical optimization can solve!\n\n\nJuMP (Julia for Mathematical Programming) is a powerful tool that helps us describe optimization problems in a way that computers can understand and solve. Think of it as a translator between your business problem and the mathematical solver.\n\n\n\nHiGHS is an open-source solver that can find solutions to the optimization problems we describe using JuMP. It’s like a very smart calculator that can handle complex problems quickly and efficiently.\n\n\n\nLet’s break down our factory management problem:\n\nYou produce two products: Product A and Product B\nEach product gives you a different profit:\n\nProduct A: 100 profit per unit\nProduct B: 150 profit per unit\n\nYou have two departments: Cutting and Finishing\nEach product requires different amounts of time in each department:\n\nProduct A: 2 hours in Cutting, 4 hours in Finishing\nProduct B: 4 hours in Cutting, 3 hours in Finishing\n\nYou have limited time available in each department:\n\nCutting: 40 hours total\nFinishing: 60 hours total\n\n\nYour goal is to decide how many of each product to make to maximize your total profit, while not exceeding the available time in each department.\n\n\n\nFirst, we need to install and load the necessary packages. If you haven’t already installed JuMP and HiGHS, run the following code:\n\nimport Pkg; Pkg.add([\"JuMP\",\"HiGHS\"])\n\nNow, let’s load these packages:\n\nusing JuMP, HiGHS\n\nPrecompiling JuMP...\n    542.2 ms  ✓ BenchmarkTools\n  14780.9 ms  ✓ MathOptInterface\n   6875.2 ms  ✓ JuMP\n  3 dependencies successfully precompiled in 22 seconds. 48 already precompiled.\nPrecompiling HiGHS...\n   5148.9 ms  ✓ HiGHS\n  1 dependency successfully precompiled in 5 seconds. 51 already precompiled.\n\n\nGreat! We’re now ready to start building our optimization model.",
    "crumbs": [
      "04 Optimization",
      "01 - JuMP"
    ]
  },
  {
    "objectID": "part-04/tutorial-04-01-jump.html#what-is-jump",
    "href": "part-04/tutorial-04-01-jump.html#what-is-jump",
    "title": "Tutorial IV.I - Introduction to Mathematical Optimization with JuMP and HiGHS",
    "section": "",
    "text": "JuMP (Julia for Mathematical Programming) is a powerful tool that helps us describe optimization problems in a way that computers can understand and solve. Think of it as a translator between your business problem and the mathematical solver.",
    "crumbs": [
      "04 Optimization",
      "01 - JuMP"
    ]
  },
  {
    "objectID": "part-04/tutorial-04-01-jump.html#what-is-highs",
    "href": "part-04/tutorial-04-01-jump.html#what-is-highs",
    "title": "Tutorial IV.I - Introduction to Mathematical Optimization with JuMP and HiGHS",
    "section": "",
    "text": "HiGHS is an open-source solver that can find solutions to the optimization problems we describe using JuMP. It’s like a very smart calculator that can handle complex problems quickly and efficiently.",
    "crumbs": [
      "04 Optimization",
      "01 - JuMP"
    ]
  },
  {
    "objectID": "part-04/tutorial-04-01-jump.html#our-example-problem",
    "href": "part-04/tutorial-04-01-jump.html#our-example-problem",
    "title": "Tutorial IV.I - Introduction to Mathematical Optimization with JuMP and HiGHS",
    "section": "",
    "text": "Let’s break down our factory management problem:\n\nYou produce two products: Product A and Product B\nEach product gives you a different profit:\n\nProduct A: 100 profit per unit\nProduct B: 150 profit per unit\n\nYou have two departments: Cutting and Finishing\nEach product requires different amounts of time in each department:\n\nProduct A: 2 hours in Cutting, 4 hours in Finishing\nProduct B: 4 hours in Cutting, 3 hours in Finishing\n\nYou have limited time available in each department:\n\nCutting: 40 hours total\nFinishing: 60 hours total\n\n\nYour goal is to decide how many of each product to make to maximize your total profit, while not exceeding the available time in each department.",
    "crumbs": [
      "04 Optimization",
      "01 - JuMP"
    ]
  },
  {
    "objectID": "part-04/tutorial-04-01-jump.html#setting-up",
    "href": "part-04/tutorial-04-01-jump.html#setting-up",
    "title": "Tutorial IV.I - Introduction to Mathematical Optimization with JuMP and HiGHS",
    "section": "",
    "text": "First, we need to install and load the necessary packages. If you haven’t already installed JuMP and HiGHS, run the following code:\n\nimport Pkg; Pkg.add([\"JuMP\",\"HiGHS\"])\n\nNow, let’s load these packages:\n\nusing JuMP, HiGHS\n\nPrecompiling JuMP...\n    542.2 ms  ✓ BenchmarkTools\n  14780.9 ms  ✓ MathOptInterface\n   6875.2 ms  ✓ JuMP\n  3 dependencies successfully precompiled in 22 seconds. 48 already precompiled.\nPrecompiling HiGHS...\n   5148.9 ms  ✓ HiGHS\n  1 dependency successfully precompiled in 5 seconds. 51 already precompiled.\n\n\nGreat! We’re now ready to start building our optimization model.",
    "crumbs": [
      "04 Optimization",
      "01 - JuMP"
    ]
  },
  {
    "objectID": "part-04/tutorial-04-01-jump.html#exercise-2.1---create-variables",
    "href": "part-04/tutorial-04-01-jump.html#exercise-2.1---create-variables",
    "title": "Tutorial IV.I - Introduction to Mathematical Optimization with JuMP and HiGHS",
    "section": "Exercise 2.1 - Create Variables",
    "text": "Exercise 2.1 - Create Variables\nNow it’s your turn! Create two continuous variables equal to or larger than 0 called productA and productB that represent the number of units produced in our problem for our model model.\n\n# YOUR CODE BELOW\n\n\n\nCode\n# Test your answer\n@assert @isdefined productA\n@assert typeof(productA) == VariableRef\n@assert has_upper_bound(productA) == false\n@assert has_lower_bound(productA) == true\n@assert lower_bound(productA) == 0\n@assert @isdefined productA\n@assert typeof(productB) == VariableRef\n@assert has_upper_bound(productB) == false\n@assert has_lower_bound(productB) == true\n@assert lower_bound(productB) == 0\nprintln(\"Variables added to the model successfully!\")",
    "crumbs": [
      "04 Optimization",
      "01 - JuMP"
    ]
  },
  {
    "objectID": "part-04/tutorial-04-01-jump.html#exercise-3.1---create-constraints",
    "href": "part-04/tutorial-04-01-jump.html#exercise-3.1---create-constraints",
    "title": "Tutorial IV.I - Introduction to Mathematical Optimization with JuMP and HiGHS",
    "section": "Exercise 3.1 - Create Constraints",
    "text": "Exercise 3.1 - Create Constraints\nCreate two constraints based on the on the Cutting and Finishing department hours of the problem description in this tutorial. Call the first constraint cutting_constraint and the second constraint finishing_constraint.\n\n# YOUR CODE BELOW\n\n\n\nCode\n# Test your answer\n@assert is_valid(model, cutting_constraint)\n@assert is_valid(model, finishing_constraint)\nprintln(\"Constraints added to the model successfully!\")\nprintln(\"Note, that only the existence of these constraints was checked!\")\nprintln(\"The optimization later will show, whether the formulation was correct.\")",
    "crumbs": [
      "04 Optimization",
      "01 - JuMP"
    ]
  },
  {
    "objectID": "part-04/tutorial-04-01-jump.html#exercise-4.1---create-the-objective-function",
    "href": "part-04/tutorial-04-01-jump.html#exercise-4.1---create-the-objective-function",
    "title": "Tutorial IV.I - Introduction to Mathematical Optimization with JuMP and HiGHS",
    "section": "Exercise 4.1 - Create the Objective Function",
    "text": "Exercise 4.1 - Create the Objective Function\nCreate the objective function based on the problem description of this tutorial. The objective is to maximize profit based on the values of productA and productB.\n\n# YOUR CODE BELOW\n\n\n\nCode\n# Test your answer\n@assert typeof(objective_function(model)) == AffExpr\nprintln(\"An objective function defined successfully!\")\nprintln(\"The optimization later will show, whether the formulation was correct.\")",
    "crumbs": [
      "04 Optimization",
      "01 - JuMP"
    ]
  },
  {
    "objectID": "part-03/tutorial-03-05-Plotting.html",
    "href": "part-03/tutorial-03-05-Plotting.html",
    "title": "Tutorial III.III - DataFrames in Julia",
    "section": "",
    "text": "Welcome to this tutorial on plotting in Julia! We’ll be using the powerful Plots.jl package to create beautiful and informative visualizations. Don’t worry if you’re new to plotting – we’ll start with the basics and gradually build up to more advanced techniques.\nIn this tutorial, you’ll learn how to: 1. Create simple plots like line graphs and scatter plots 2. Customize your plots with colors, labels, and styles 3. Add multiple data series to a single plot 4. Save your plots as image files for use in reports or presentations\nFollow the instructions, write your code in the designated code blocks, and validate your results with @assert statements.\nBefore we begin, let’s make sure you have the necessary packages installed. If you’ve been following the course, you’ll need to install the Plots and StatsPlots packages:\n\nimport Pkg; Pkg.add([\"Plots\",\"StatsPlots\"])\n\nNow, let’s load these packages:\n\nusing Plots, StatsPlots",
    "crumbs": [
      "03 Data",
      "05 - Plotting"
    ]
  },
  {
    "objectID": "part-03/tutorial-03-05-Plotting.html#exercise-1.1---create-a-scatter-plot",
    "href": "part-03/tutorial-03-05-Plotting.html#exercise-1.1---create-a-scatter-plot",
    "title": "Tutorial III.III - DataFrames in Julia",
    "section": "Exercise 1.1 - Create a Scatter Plot",
    "text": "Exercise 1.1 - Create a Scatter Plot\nNow it’s your turn! Create a scatter plot using the scatter() function instead of plot(). Use a range from 1 to 20 for x, and generate 20 random numbers for y.\n\n# YOUR CODE BELOW\n# Hint: Use x = 1:20 and y = rand(20)\n\n\n\nCode\n# Test your answer\n@assert @isdefined scatter_plot\nprintln(\"Great job! You've created your first scatter plot.\")",
    "crumbs": [
      "03 Data",
      "05 - Plotting"
    ]
  },
  {
    "objectID": "part-03/tutorial-03-05-Plotting.html#exercise-2.1---customize-a-line-plot",
    "href": "part-03/tutorial-03-05-Plotting.html#exercise-2.1---customize-a-line-plot",
    "title": "Tutorial III.III - DataFrames in Julia",
    "section": "Exercise 2.1 - Customize a Line Plot",
    "text": "Exercise 2.1 - Customize a Line Plot\nNow it’s your turn to get creative! Customize a line plot with your choice of colors, line styles, and markers. Save your masterpiece in the variable custom_line_plot.\n\n# YOUR CODE BELOW\n# Hint: Try different line styles (:dash, :dot), colors (:blue, :green), and markers (:star, :diamond)\n\n\n\nCode\n# Test your answer\n@assert @isdefined custom_line_plot\nprintln(\"Excellent! You've created a custom line plot.\")\n\n\n\n\n\n\n\n\nNote\n\n\n\nFeel free to experiment with different options. There’s no “right” answer here – it’s all about what looks good to you!",
    "crumbs": [
      "03 Data",
      "05 - Plotting"
    ]
  },
  {
    "objectID": "part-03/tutorial-03-05-Plotting.html#exercise-3.1---create-a-multiple-series-plot",
    "href": "part-03/tutorial-03-05-Plotting.html#exercise-3.1---create-a-multiple-series-plot",
    "title": "Tutorial III.III - DataFrames in Julia",
    "section": "Exercise 3.1 - Create a Multiple Series Plot",
    "text": "Exercise 3.1 - Create a Multiple Series Plot\nNYour turn! Create a plot called multi_series_plot with three data series y1, y2, and y3. Make sure to give each series a different color and label.\n\n# YOUR CODE BELOW\n# Hint: Use plot() for the first series, then plot!() for the second and third\n\n\n\nCode\n# Test your answer\n@assert @isdefined y1\n@assert @isdefined y2\n@assert @isdefined y3\n@assert @isdefined multi_series_plot\nprintln(\"Fantastic! You've created a plot with multiple series.\")",
    "crumbs": [
      "03 Data",
      "05 - Plotting"
    ]
  },
  {
    "objectID": "part-03/tutorial-03-05-Plotting.html#exercise-3.1---save-a-plot-to-a-file",
    "href": "part-03/tutorial-03-05-Plotting.html#exercise-3.1---save-a-plot-to-a-file",
    "title": "Tutorial III.III - DataFrames in Julia",
    "section": "Exercise 3.1 - Save a Plot to a File",
    "text": "Exercise 3.1 - Save a Plot to a File\nSave your multi_series_plot as a PNG file named “saved_plot.png” in the “ExampleData” folder.\n\n# YOUR CODE BELOW\n# Don't forget to use the @__DIR__ macro to get the correct file path!\n\n\n\nCode\n# Test your answer\n@assert isfile(\"$(@__DIR__)/ExampleData/saved_plot.png\") \"File does not exist yet.\"\nprintln(\"Well done! You've saved your plot as an image file.\")",
    "crumbs": [
      "03 Data",
      "05 - Plotting"
    ]
  },
  {
    "objectID": "part-03/tutorial-03-05-Plotting.html#bar-plot",
    "href": "part-03/tutorial-03-05-Plotting.html#bar-plot",
    "title": "Tutorial III.III - DataFrames in Julia",
    "section": "Bar Plot",
    "text": "Bar Plot\n\n# Bar plot\nx_categories = [\"A\", \"B\", \"C\", \"D\"]\ny_values = [15, 23, 18, 30]\nbar_plot = bar(\n    x_categories, \n    y_values, \n    title=\"Bar Plot Example\"\n)\ndisplay(bar_plot)",
    "crumbs": [
      "03 Data",
      "05 - Plotting"
    ]
  },
  {
    "objectID": "part-03/tutorial-03-05-Plotting.html#histogram",
    "href": "part-03/tutorial-03-05-Plotting.html#histogram",
    "title": "Tutorial III.III - DataFrames in Julia",
    "section": "Histogram",
    "text": "Histogram\n\ndata = randn(1000)\nhist_plot = histogram(\n    data, \n    bins=30, \n    title=\"Histogram Example\"\n)\ndisplay(hist_plot)",
    "crumbs": [
      "03 Data",
      "05 - Plotting"
    ]
  },
  {
    "objectID": "part-03/tutorial-03-05-Plotting.html#box-plot",
    "href": "part-03/tutorial-03-05-Plotting.html#box-plot",
    "title": "Tutorial III.III - DataFrames in Julia",
    "section": "Box Plot",
    "text": "Box Plot\n\n# Box plot\ngroup = repeat(1:4, inner=50)\ny = randn(200) .+ group\nbox_plot = boxplot(\n    group, \n    y, \n    title=\"Box Plot Example\"\n)\ndisplay(box_plot)",
    "crumbs": [
      "03 Data",
      "05 - Plotting"
    ]
  },
  {
    "objectID": "part-03/tutorial-03-03-DataFrames.html",
    "href": "part-03/tutorial-03-03-DataFrames.html",
    "title": "Tutorial III.III - DataFrames in Julia",
    "section": "",
    "text": "Imagine a DataFrame as a digital spreadsheet. It’s a way to organize and work with data in rows and columns. Each column can hold different types of information, like names, ages, or salaries. In this tutorial, we’ll learn how to create DataFrames, add and change data, and perform simple operations on our data.\n\n\n\n\n\n\nNote\n\n\n\nBefore we start, make sure you have the DataFrames package installed. If you’re not sure how to do this, check the previous tutorial on package management!\n\n\nLet’s begin by importing the DataFrames package:\n\n# Import the DataFrames package\nusing DataFrames\n\nPrecompiling DataFrames...\n  12683.4 ms  ✓ DataFrames\n  1 dependency successfully precompiled in 13 seconds. 32 already precompiled.\nPrecompiling QuartoNotebookWorkerDataFramesTablesExt...\n    921.0 ms  ✓ QuartoNotebookWorker → QuartoNotebookWorkerDataFramesTablesExt\n  1 dependency successfully precompiled in 1 seconds. 54 already precompiled.",
    "crumbs": [
      "03 Data",
      "03 - DataFrames"
    ]
  },
  {
    "objectID": "part-03/tutorial-03-03-DataFrames.html#exercise-1.1---create-a-dataframe",
    "href": "part-03/tutorial-03-03-DataFrames.html#exercise-1.1---create-a-dataframe",
    "title": "Tutorial III.III - DataFrames in Julia",
    "section": "Exercise 1.1 - Create a DataFrame",
    "text": "Exercise 1.1 - Create a DataFrame\nCreate and Test a DataFrame. Create a DataFrame named employees with the columns Name, Age, and Salary, and populate it with the specified data: John is 28 years old and earns 50000, Mike is 23 years old and earns 62000. Frank is 37 years old and earns 90000.\n\n# YOUR CODE BELOW\n\n\n\nCode\n# Test your answer\n@assert employees == DataFrame(\n    Name = [\"John\", \"Mike\", \"Frank\"], \n    Age = [28, 23, 37], \n    Salary = [50000, 62000, 90000]\n)\nprintln(\"DataFrame created successfully!\")\nprintln(employees)\n\n\n\n\n\n\n\n\nTip\n\n\n\nRemember, for more help, use ? in the REPL and type DataFrame.",
    "crumbs": [
      "03 Data",
      "03 - DataFrames"
    ]
  },
  {
    "objectID": "part-03/tutorial-03-03-DataFrames.html#exercise-2.1---access-the-age-column",
    "href": "part-03/tutorial-03-03-DataFrames.html#exercise-2.1---access-the-age-column",
    "title": "Tutorial III.III - DataFrames in Julia",
    "section": "Exercise 2.1 - Access the Age Column",
    "text": "Exercise 2.1 - Access the Age Column\nAccess the Age column from the DataFrame and save it in a new variable ages.\n\n# YOUR CODE BELOW\n\n\n\nCode\n# Test your answer\n@assert ages == [28, 23, 37]\nprintln(\"Correct, the Ages column is: \", ages)",
    "crumbs": [
      "03 Data",
      "03 - DataFrames"
    ]
  },
  {
    "objectID": "part-03/tutorial-03-03-DataFrames.html#exercise-2.2---update-johns-salary",
    "href": "part-03/tutorial-03-03-DataFrames.html#exercise-2.2---update-johns-salary",
    "title": "Tutorial III.III - DataFrames in Julia",
    "section": "Exercise 2.2 - Update John’s Salary",
    "text": "Exercise 2.2 - Update John’s Salary\nUpdate John’s salary to 59000.\n\n# YOUR CODE BELOW\n\n\n\nCode\n# Test your answer\n@assert employees.Salary[1] == 59000\nprintln(\"Modified DataFrame: \")\nprintln(employees)",
    "crumbs": [
      "03 Data",
      "03 - DataFrames"
    ]
  },
  {
    "objectID": "part-03/tutorial-03-03-DataFrames.html#exercise-3.1---filter-the-dataframe",
    "href": "part-03/tutorial-03-03-DataFrames.html#exercise-3.1---filter-the-dataframe",
    "title": "Tutorial III.III - DataFrames in Julia",
    "section": "Exercise 3.1 - Filter the DataFrame",
    "text": "Exercise 3.1 - Filter the DataFrame\nFilter the DataFrame to include only employees with salaries above 60000. Save the resulting employees in the DataFrame high_earners.\n\n# YOUR CODE BELOW\n\n\n\nCode\n# Test your answer\n@assert nrow(high_earners) == 2\nprintln(\"High earners: \")\nprintln(high_earners)",
    "crumbs": [
      "03 Data",
      "03 - DataFrames"
    ]
  },
  {
    "objectID": "part-03/tutorial-03-03-DataFrames.html#exercise-4.1---sort-the-dataframe",
    "href": "part-03/tutorial-03-03-DataFrames.html#exercise-4.1---sort-the-dataframe",
    "title": "Tutorial III.III - DataFrames in Julia",
    "section": "Exercise 4.1 - Sort the DataFrame",
    "text": "Exercise 4.1 - Sort the DataFrame\nSort the DataFrame based on the Age column and save it as sorted_df.\n\n# YOUR CODE BELOW\n\n\n\nCode\n# Test your answer\n@assert sorted_df.Age[1] == 23\nprintln(\"DataFrame sorted by age: \")\nprintln(sorted_df)\n\n\n\n\n\n\n\n\nTip\n\n\n\nIf you have more complicated data structures, take a look at JSON files which can be used to work with all kind of differently structured data sets.",
    "crumbs": [
      "03 Data",
      "03 - DataFrames"
    ]
  },
  {
    "objectID": "part-03/tutorial-03-03-DataFrames.html#exercise-5.1---loop-over-dataframe",
    "href": "part-03/tutorial-03-03-DataFrames.html#exercise-5.1---loop-over-dataframe",
    "title": "Tutorial III.III - DataFrames in Julia",
    "section": "Exercise 5.1 - Loop over DataFrame",
    "text": "Exercise 5.1 - Loop over DataFrame\nCreate a new column called Bonus in the employees DataFrame. The bonus should be calculated as 10% of the salary for employees over 30, and 5% for those 30 and under. Use a loop to iterate over the rows and calculate the bonus.\n\n# YOUR CODE BELOW\n\n\n\nCode\n# Test your answer\n@assert filter(\n    row -&gt; row.Bonus == 2950, \n    employees\n).Name == [\"John\"] \"John should have a bonus of 2950\"\n@assert filter(\n    row -&gt; row.Bonus == 3100, \n    employees\n).Name == [\"Mike\"] \"Mike should have a bonus of 3100\"\n@assert filter(\n    row -&gt; row.Bonus == 9000, \n    employees\n).Name == [\"Frank\"] \"Frank should have a bonus of 9000\"\nprintln(\"Great job! All the bonuses are correct!\")",
    "crumbs": [
      "03 Data",
      "03 - DataFrames"
    ]
  },
  {
    "objectID": "part-03/tutorial-03-01-functions.html",
    "href": "part-03/tutorial-03-01-functions.html",
    "title": "Tutorial III.I - Functions in Julia",
    "section": "",
    "text": "Imagine you have a helpful worker. Instead of explaining every little task to it each time, you can teach it specific jobs once, and then just ask it to do those jobs later. In programming, these “jobs” are called functions! This tutorial will show you how to create and use functions in Julia, making your code more organized and reusable.\nFollow the instructions, input your code in the designated areas, and verify your implementations with @assert statements.",
    "crumbs": [
      "03 Data",
      "01 - Functions"
    ]
  },
  {
    "objectID": "part-03/tutorial-03-01-functions.html#exercise-1.1---define-and-test-a-simple-addition-function",
    "href": "part-03/tutorial-03-01-functions.html#exercise-1.1---define-and-test-a-simple-addition-function",
    "title": "Tutorial III.I - Functions in Julia",
    "section": "Exercise 1.1 - Define and Test a Simple Addition Function",
    "text": "Exercise 1.1 - Define and Test a Simple Addition Function\nDefine and test a simple addition function. Define a function add that takes two parameters and returns their sum.\n\n# YOUR CODE BELOW\n\n\n\nCode\n# Test your answer\n@assert add(10, 5) == 15 \"The sum computed is $(add(10, 5)) but should be 15.\"\nprintln(\"The sum computed is $(add(10, 5)), wonderful!\")",
    "crumbs": [
      "03 Data",
      "01 - Functions"
    ]
  },
  {
    "objectID": "part-03/tutorial-03-01-functions.html#exercise-2.1---return-a-local-variable",
    "href": "part-03/tutorial-03-01-functions.html#exercise-2.1---return-a-local-variable",
    "title": "Tutorial III.I - Functions in Julia",
    "section": "Exercise 2.1 - Return a Local Variable",
    "text": "Exercise 2.1 - Return a Local Variable\nTry to execute the following block of code. The objective is to understand how to return the local_variable_one from the function scope_test. Your task is to change the function, to return the value of local_variable_one.\n\n# YOUR CHANGES BELOW\nfunction scope_test()\n    local_variable_one = 10\n    local_variable_two = 20\nend\n# YOUR CHANGES ABOVE\n\n\n# Test your function\n@assert scope_test() == 10 \"The value exported is $(scope_test()).\"\nprintln(\"The value exported is $(scope_test()), you solved it!\")",
    "crumbs": [
      "03 Data",
      "01 - Functions"
    ]
  },
  {
    "objectID": "part-03/tutorial-03-01-functions.html#exercise-2.2---define-an-implicit-return-function",
    "href": "part-03/tutorial-03-01-functions.html#exercise-2.2---define-an-implicit-return-function",
    "title": "Tutorial III.I - Functions in Julia",
    "section": "Exercise 2.2 - Define an Implicit Return Function",
    "text": "Exercise 2.2 - Define an Implicit Return Function\nDefine and test an implicit return function. Define a function subtract that takes two parameters and implicitly returns their difference. The implicit return feature makes your code cleaner and more concise.\n\n# YOUR CODE BELOW\n\n\n\nCode\n# Test your answer\n@assert subtract(10, 5) == 5  \"The difference computed is $(subtract(10, 5)) but should be 5.\"\nprintln(\"The difference computed is $(subtract(10, 5)), perfect!\")",
    "crumbs": [
      "03 Data",
      "01 - Functions"
    ]
  },
  {
    "objectID": "part-03/tutorial-03-01-functions.html#exercise-3.1---match-results-to-assertions",
    "href": "part-03/tutorial-03-01-functions.html#exercise-3.1---match-results-to-assertions",
    "title": "Tutorial III.I - Functions in Julia",
    "section": "Exercise 3.1 - Match Results to Assertions",
    "text": "Exercise 3.1 - Match Results to Assertions\nMatch the results from the previous example to the correct assertions:\n\n# YOUR CHANGES BELOW\n@assert result2 == 30 \"result1 should be the sum of two numbers\"\n@assert result3 == \"Hello, World!\" \"result2 should be the concatenation of two strings\"\n@assert result1 == \"Generic operation for objects of type String and Int64\" \"result3 should use the generic operation\"\nprintln(\"You solved it, the assertions are now correct!\")\n\n\n\n\n\n\n\nTip\n\n\n\nHint: Look at the types of arguments used in each operation call and match them to the appropriate method.",
    "crumbs": [
      "03 Data",
      "01 - Functions"
    ]
  },
  {
    "objectID": "part-02/tutorial-02-05-dicts.html",
    "href": "part-02/tutorial-02-05-dicts.html",
    "title": "Tutorial II.V - Dictionaries",
    "section": "",
    "text": "Imagine you have a school directory where each student’s name is associated with their unique student ID. This is similar to how dictionaries work in programming - they allow you to store and retrieve information using key-value pairs.\nFollow the structured instructions, implement your code in the designated blocks, and affirm your comprehension with @assert statements.",
    "crumbs": [
      "02 First Steps",
      "05 - Dictionaries"
    ]
  },
  {
    "objectID": "part-02/tutorial-02-05-dicts.html#exercise-1.1---create-and-modify-a-dictionary",
    "href": "part-02/tutorial-02-05-dicts.html#exercise-1.1---create-and-modify-a-dictionary",
    "title": "Tutorial II.V - Dictionaries",
    "section": "Exercise 1.1 - Create and Modify a Dictionary",
    "text": "Exercise 1.1 - Create and Modify a Dictionary\nAdd a new book called “Harry Potter and the Philosopher’s Stone” with the author “J.K. Rowling” to the created dictionary.\n\n# Creates a dictionary of books and authors\nbooks = Dict(\n    \"1984\" =&gt; \"George Orwell\", \n    \"Nexus\" =&gt; \"Yuval Noah Harari\"\n)\n# YOUR CODE BELOW\n\n\n# Test your answer\n@assert haskey(books, \"Harry Potter and the Philosopher's Stone\")\nprintln(\"Great! You've successfully added a new book to the books dictionary.\")",
    "crumbs": [
      "02 First Steps",
      "05 - Dictionaries"
    ]
  },
  {
    "objectID": "part-02/tutorial-02-05-dicts.html#exercise-1.2---modify-a-dictionary",
    "href": "part-02/tutorial-02-05-dicts.html#exercise-1.2---modify-a-dictionary",
    "title": "Tutorial II.V - Dictionaries",
    "section": "Exercise 1.2 - Modify a Dictionary",
    "text": "Exercise 1.2 - Modify a Dictionary\nChange the author of “1984” to “Eric Blair” (George Orwell’s real name).\n\n# YOUR CODE BELOW\n\n\n# Test your answer\n@assert books[\"1984\"] == \"Eric Blair\"\nprintln(\"Great! You've successfully modified the books dictionary.\")",
    "crumbs": [
      "02 First Steps",
      "05 - Dictionaries"
    ]
  },
  {
    "objectID": "part-02/tutorial-02-05-dicts.html#conclusion",
    "href": "part-02/tutorial-02-05-dicts.html#conclusion",
    "title": "Tutorial II.V - Dictionaries",
    "section": "Conclusion",
    "text": "Conclusion\nGreat! You’ve just navigated through the basics of dictionaries in Julia. Dictionaries are powerful data structures that allow for efficient data organization and retrieval. Continue to the next file to learn more advanced Julia concepts.",
    "crumbs": [
      "02 First Steps",
      "05 - Dictionaries"
    ]
  },
  {
    "objectID": "part-02/tutorial-02-03-comparisons.html",
    "href": "part-02/tutorial-02-03-comparisons.html",
    "title": "Tutorial II.III - Comparison Operators",
    "section": "",
    "text": "Imagine you’re teaching a computer to make decisions. Just like we compare things in everyday life (“Is it raining?”, “Do I have enough money?”), computers need ways to compare values and make choices. This tutorial will show you how to help computers make these comparisons!\nFollow the instructions, write your code in the designated code blocks, and execute the corresponding code cell.",
    "crumbs": [
      "02 First Steps",
      "03 - Comparisons"
    ]
  },
  {
    "objectID": "part-02/tutorial-02-03-comparisons.html#exercise-1.1---compare-if-10-is-greater-than-5",
    "href": "part-02/tutorial-02-03-comparisons.html#exercise-1.1---compare-if-10-is-greater-than-5",
    "title": "Tutorial II.III - Comparison Operators",
    "section": "Exercise 1.1 - Compare if 10 is greater than 5",
    "text": "Exercise 1.1 - Compare if 10 is greater than 5\nCompare if 10 is greater than 5 and store the result in comparison1.\n\n# YOUR CODE BELOW\n\n\n\nCode\n# Test your answer\n@assert comparison1 == true\nprintln(\"comparison1 is \", comparison1)",
    "crumbs": [
      "02 First Steps",
      "03 - Comparisons"
    ]
  },
  {
    "objectID": "part-02/tutorial-02-03-comparisons.html#exercise-1.2---compare-if-x-is-not-equal-to-y",
    "href": "part-02/tutorial-02-03-comparisons.html#exercise-1.2---compare-if-x-is-not-equal-to-y",
    "title": "Tutorial II.III - Comparison Operators",
    "section": "Exercise 1.2 - Compare if x is not equal to y",
    "text": "Exercise 1.2 - Compare if x is not equal to y\nDefine variables x with value \"Hello\" and y with value \"world\". Compare if x is not equal to y and store the result in comparison2.\n\n# YOUR CODE BELOW\n\n\n\nCode\n# Test your answer\n@assert x == \"Hello\"\n@assert y == \"world\"\n@assert comparison2 == true\nprintln(\"Comparison2 is \", comparison2)",
    "crumbs": [
      "02 First Steps",
      "03 - Comparisons"
    ]
  },
  {
    "objectID": "part-02/tutorial-02-03-comparisons.html#exercise-2.1---use-the-and-operator",
    "href": "part-02/tutorial-02-03-comparisons.html#exercise-2.1---use-the-and-operator",
    "title": "Tutorial II.III - Comparison Operators",
    "section": "Exercise 2.1 - Use the AND operator",
    "text": "Exercise 2.1 - Use the AND operator\nUse the AND operator to check if 10 is greater than 5 and hello is equal to hello. Store the result in logic1.\n\n# YOUR CODE BELOW\n\n\n\nCode\n# Test your answer\n@assert logic1 == true\nprintln(\"logic1 is \", logic1)",
    "crumbs": [
      "02 First Steps",
      "03 - Comparisons"
    ]
  },
  {
    "objectID": "part-02/tutorial-02-03-comparisons.html#exercise-2.2---use-the-or-operator",
    "href": "part-02/tutorial-02-03-comparisons.html#exercise-2.2---use-the-or-operator",
    "title": "Tutorial II.III - Comparison Operators",
    "section": "Exercise 2.2 - Use the OR operator",
    "text": "Exercise 2.2 - Use the OR operator\nUse the OR operator to check if 10 is less than 5 or hello is equal to hello. Store the result in logic2.\n\n# YOUR CODE BELOW\n\n\n\nCode\n# Test your answer\n@assert logic2 == true\nprintln(\"logic2 is \", logic2)\n\n\n\n\n\n\n\n\nTip\n\n\n\nJulia uses short-circuit evaluation for && and || operators. This means that the second operand is only evaluated if necessary.",
    "crumbs": [
      "02 First Steps",
      "03 - Comparisons"
    ]
  },
  {
    "objectID": "part-02/tutorial-02-03-comparisons.html#exercise-2.3---use-the-not-operator",
    "href": "part-02/tutorial-02-03-comparisons.html#exercise-2.3---use-the-not-operator",
    "title": "Tutorial II.III - Comparison Operators",
    "section": "Exercise 2.3 - Use the NOT operator",
    "text": "Exercise 2.3 - Use the NOT operator\nCheck whether 10 is greater than 5 and store the result in logic3. Then, use the NOT operator to invert logic3. Store the result in logic4.\n\n# YOUR CODE BELOW\n\n\n\nCode\n# Test your answer\n@assert logic3 == true\n@assert logic4 == false\nprintln(\"logic3 is \", logic3,\" and logic4 is\", logic4)",
    "crumbs": [
      "02 First Steps",
      "03 - Comparisons"
    ]
  },
  {
    "objectID": "part-02/tutorial-02-03-comparisons.html#exercise-2.4---chaining-comparisons",
    "href": "part-02/tutorial-02-03-comparisons.html#exercise-2.4---chaining-comparisons",
    "title": "Tutorial II.III - Comparison Operators",
    "section": "Exercise 2.4 - Chaining Comparisons",
    "text": "Exercise 2.4 - Chaining Comparisons\nJulia has a neat feature that lets you write comparisons the way you think about them:\n# Instead of writing:\nage &gt;= 13 && age &lt;= 19    # Is age between 13 and 19?\n\n# You can write:\n13 &lt;= age &lt;= 19          # Much more natural!\nReal-world examples:\n# Is the body temperature normal?\nnormal_temperature = (36.5 &lt;= body_temp &lt;= 37.5)\n\n# Is the current hour within working hours?\nworking_hours = (9 &lt;= current_hour &lt; 17)\nCheck if x is between 1 and 10 (exclusive) using a chained comparison. Store the result in chained_comparison.\n\nx = 5\n# YOUR CODE BELOW\n\n\n\nCode\n# Test your answer\n@assert chained_comparison == true\nprintln(\"chained_comparison is \", chained_comparison)",
    "crumbs": [
      "02 First Steps",
      "03 - Comparisons"
    ]
  },
  {
    "objectID": "part-02/tutorial-02-01-variables.html",
    "href": "part-02/tutorial-02-01-variables.html",
    "title": "Tutorial II.I - Variables and Types",
    "section": "",
    "text": "Welcome to this interactive Julia tutorial which introduces the basics of variables and types. Understanding variables and their types is crucial as they are the building blocks of any program. They determine how data is stored, manipulated, and how efficiently your code runs.\nThis script is designed to be interactive. Follow the instructions, write your code in the designated code blocks, and then execute the corresponding code. Each exercise is followed by an @assert statement that checks your solution.\nThere are two ways to run the code:\n\nThe easiest way to run the code is by using VS Code. First, install the Julia and the Jupyter Extension. Then, you can open the downloaded .ipynb files and run the code from there.\nThe second way is by using IJulia. Start Julia, and type using IJulia; notebook() in the Julia prompt. This will open a new browser window where you can run the code. If you have not installed IJulia yet, you can do so by typing ] in the Julia prompt to open the package manager, and then installing IJulia by typing add IJulia.\n\n\n\n\n\n\n\nNote\n\n\n\nAlways replace ‘YOUR CODE BELOW’ with your actual code.",
    "crumbs": [
      "02 First Steps",
      "01 - Variables"
    ]
  },
  {
    "objectID": "part-02/tutorial-02-01-variables.html#exercise-1.1---declare-a-variable",
    "href": "part-02/tutorial-02-01-variables.html#exercise-1.1---declare-a-variable",
    "title": "Tutorial II.I - Variables and Types",
    "section": "Exercise 1.1 - Declare a Variable",
    "text": "Exercise 1.1 - Declare a Variable\nDeclare a variable named x and assign it the value 1.\n\n# YOUR CODE BELOW\n\n\n\nCode\n# Test your answer\n@assert x == 1 \"Check again, the value of x should be 1. Remember to assign the value directly to x.\"\nprintln(\"Great, you have correctly assigned the value $x to the variable 'x'.\")",
    "crumbs": [
      "02 First Steps",
      "01 - Variables"
    ]
  },
  {
    "objectID": "part-02/tutorial-02-01-variables.html#exercise-1.2---declare-a-string-variable",
    "href": "part-02/tutorial-02-01-variables.html#exercise-1.2---declare-a-string-variable",
    "title": "Tutorial II.I - Variables and Types",
    "section": "Exercise 1.2 - Declare a String Variable",
    "text": "Exercise 1.2 - Declare a String Variable\nDeclare a variable named hi and assign it the string \"Hello, Optimization!\".\n\n# YOUR CODE BELOW\n\n\n\nCode\n# Test your answer\n@assert hi == \"Hello, Optimization!\" \"Make sure the variable 'hi' contains the exact string \\\"Hello, Optimization\\\"!\"\nprintln(\"Good, the variable 'hi' now states \\\"$hi\\\".\")",
    "crumbs": [
      "02 First Steps",
      "01 - Variables"
    ]
  },
  {
    "objectID": "part-02/tutorial-02-01-variables.html#exercise-2.1---create-an-integer-variable",
    "href": "part-02/tutorial-02-01-variables.html#exercise-2.1---create-an-integer-variable",
    "title": "Tutorial II.I - Variables and Types",
    "section": "Exercise 2.1 - Create an Integer Variable",
    "text": "Exercise 2.1 - Create an Integer Variable\nCreate an Integer variable answerUniverse and set it to 42.\n\n# YOUR CODE BELOW\n\n\n\nCode\n# Test your answer\n@assert answerUniverse == 42 \"The variable 'answerUniverse' should hold 42.\"\nprintln(\"Great, the answer to all questions on the universe is $answerUniverse now.\")",
    "crumbs": [
      "02 First Steps",
      "01 - Variables"
    ]
  },
  {
    "objectID": "part-02/tutorial-02-01-variables.html#exercise-2.2---create-a-float-variable",
    "href": "part-02/tutorial-02-01-variables.html#exercise-2.2---create-a-float-variable",
    "title": "Tutorial II.I - Variables and Types",
    "section": "Exercise 2.2 - Create a Float Variable",
    "text": "Exercise 2.2 - Create a Float Variable\nCreate a Float variable money and set it to 1.35.\n\n# YOUR CODE BELOW\n\n\n\nCode\n# Test your answer\n@assert money == 1.35 \"The variable 'money' should hold the Float64 1.35.\"\nprintln(\"Perfect, the you have stored $money in the variable 'money'.\")",
    "crumbs": [
      "02 First Steps",
      "01 - Variables"
    ]
  },
  {
    "objectID": "part-02/tutorial-02-01-variables.html#exercise-2.3---create-a-boolean-variable",
    "href": "part-02/tutorial-02-01-variables.html#exercise-2.3---create-a-boolean-variable",
    "title": "Tutorial II.I - Variables and Types",
    "section": "Exercise 2.3 - Create a Boolean Variable",
    "text": "Exercise 2.3 - Create a Boolean Variable\nCreate a Boolean variable isStudent and set it to true.\n\n# YOUR CODE BELOW\n\n\n\nCode\n# Test your answer\n@assert isStudent == true \"The variable 'isStudent' should be set to true.\"\nprintln(\"Correct, you are a student now.\")",
    "crumbs": [
      "02 First Steps",
      "01 - Variables"
    ]
  },
  {
    "objectID": "part-02/tutorial-02-01-variables.html#exercise-3.1---type-annotation",
    "href": "part-02/tutorial-02-01-variables.html#exercise-3.1---type-annotation",
    "title": "Tutorial II.I - Variables and Types",
    "section": "Exercise 3.1 - Type Annotation",
    "text": "Exercise 3.1 - Type Annotation\nDeclare a variable y with an explicit type annotation of Int64 and assign it the value 5.\n\n# YOUR CODE BELOW\n\n\n\nCode\n# Test your answer\n@assert y == 5 && typeof(y) == Int64 \"Make sure 'y' is of type Int64 and has the value 5.\"\nprintln(\"Great! You've created an Int64 variable 'y' with the value $y.\")",
    "crumbs": [
      "02 First Steps",
      "01 - Variables"
    ]
  },
  {
    "objectID": "part-02/tutorial-02-01-variables.html#exercise-4.1---string-interpolation",
    "href": "part-02/tutorial-02-01-variables.html#exercise-4.1---string-interpolation",
    "title": "Tutorial II.I - Variables and Types",
    "section": "Exercise 4.1 - String Interpolation",
    "text": "Exercise 4.1 - String Interpolation\nCreate a string message that says \"y is [value of y]\" using string interpolation.\n\n# YOUR CODE BELOW\n\n\n\nCode\n# Test your answer\n@assert message == \"y is 5\" \"Make sure your string includes the correct value of y.\"\nprintln(\"Excellent! Your interpolated string is: $message\")",
    "crumbs": [
      "02 First Steps",
      "01 - Variables"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html",
    "href": "part-01/lecture-introduction.html",
    "title": "Lecture I - Welcome and Introduction",
    "section": "",
    "text": "Field: Design and Planning of Complex Systems\nLanguages: Julia, Python and R\nInterest: Modelling, Stochastic Optimization, Simulations, Machine Learning, and Energy\nTeaching: OR, Algorithms, and Programming\nContact: tobias.cors@haw-hamburg.de\n\n. . .\n\n\n\n\n\n\nTip\n\n\n\nI really appreciate active participation and interaction!",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#about-me",
    "href": "part-01/lecture-introduction.html#about-me",
    "title": "Lecture I - Welcome and Introduction",
    "section": "",
    "text": "Field: Design and Planning of Complex Systems\nLanguages: Julia, Python and R\nInterest: Modelling, Stochastic Optimization, Simulations, Machine Learning, and Energy\nTeaching: OR, Algorithms, and Programming\nContact: tobias.cors@haw-hamburg.de\n\n. . .\n\n\n\n\n\n\nTip\n\n\n\nI really appreciate active participation and interaction!",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#lectures",
    "href": "part-01/lecture-introduction.html#lectures",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Lectures",
    "text": "Lectures\n\nEvery Thursday between 12.30 PM and 2.00 PM\nFirst four lectures repeat modelling and programming\nLater lectures discuss practical problems and implementation\nLectures are interactive → We discuss approaches!\nCommunication takes place via Moodle and E-Mail",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#tutorials",
    "href": "part-01/lecture-introduction.html#tutorials",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Tutorials",
    "text": "Tutorials\n\nTutorials within the lecture time and self-study\nIn these tutorials we are working on assignments\nPlease bring a laptop with Windows, macOS, or Linux!",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#assignments",
    "href": "part-01/lecture-introduction.html#assignments",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Assignments",
    "text": "Assignments\n\nBased on applied problems of the lecture\nUp to 3 students can solve assignments together\nSubmitted solutions earn bonus points for the exam\nMax. 0.5 point per tutorial\n\n. . .\n\n\n\n\n\n\nNote\n\n\n\nBonus points only count if the mark is at least 4.0!",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#understanding-and-applying-optimization",
    "href": "part-01/lecture-introduction.html#understanding-and-applying-optimization",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Understanding and Applying Optimization",
    "text": "Understanding and Applying Optimization\n\nReal-world problems can be addressed with models\nOur objective is to foster your interest in the topic\nEnable you to recognize and solve problem structures\nIncludes problem understanding and implementation",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#energy-system-optimization",
    "href": "part-01/lecture-introduction.html#energy-system-optimization",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Energy System Optimization",
    "text": "Energy System Optimization\n\nUnit commitment\nShort-term scheduling\nLong-term scheduling\nExpansion planning\nInvestment planning\nHydrogen supply chain network design\nMacro-economic models / regional energy systems\nMicro-economic models / local energy systems\nMulti-energy systems\nEnergy hub\nEnergy system flexibility\nEnergy storage\nRenewable energy integration\nCarbon pricing\nPolicy design\n…",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#todo-add-more-information-with-examples-westküste100-and-from-literature-of-my-papers",
    "href": "part-01/lecture-introduction.html#todo-add-more-information-with-examples-westküste100-and-from-literature-of-my-papers",
    "title": "Lecture I - Welcome and Introduction",
    "section": "TODO: Add more information with examples Westküste100 and from literature of my papers",
    "text": "TODO: Add more information with examples Westküste100 and from literature of my papers",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#part-i",
    "href": "part-01/lecture-introduction.html#part-i",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Part I",
    "text": "Part I\n\nWelcome and Introduction\nFirst Steps in Julia\nPackages and Data Management\nModelling with JuMP",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#part-ii",
    "href": "part-01/lecture-introduction.html#part-ii",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Part II",
    "text": "Part II\n\nGenerator Expansion Planning\nUnit Commitment as Short-term Scheduling\nStorages\nInvestment Planning",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#part-iii",
    "href": "part-01/lecture-introduction.html#part-iii",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Part III",
    "text": "Part III\n\nMulti-energy systems\nIntermission: Exam Preparation\nUncertainty Modelling and Renewable Energy Integration\nElectricity Market and Carbon Pricing\nRecap and Discussion",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#choice-of-programming-language",
    "href": "part-01/lecture-introduction.html#choice-of-programming-language",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Choice of Programming Language",
    "text": "Choice of Programming Language\n\n. . .\nQuestion: Have you ever heard of Julia?",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#why-julia",
    "href": "part-01/lecture-introduction.html#why-julia",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Why Julia?",
    "text": "Why Julia?\n\nDesigned to be:\n\nas general as Python\nas statistics-friendly as R\nas fast as C++!\n\n\n. . .\n\n\n\n\n\n\nTip\n\n\n\nAllows for fast data workflows, particularly in scientific computing!",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#syntax",
    "href": "part-01/lecture-introduction.html#syntax",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Syntax",
    "text": "Syntax\n\nDynamically-typed syntax just like Python\nSimilar to R, Matlab and Python - not like C++\nIn comparison, accessible and easy to learn!\nNo need to worry about memory management!",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#jump",
    "href": "part-01/lecture-introduction.html#jump",
    "title": "Lecture I - Welcome and Introduction",
    "section": "JuMP",
    "text": "JuMP\n\nPackage for algebraic modeling in Julia\nSimplifies solving complex optimization problems\nProvides a high-level, user-friendly interface\nUseful for operations research and data science\n\n. . .\n\n\n\n\n\n\nTip\n\n\n\nJuMP is an alternative to Pyomo, GAMS, and AMPL!",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#must-it-be-a-new-language",
    "href": "part-01/lecture-introduction.html#must-it-be-a-new-language",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Must it be a new language?",
    "text": "Must it be a new language?\n\nYes, but no need to worry!\nJulia is quite similar to Python and R\nWe will learn the syntax together in the first part\nIt is helpful to switch languages from time to time",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#section",
    "href": "part-01/lecture-introduction.html#section",
    "title": "Lecture I - Welcome and Introduction",
    "section": "",
    "text": "Do you have\nexperience with\nalgebraic modeling?",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#what-is-algebraic-modeling",
    "href": "part-01/lecture-introduction.html#what-is-algebraic-modeling",
    "title": "Lecture I - Welcome and Introduction",
    "section": "What is algebraic modeling?",
    "text": "What is algebraic modeling?\n\nA “mathematical language” for optimization problems\nAllows for describing complex systems and constraints\nBased on linear algebra (Equations and Inequalities)\n\n. . .",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#how-to-learn-algebraic-modeling",
    "href": "part-01/lecture-introduction.html#how-to-learn-algebraic-modeling",
    "title": "Lecture I - Welcome and Introduction",
    "section": "How to learn algebraic modeling?",
    "text": "How to learn algebraic modeling?\n\nPractice, practice, and practice!\nUnderstand standard models and their approach\nDevelop an understanding of constraints\nUnderstand the structure of a models solution space\nUse an available algorithms to determine solutions",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#central-questions",
    "href": "part-01/lecture-introduction.html#central-questions",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Central Questions",
    "text": "Central Questions\n\nWhat is to be decided?\nWhat is relevant to the decision?\nWhat information is given and relevant?\nWhat parameters (data) are needed?\nWhich variables and of which type are needed?\n\n. . .\n\n\n\n\n\n\nTip\n\n\n\nModeling is a creative process!",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#model-components",
    "href": "part-01/lecture-introduction.html#model-components",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Model Components",
    "text": "Model Components\n\nObjective function\nConstraints\nVariables\n\n. . .\n\n\n\n\n\n\nNote\n\n\n\nWe will go through these components step by step in each lecture!",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#linear-optimization-model",
    "href": "part-01/lecture-introduction.html#linear-optimization-model",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Linear Optimization Model",
    "text": "Linear Optimization Model\n\n\n\nBasic Model Formulation\n\\[\n\\begin{aligned}\n&\\text{maximize} \\quad F = \\sum_{j\\in \\mathcal{J}} c_j X_j\n\\end{aligned}\n\\]\nsubject to\n\\[\n\\begin{aligned}\n&\\sum_{j\\in \\mathcal{J}} a_{i,j} X_j  \\le b_i && \\forall i \\in \\mathcal{I} \\\\\n&X_j \\ge 0 &&  \\forall  j \\in \\mathcal{J}\n\\end{aligned}\n\\]\n\n\n\nModel Components\n\\[\n\\begin{aligned}\n\\mathcal{I} &: \\text{set of $i \\in \\mathcal{I}$,}\\\\\n\\mathcal{J} &: \\text{set of $j \\in \\mathcal{J}$,}\\\\\nF   &: \\text{Objective function variable,}\\\\\nX_{j}   &: \\text{decision variables,}\\\\\nc_{j}   &: \\text{objective function coefficients,}\\\\\na_{i,j} &: \\text{parameters,}\\\\\nb_{i}   &: \\text{parameters}\n\\end{aligned}\n\\]\n\n\n\n. . .\nQuestion: Have you ever seen something like this before?",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#what-is-this-good-for",
    "href": "part-01/lecture-introduction.html#what-is-this-good-for",
    "title": "Lecture I - Welcome and Introduction",
    "section": "What is this good for?",
    "text": "What is this good for?\n\nGood Question! A lot of things:\n\nModeling real-world problems\nSolving complex systems\nOptimizing resource allocation\nDecision-making under constraints\nSimulation and prediction",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#case-solar-panel-transport",
    "href": "part-01/lecture-introduction.html#case-solar-panel-transport",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Case: Solar Panel Transport",
    "text": "Case: Solar Panel Transport",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#description",
    "href": "part-01/lecture-introduction.html#description",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Description",
    "text": "Description\nA company is producing solar panels in Dresden and Laupheim and has to transport them to new solar farms near Hamburg, Munich, and Berlin. The quantities offered and demanded (truckloads) and the transport costs per truckload in Euro are summarized in the following table.",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#transport-costs",
    "href": "part-01/lecture-introduction.html#transport-costs",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Transport Costs",
    "text": "Transport Costs\n\n\n\nOrigin/Destination\nHamburg\nMunich\nBerlin\nAvailable\n\n\n\n\nDresden\n5010\n4640\n1980\n34\n\n\nLaupheim\n7120\n1710\n6430\n41\n\n\nDemand\n21\n17\n29\n\n\n\n\nExample: A truckload from Dresden \\(i=1\\) to Munich \\(j=2\\) costs \\(c_{12}=4640\\) Euro. Moreover, it is necessary to fulfil all customer demands, as the contract has been signed.",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#graphical-illustration",
    "href": "part-01/lecture-introduction.html#graphical-illustration",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Graphical Illustration",
    "text": "Graphical Illustration",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#what-are-we-trying",
    "href": "part-01/lecture-introduction.html#what-are-we-trying",
    "title": "Lecture I - Welcome and Introduction",
    "section": "What are we trying?",
    "text": "What are we trying?\nFirst, we always need to understand the objectives.\n. . .\nQuestion: What are our possible objectives?\nMinimizing the transport costs over all truckloads while meeting the demand based on the available solar panels adhering to the available panels.",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#section-1",
    "href": "part-01/lecture-introduction.html#section-1",
    "title": "Lecture I - Welcome and Introduction",
    "section": "",
    "text": "Let’s break it down\nstep by step!",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#sets",
    "href": "part-01/lecture-introduction.html#sets",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Sets",
    "text": "Sets\nRemember, sets are collections of elements\n. . .\nQuestion: What sets are needed?\n. . .\n\\[\n\\begin{aligned}\n\\mathcal{I} &: \\text{Set of production sites, indexed by } i \\text{ with } i \\in \\{1, \\ldots, |\\mathcal{I}|\\}, \\\\\n\\mathcal{J} &: \\text{Set of customers, indexed by } j \\text{ with } j \\in \\{1, \\ldots, |\\mathcal{J}|\\}.\n\\end{aligned}\n\\]\n. . .\n\n\n\n\n\n\nTip\n\n\n\nWe often use plural names for sets and a caligraphic letter, e.g., \\(\\mathcal{I}\\) and \\(\\mathcal{J}\\).",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#parameters",
    "href": "part-01/lecture-introduction.html#parameters",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Parameters",
    "text": "Parameters\nParameters are fixed values that are given.\n. . .\nQuestion: What parameters are needed?\n. . .\n\\[\n\\begin{aligned}\nc_{i,j} &: \\text{Costs per truck load for transport from } i \\text{ to } j, \\\\\na_i &: \\text{Available truck loads at } i, \\\\\nb_j &: \\text{Customer demands at } j.\n\\end{aligned}\n\\]\n. . .\n\n\n\n\n\n\nTip\n\n\n\nWe usually use the corresponding lower-case letter, e.g., \\(c\\), \\(a\\), and \\(b\\).",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#decision-variable",
    "href": "part-01/lecture-introduction.html#decision-variable",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Decision Variable",
    "text": "Decision Variable\n\nDecision variables are the values we are trying to find\nHere, our objective is to minimize the transport costs\n\n. . .\nQuestion: What decision variables are needed?\n. . .\n\\[\nX_{i,j} \\text{Trucks that deliver panels from site } i \\text{ to customer } j.\n\\]\n. . .\n\n\n\n\n\n\nTip\n\n\n\nWe use upper-case letters to distinguish variables from parameters, e.g., \\(X\\).",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#section-2",
    "href": "part-01/lecture-introduction.html#section-2",
    "title": "Lecture I - Welcome and Introduction",
    "section": "",
    "text": "These are our\nbuilding blocks!",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#objective-function",
    "href": "part-01/lecture-introduction.html#objective-function",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Objective Function",
    "text": "Objective Function\n\nThe objective function is the value we are trying to minimize\nFormalized as a sum of decision variables and parameters\n\n. . .\nQuestion: Do you remember the objective?",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#minimizing-the-transport-costs",
    "href": "part-01/lecture-introduction.html#minimizing-the-transport-costs",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Minimizing the Transport Costs",
    "text": "Minimizing the Transport Costs\nMinimize the transport costs over all truckloads while meeting the demand based on the available solar panels adhering to the available panels.\n. . .\nQuestion: How can we write this down?\n. . .\n\\[\n\\text{Minimize} \\quad \\sum_{i \\in \\mathcal{I}} \\sum_{j \\in \\mathcal{J}} c_{i,j} X_{i,j}\n\\]",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#constraints",
    "href": "part-01/lecture-introduction.html#constraints",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Constraints",
    "text": "Constraints\n\nConstraints are conditions that must be met\nThey limit the solution space!\n\nQuestion: Objective value without any constraints?\n. . .\n\nThe value is zero\nWe can transport any number of panels\n\n. . .\nQuestion: What constraints are needed?",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#supply-constraints",
    "href": "part-01/lecture-introduction.html#supply-constraints",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Supply Constraints",
    "text": "Supply Constraints\nEnsure that the number of panels transported from a location does not exceed the available panels.\n. . .\nQuestion: How can we formalize this?\n. . .\n\\[\n\\sum_{j \\in \\mathcal{J}} X_{i,j} \\leq a_i \\quad \\forall i \\in \\mathcal{I}\n\\]",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#demand-constraints",
    "href": "part-01/lecture-introduction.html#demand-constraints",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Demand Constraints",
    "text": "Demand Constraints\nEnsure that the demand of each customer is covered.\n. . .\nQuestion: Any ideas?\n. . .\n\\[\n\\sum_{i \\in \\mathcal{I}} X_{i,j} = b_j \\quad \\forall j \\in \\mathcal{J}\n\\]",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#non-negativity-constraints",
    "href": "part-01/lecture-introduction.html#non-negativity-constraints",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Non-negativity Constraints",
    "text": "Non-negativity Constraints\nEnsure no negative number of truckloads are transported.\n. . .\nQuestion: Has anyone an idea how to write this down?\n. . .\n\\[\nX_{i,j} \\geq 0 \\quad \\forall i \\in \\mathcal{I}, \\forall j \\in \\mathcal{J}\n\\]",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#transport-problem",
    "href": "part-01/lecture-introduction.html#transport-problem",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Transport Problem",
    "text": "Transport Problem\nThe complete model can then be written as:\n\\[\n\\begin{aligned}\n\\text{Minimize} \\quad F &= \\sum_{i \\in \\mathcal{I}} \\sum_{j \\in \\mathcal{J}} c_{i,j} X_{ij} \\\\\n\\text{subject to:} \\quad\n&\\sum_{j \\in \\mathcal{J}} X_{i,j} \\leq a_i \\quad &&\\forall i \\in \\mathcal{I} \\\\\n&\\sum_{i \\in \\mathcal{I}} X_{i,j} = b_j \\quad &&\\forall j \\in \\mathcal{J} \\\\\n&X_{i,j} \\geq 0 \\quad &&\\forall i \\in \\mathcal{I}, \\forall j \\in \\mathcal{J}\n\\end{aligned}\n\\]",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#inequality-constraints",
    "href": "part-01/lecture-introduction.html#inequality-constraints",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Inequality Constraints",
    "text": "Inequality Constraints\nQuestion: Could we replace \\(=\\) by \\(\\geq\\) in the demand constraint?\n. . .\n\nYes, we could!\nWe could deliver more than the demand\nBut this would not happen here\n\n. . .\nQuestion: Why won’t we transport more than the demand?\n\nDue to the associated costs",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#section-3",
    "href": "part-01/lecture-introduction.html#section-3",
    "title": "Lecture I - Welcome and Introduction",
    "section": "",
    "text": "Any\nquestions?",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#description-1",
    "href": "part-01/lecture-introduction.html#description-1",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Description",
    "text": "Description\nUnfortunately, the margins on solar panels are low. After the previous contract has been fulfilled, the company produced the same number of panels as before. In addition, all three customers want to order the same number of truckloads with solar panels again. The sales volume per truckload of panels is 11,000 Euros. The complete production of a truckload of solar panels, including materials, costs 6,300 Euros.",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#new-objective",
    "href": "part-01/lecture-introduction.html#new-objective",
    "title": "Lecture I - Welcome and Introduction",
    "section": "New Objective",
    "text": "New Objective\nIn the new contract, the company wants to maximize its profits while the demand does not have to be fulfilled.\n. . .\nQuestion: What changes are necessary?\n. . .\n\nWe need to change the objective function\nWe need to change some parameters\n\n. . .\nQuestion: Does our decision variable change?\n. . .\n\nNo, we still transport truckloads of solar panels",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#new-parameters",
    "href": "part-01/lecture-introduction.html#new-parameters",
    "title": "Lecture I - Welcome and Introduction",
    "section": "New Parameters",
    "text": "New Parameters\n\\[\n\\begin{aligned}\np &: \\text{Sales volume per truckload of solar panels,} \\\\\nc &: \\text{Production costs per truckload of solar panels.}\n\\end{aligned}\n\\]\n. . .\nQuestion: What is the profit per truckload of solar panels?\n. . .\n\\[\np - c\n\\]",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#former-model",
    "href": "part-01/lecture-introduction.html#former-model",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Former Model",
    "text": "Former Model\n\\[\n\\begin{aligned}\n\\text{Minimize} \\quad F &= \\sum_{i \\in \\mathcal{I}} \\sum_{j \\in \\mathcal{J}} c_{i,j} X_{i,j} \\\\\n\\text{subject to:} \\quad\n&\\sum_{j \\in \\mathcal{J}} X_{i,j} \\leq a_i \\quad &&\\forall i \\in \\mathcal{I} \\\\\n&\\sum_{i \\in \\mathcal{I}} X_{i,j} \\geq b_j \\quad &&\\forall j \\in \\mathcal{J} \\\\\n&X_{i,j} \\geq 0 \\quad &&\\forall i \\in \\mathcal{I}, \\forall j \\in \\mathcal{J}\n\\end{aligned}\n\\]",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#new-model",
    "href": "part-01/lecture-introduction.html#new-model",
    "title": "Lecture I - Welcome and Introduction",
    "section": "New Model",
    "text": "New Model\n\\[\n\\begin{aligned}\n\\text{Maximize} \\quad F &= \\sum_{i \\in \\mathcal{I}} \\sum_{j \\in \\mathcal{J}} (p-c-c_{i,j}) X_{i,j} \\\\\n\\text{subject to:} \\quad\n&\\sum_{j \\in \\mathcal{J}} X_{i,j} \\leq a_i \\quad &&\\forall i \\in \\mathcal{I} \\\\\n&\\sum_{i \\in \\mathcal{I}} X_{i,j} \\leq b_j \\quad &&\\forall j \\in \\mathcal{J} \\\\\n&X_{i,j} \\geq 0 \\quad &&\\forall i \\in \\mathcal{I}, \\forall j \\in \\mathcal{J}\n\\end{aligned}\n\\]",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#section-4",
    "href": "part-01/lecture-introduction.html#section-4",
    "title": "Lecture I - Welcome and Introduction",
    "section": "",
    "text": "Do you have\nany questions?",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#download-and-install-julia",
    "href": "part-01/lecture-introduction.html#download-and-install-julia",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Download and Install Julia",
    "text": "Download and Install Julia\n\nTo prepare for the upcoming lectures, we start by installing the Julia Programming Language and an Integrated Development Environment (IDE) to work with Julia.",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#installating-julia",
    "href": "part-01/lecture-introduction.html#installating-julia",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Installating Julia",
    "text": "Installating Julia\n\n\nHead to julialang.org and follow the instructions.\n\n\n\n\n\n\n\nTip\n\n\n\nIf you are ever asked to add something to your “PATH”, do so!",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#vs-code",
    "href": "part-01/lecture-introduction.html#vs-code",
    "title": "Lecture I - Welcome and Introduction",
    "section": "VS Code",
    "text": "VS Code\n\n\nNext, we are going to install VS Code\nAlternatively, you can install VS Codium\nIt is essentially VS Code but without any tracking by MS",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#installing-vs-code",
    "href": "part-01/lecture-introduction.html#installing-vs-code",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Installing VS Code",
    "text": "Installing VS Code\n\nHead to the website code.visualstudio.com\nOR to the webside vscodium.com\nDownload and install the latest release",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#verify-the-installation",
    "href": "part-01/lecture-introduction.html#verify-the-installation",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Verify the Installation",
    "text": "Verify the Installation\n\nStart the IDE and take a look around\nSearch for the field “Extensions” on the left sidebar\nClick it and search for “Julia”\nDownload and install “Julia (Julia Language Support)”",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#create-a-new-file",
    "href": "part-01/lecture-introduction.html#create-a-new-file",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Create a new file",
    "text": "Create a new file\n\nCreate a new file with a “.jl” ending\nSave it somewhere on your computer\ne.g., in a folder that you will use in the course\n\n\nprint(\"Hello World!\")\n\nHello World!\n\n\n\nRun the file by clicking “run” in the upper right corner\nOR by pressing “Control+Enter” or “STRG+Enter”",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#everything-working",
    "href": "part-01/lecture-introduction.html#everything-working",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Everything working?",
    "text": "Everything working?\n\nIf the terminal opens with a Hello World! → perfect!\nIf not, it is likely that the IDE cannot find the path to Julia\nTry to determine the path and save it to VS Code\nAfter saving it, try to run the file again\n\n\n\n\n\n\n\nTip\n\n\n\nDon’t worry if it is not running right away. We will fix this together!",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#how-to-get-started",
    "href": "part-01/lecture-introduction.html#how-to-get-started",
    "title": "Lecture I - Welcome and Introduction",
    "section": "How to get started?",
    "text": "How to get started?\n\nLearning a new programming language is a daunting task\nIt is best to start with some small, interactive problems\nThen, slowly increase the scope of the tasks\nWe will do this together in class!\n\n\n\n\n\n\n\nNote\n\n\n\nAnd that’s it for todays lecture!\nWe now have covered a first introduction and are ready to start solving some problems in the upcoming lectures.",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#section-5",
    "href": "part-01/lecture-introduction.html#section-5",
    "title": "Lecture I - Welcome and Introduction",
    "section": "",
    "text": "Questions?",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#literature-i",
    "href": "part-01/lecture-introduction.html#literature-i",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Literature I",
    "text": "Literature I\nFor more interesting literature to learn more about Julia, take a look at the literature list of this course.",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#literature-ii",
    "href": "part-01/lecture-introduction.html#literature-ii",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Literature II",
    "text": "Literature II",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "part-01/lecture-presentation.html#about-me",
    "href": "part-01/lecture-presentation.html#about-me",
    "title": "Lecture I - Welcome and Introduction",
    "section": "About me",
    "text": "About me\n\nField: Design and Planning of Complex Systems\nLanguages: Julia, Python and R\nInterest: Modelling, Stochastic Optimization, Simulations, Machine Learning, and Energy\nTeaching: OR, Algorithms, and Programming\nContact: tobias.cors@haw-hamburg.de\n\n\n\n\n\n\n\n\nTip\n\n\nI really appreciate active participation and interaction!"
  },
  {
    "objectID": "part-01/lecture-presentation.html#lectures",
    "href": "part-01/lecture-presentation.html#lectures",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Lectures",
    "text": "Lectures\n\nEvery Thursday between 12.30 PM and 2.00 PM\nFirst four lectures repeat modelling and programming\nLater lectures discuss practical problems and implementation\nLectures are interactive → We discuss approaches!\nCommunication takes place via Moodle and E-Mail"
  },
  {
    "objectID": "part-01/lecture-presentation.html#tutorials",
    "href": "part-01/lecture-presentation.html#tutorials",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Tutorials",
    "text": "Tutorials\n\nTutorials within the lecture time and self-study\nIn these tutorials we are working on assignments\nPlease bring a laptop with Windows, macOS, or Linux!"
  },
  {
    "objectID": "part-01/lecture-presentation.html#assignments",
    "href": "part-01/lecture-presentation.html#assignments",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Assignments",
    "text": "Assignments\n\nBased on applied problems of the lecture\nUp to 3 students can solve assignments together\nSubmitted solutions earn bonus points for the exam\nMax. 0.5 point per tutorial\n\n\n\n\n\n\n\n\nNote\n\n\nBonus points only count if the mark is at least 4.0!"
  },
  {
    "objectID": "part-01/lecture-presentation.html#understanding-and-applying-optimization",
    "href": "part-01/lecture-presentation.html#understanding-and-applying-optimization",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Understanding and Applying Optimization",
    "text": "Understanding and Applying Optimization\n\nReal-world problems can be addressed with models\nOur objective is to foster your interest in the topic\nEnable you to recognize and solve problem structures\nIncludes problem understanding and implementation"
  },
  {
    "objectID": "part-01/lecture-presentation.html#energy-system-optimization",
    "href": "part-01/lecture-presentation.html#energy-system-optimization",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Energy System Optimization",
    "text": "Energy System Optimization\n\nUnit commitment\nShort-term scheduling\nLong-term scheduling\nExpansion planning\nInvestment planning\nHydrogen supply chain network design\nMacro-economic models / regional energy systems\nMicro-economic models / local energy systems\nMulti-energy systems\nEnergy hub\nEnergy system flexibility\nEnergy storage\nRenewable energy integration\nCarbon pricing\nPolicy design\n…"
  },
  {
    "objectID": "part-01/lecture-presentation.html#todo-add-more-information-with-examples-westküste100-and-from-literature-of-my-papers",
    "href": "part-01/lecture-presentation.html#todo-add-more-information-with-examples-westküste100-and-from-literature-of-my-papers",
    "title": "Lecture I - Welcome and Introduction",
    "section": "TODO: Add more information with examples Westküste100 and from literature of my papers",
    "text": "TODO: Add more information with examples Westküste100 and from literature of my papers"
  },
  {
    "objectID": "part-01/lecture-presentation.html#part-i",
    "href": "part-01/lecture-presentation.html#part-i",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Part I",
    "text": "Part I\n\nWelcome and Introduction\nFirst Steps in Julia\nPackages and Data Management\nModelling with JuMP"
  },
  {
    "objectID": "part-01/lecture-presentation.html#part-ii",
    "href": "part-01/lecture-presentation.html#part-ii",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Part II",
    "text": "Part II\n\nGenerator Expansion Planning\nUnit Commitment as Short-term Scheduling\nStorages\nInvestment Planning"
  },
  {
    "objectID": "part-01/lecture-presentation.html#part-iii",
    "href": "part-01/lecture-presentation.html#part-iii",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Part III",
    "text": "Part III\n\nMulti-energy systems\nIntermission: Exam Preparation\nUncertainty Modelling and Renewable Energy Integration\nElectricity Market and Carbon Pricing\nRecap and Discussion"
  },
  {
    "objectID": "part-01/lecture-presentation.html#choice-of-programming-language",
    "href": "part-01/lecture-presentation.html#choice-of-programming-language",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Choice of Programming Language",
    "text": "Choice of Programming Language\n\n\nQuestion: Have you ever heard of Julia?"
  },
  {
    "objectID": "part-01/lecture-presentation.html#why-julia",
    "href": "part-01/lecture-presentation.html#why-julia",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Why Julia?",
    "text": "Why Julia?\n\nDesigned to be:\n\nas general as Python\nas statistics-friendly as R\nas fast as C++!\n\n\n\n\n\n\n\n\n\nTip\n\n\nAllows for fast data workflows, particularly in scientific computing!"
  },
  {
    "objectID": "part-01/lecture-presentation.html#syntax",
    "href": "part-01/lecture-presentation.html#syntax",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Syntax",
    "text": "Syntax\n\nDynamically-typed syntax just like Python\nSimilar to R, Matlab and Python - not like C++\nIn comparison, accessible and easy to learn!\nNo need to worry about memory management!"
  },
  {
    "objectID": "part-01/lecture-presentation.html#jump",
    "href": "part-01/lecture-presentation.html#jump",
    "title": "Lecture I - Welcome and Introduction",
    "section": "JuMP",
    "text": "JuMP\n\nPackage for algebraic modeling in Julia\nSimplifies solving complex optimization problems\nProvides a high-level, user-friendly interface\nUseful for operations research and data science\n\n\n\n\n\n\n\n\nTip\n\n\nJuMP is an alternative to Pyomo, GAMS, and AMPL!"
  },
  {
    "objectID": "part-01/lecture-presentation.html#must-it-be-a-new-language",
    "href": "part-01/lecture-presentation.html#must-it-be-a-new-language",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Must it be a new language?",
    "text": "Must it be a new language?\n\nYes, but no need to worry!\nJulia is quite similar to Python and R\nWe will learn the syntax together in the first part\nIt is helpful to switch languages from time to time"
  },
  {
    "objectID": "part-01/lecture-presentation.html#section",
    "href": "part-01/lecture-presentation.html#section",
    "title": "Lecture I - Welcome and Introduction",
    "section": "",
    "text": "Do you have\nexperience with\nalgebraic modeling?"
  },
  {
    "objectID": "part-01/lecture-presentation.html#what-is-algebraic-modeling",
    "href": "part-01/lecture-presentation.html#what-is-algebraic-modeling",
    "title": "Lecture I - Welcome and Introduction",
    "section": "What is algebraic modeling?",
    "text": "What is algebraic modeling?\n\nA “mathematical language” for optimization problems\nAllows for describing complex systems and constraints\nBased on linear algebra (Equations and Inequalities)"
  },
  {
    "objectID": "part-01/lecture-presentation.html#how-to-learn-algebraic-modeling",
    "href": "part-01/lecture-presentation.html#how-to-learn-algebraic-modeling",
    "title": "Lecture I - Welcome and Introduction",
    "section": "How to learn algebraic modeling?",
    "text": "How to learn algebraic modeling?\n\nPractice, practice, and practice!\nUnderstand standard models and their approach\nDevelop an understanding of constraints\nUnderstand the structure of a models solution space\nUse an available algorithms to determine solutions"
  },
  {
    "objectID": "part-01/lecture-presentation.html#central-questions",
    "href": "part-01/lecture-presentation.html#central-questions",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Central Questions",
    "text": "Central Questions\n\nWhat is to be decided?\nWhat is relevant to the decision?\nWhat information is given and relevant?\nWhat parameters (data) are needed?\nWhich variables and of which type are needed?\n\n\n\n\n\n\n\n\nTip\n\n\nModeling is a creative process!"
  },
  {
    "objectID": "part-01/lecture-presentation.html#model-components",
    "href": "part-01/lecture-presentation.html#model-components",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Model Components",
    "text": "Model Components\n\nObjective function\nConstraints\nVariables\n\n\n\n\n\n\n\n\nNote\n\n\nWe will go through these components step by step in each lecture!"
  },
  {
    "objectID": "part-01/lecture-presentation.html#linear-optimization-model",
    "href": "part-01/lecture-presentation.html#linear-optimization-model",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Linear Optimization Model",
    "text": "Linear Optimization Model\n\n\nBasic Model Formulation\n\\[\n\\begin{aligned}\n&\\text{maximize} \\quad F = \\sum_{j\\in \\mathcal{J}} c_j X_j\n\\end{aligned}\n\\]\nsubject to\n\\[\n\\begin{aligned}\n&\\sum_{j\\in \\mathcal{J}} a_{i,j} X_j  \\le b_i && \\forall i \\in \\mathcal{I} \\\\\n&X_j \\ge 0 &&  \\forall  j \\in \\mathcal{J}\n\\end{aligned}\n\\]\n\nModel Components\n\\[\n\\begin{aligned}\n\\mathcal{I} &: \\text{set of $i \\in \\mathcal{I}$,}\\\\\n\\mathcal{J} &: \\text{set of $j \\in \\mathcal{J}$,}\\\\\nF   &: \\text{Objective function variable,}\\\\\nX_{j}   &: \\text{decision variables,}\\\\\nc_{j}   &: \\text{objective function coefficients,}\\\\\na_{i,j} &: \\text{parameters,}\\\\\nb_{i}   &: \\text{parameters}\n\\end{aligned}\n\\]\n\n\nQuestion: Have you ever seen something like this before?"
  },
  {
    "objectID": "part-01/lecture-presentation.html#what-is-this-good-for",
    "href": "part-01/lecture-presentation.html#what-is-this-good-for",
    "title": "Lecture I - Welcome and Introduction",
    "section": "What is this good for?",
    "text": "What is this good for?\n\nGood Question! A lot of things:\n\nModeling real-world problems\nSolving complex systems\nOptimizing resource allocation\nDecision-making under constraints\nSimulation and prediction"
  },
  {
    "objectID": "part-01/lecture-presentation.html#case-solar-panel-transport",
    "href": "part-01/lecture-presentation.html#case-solar-panel-transport",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Case: Solar Panel Transport",
    "text": "Case: Solar Panel Transport"
  },
  {
    "objectID": "part-01/lecture-presentation.html#description",
    "href": "part-01/lecture-presentation.html#description",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Description",
    "text": "Description\nA company is producing solar panels in Dresden and Laupheim and has to transport them to new solar farms near Hamburg, Munich, and Berlin. The quantities offered and demanded (truckloads) and the transport costs per truckload in Euro are summarized in the following table."
  },
  {
    "objectID": "part-01/lecture-presentation.html#transport-costs",
    "href": "part-01/lecture-presentation.html#transport-costs",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Transport Costs",
    "text": "Transport Costs\n\n\n\nOrigin/Destination\nHamburg\nMunich\nBerlin\nAvailable\n\n\n\n\nDresden\n5010\n4640\n1980\n34\n\n\nLaupheim\n7120\n1710\n6430\n41\n\n\nDemand\n21\n17\n29\n\n\n\n\nExample: A truckload from Dresden \\(i=1\\) to Munich \\(j=2\\) costs \\(c_{12}=4640\\) Euro. Moreover, it is necessary to fulfil all customer demands, as the contract has been signed."
  },
  {
    "objectID": "part-01/lecture-presentation.html#graphical-illustration",
    "href": "part-01/lecture-presentation.html#graphical-illustration",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Graphical Illustration",
    "text": "Graphical Illustration"
  },
  {
    "objectID": "part-01/lecture-presentation.html#what-are-we-trying",
    "href": "part-01/lecture-presentation.html#what-are-we-trying",
    "title": "Lecture I - Welcome and Introduction",
    "section": "What are we trying?",
    "text": "What are we trying?\nFirst, we always need to understand the objectives.\n\nQuestion: What are our possible objectives?\nMinimizing the transport costs over all truckloads while meeting the demand based on the available solar panels adhering to the available panels."
  },
  {
    "objectID": "part-01/lecture-presentation.html#section-1",
    "href": "part-01/lecture-presentation.html#section-1",
    "title": "Lecture I - Welcome and Introduction",
    "section": "",
    "text": "Let’s break it down\nstep by step!"
  },
  {
    "objectID": "part-01/lecture-presentation.html#sets",
    "href": "part-01/lecture-presentation.html#sets",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Sets",
    "text": "Sets\nRemember, sets are collections of elements\n\nQuestion: What sets are needed?\n\n\n\\[\n\\begin{aligned}\n\\mathcal{I} &: \\text{Set of production sites, indexed by } i \\text{ with } i \\in \\{1, \\ldots, |\\mathcal{I}|\\}, \\\\\n\\mathcal{J} &: \\text{Set of customers, indexed by } j \\text{ with } j \\in \\{1, \\ldots, |\\mathcal{J}|\\}.\n\\end{aligned}\n\\]\n\n\n\n\n\n\n\n\nTip\n\n\nWe often use plural names for sets and a caligraphic letter, e.g., \\(\\mathcal{I}\\) and \\(\\mathcal{J}\\)."
  },
  {
    "objectID": "part-01/lecture-presentation.html#parameters",
    "href": "part-01/lecture-presentation.html#parameters",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Parameters",
    "text": "Parameters\nParameters are fixed values that are given.\n\nQuestion: What parameters are needed?\n\n\n\\[\n\\begin{aligned}\nc_{i,j} &: \\text{Costs per truck load for transport from } i \\text{ to } j, \\\\\na_i &: \\text{Available truck loads at } i, \\\\\nb_j &: \\text{Customer demands at } j.\n\\end{aligned}\n\\]\n\n\n\n\n\n\n\n\nTip\n\n\nWe usually use the corresponding lower-case letter, e.g., \\(c\\), \\(a\\), and \\(b\\)."
  },
  {
    "objectID": "part-01/lecture-presentation.html#decision-variable",
    "href": "part-01/lecture-presentation.html#decision-variable",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Decision Variable",
    "text": "Decision Variable\n\nDecision variables are the values we are trying to find\nHere, our objective is to minimize the transport costs\n\n\nQuestion: What decision variables are needed?\n\n\n\\[\nX_{i,j} \\text{Trucks that deliver panels from site } i \\text{ to customer } j.\n\\]\n\n\n\n\n\n\n\n\nTip\n\n\nWe use upper-case letters to distinguish variables from parameters, e.g., \\(X\\)."
  },
  {
    "objectID": "part-01/lecture-presentation.html#section-2",
    "href": "part-01/lecture-presentation.html#section-2",
    "title": "Lecture I - Welcome and Introduction",
    "section": "",
    "text": "These are our\nbuilding blocks!"
  },
  {
    "objectID": "part-01/lecture-presentation.html#objective-function",
    "href": "part-01/lecture-presentation.html#objective-function",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Objective Function",
    "text": "Objective Function\n\nThe objective function is the value we are trying to minimize\nFormalized as a sum of decision variables and parameters\n\n\nQuestion: Do you remember the objective?"
  },
  {
    "objectID": "part-01/lecture-presentation.html#minimizing-the-transport-costs",
    "href": "part-01/lecture-presentation.html#minimizing-the-transport-costs",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Minimizing the Transport Costs",
    "text": "Minimizing the Transport Costs\nMinimize the transport costs over all truckloads while meeting the demand based on the available solar panels adhering to the available panels.\n\nQuestion: How can we write this down?\n\n\n\\[\n\\text{Minimize} \\quad \\sum_{i \\in \\mathcal{I}} \\sum_{j \\in \\mathcal{J}} c_{i,j} X_{i,j}\n\\]"
  },
  {
    "objectID": "part-01/lecture-presentation.html#constraints",
    "href": "part-01/lecture-presentation.html#constraints",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Constraints",
    "text": "Constraints\n\nConstraints are conditions that must be met\nThey limit the solution space!\n\nQuestion: Objective value without any constraints?\n\n\nThe value is zero\nWe can transport any number of panels\n\n\n\nQuestion: What constraints are needed?"
  },
  {
    "objectID": "part-01/lecture-presentation.html#supply-constraints",
    "href": "part-01/lecture-presentation.html#supply-constraints",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Supply Constraints",
    "text": "Supply Constraints\nEnsure that the number of panels transported from a location does not exceed the available panels.\n\nQuestion: How can we formalize this?\n\n\n\\[\n\\sum_{j \\in \\mathcal{J}} X_{i,j} \\leq a_i \\quad \\forall i \\in \\mathcal{I}\n\\]"
  },
  {
    "objectID": "part-01/lecture-presentation.html#demand-constraints",
    "href": "part-01/lecture-presentation.html#demand-constraints",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Demand Constraints",
    "text": "Demand Constraints\nEnsure that the demand of each customer is covered.\n\nQuestion: Any ideas?\n\n\n\\[\n\\sum_{i \\in \\mathcal{I}} X_{i,j} = b_j \\quad \\forall j \\in \\mathcal{J}\n\\]"
  },
  {
    "objectID": "part-01/lecture-presentation.html#non-negativity-constraints",
    "href": "part-01/lecture-presentation.html#non-negativity-constraints",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Non-negativity Constraints",
    "text": "Non-negativity Constraints\nEnsure no negative number of truckloads are transported.\n\nQuestion: Has anyone an idea how to write this down?\n\n\n\\[\nX_{i,j} \\geq 0 \\quad \\forall i \\in \\mathcal{I}, \\forall j \\in \\mathcal{J}\n\\]"
  },
  {
    "objectID": "part-01/lecture-presentation.html#transport-problem",
    "href": "part-01/lecture-presentation.html#transport-problem",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Transport Problem",
    "text": "Transport Problem\nThe complete model can then be written as:\n\\[\n\\begin{aligned}\n\\text{Minimize} \\quad F &= \\sum_{i \\in \\mathcal{I}} \\sum_{j \\in \\mathcal{J}} c_{i,j} X_{ij} \\\\\n\\text{subject to:} \\quad\n&\\sum_{j \\in \\mathcal{J}} X_{i,j} \\leq a_i \\quad &&\\forall i \\in \\mathcal{I} \\\\\n&\\sum_{i \\in \\mathcal{I}} X_{i,j} = b_j \\quad &&\\forall j \\in \\mathcal{J} \\\\\n&X_{i,j} \\geq 0 \\quad &&\\forall i \\in \\mathcal{I}, \\forall j \\in \\mathcal{J}\n\\end{aligned}\n\\]"
  },
  {
    "objectID": "part-01/lecture-presentation.html#inequality-constraints",
    "href": "part-01/lecture-presentation.html#inequality-constraints",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Inequality Constraints",
    "text": "Inequality Constraints\nQuestion: Could we replace \\(=\\) by \\(\\geq\\) in the demand constraint?\n\n\nYes, we could!\nWe could deliver more than the demand\nBut this would not happen here\n\n\n\nQuestion: Why won’t we transport more than the demand?\n\nDue to the associated costs"
  },
  {
    "objectID": "part-01/lecture-presentation.html#section-3",
    "href": "part-01/lecture-presentation.html#section-3",
    "title": "Lecture I - Welcome and Introduction",
    "section": "",
    "text": "Any\nquestions?"
  },
  {
    "objectID": "part-01/lecture-presentation.html#description-1",
    "href": "part-01/lecture-presentation.html#description-1",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Description",
    "text": "Description\nUnfortunately, the margins on solar panels are low. After the previous contract has been fulfilled, the company produced the same number of panels as before. In addition, all three customers want to order the same number of truckloads with solar panels again. The sales volume per truckload of panels is 11,000 Euros. The complete production of a truckload of solar panels, including materials, costs 6,300 Euros."
  },
  {
    "objectID": "part-01/lecture-presentation.html#new-objective",
    "href": "part-01/lecture-presentation.html#new-objective",
    "title": "Lecture I - Welcome and Introduction",
    "section": "New Objective",
    "text": "New Objective\nIn the new contract, the company wants to maximize its profits while the demand does not have to be fulfilled.\n\nQuestion: What changes are necessary?\n\n\n\nWe need to change the objective function\nWe need to change some parameters\n\n\n\nQuestion: Does our decision variable change?\n\n\n\nNo, we still transport truckloads of solar panels"
  },
  {
    "objectID": "part-01/lecture-presentation.html#new-parameters",
    "href": "part-01/lecture-presentation.html#new-parameters",
    "title": "Lecture I - Welcome and Introduction",
    "section": "New Parameters",
    "text": "New Parameters\n\\[\n\\begin{aligned}\np &: \\text{Sales volume per truckload of solar panels,} \\\\\nc &: \\text{Production costs per truckload of solar panels.}\n\\end{aligned}\n\\]\n\nQuestion: What is the profit per truckload of solar panels?\n\n\n\\[\np - c\n\\]"
  },
  {
    "objectID": "part-01/lecture-presentation.html#former-model",
    "href": "part-01/lecture-presentation.html#former-model",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Former Model",
    "text": "Former Model\n\\[\n\\begin{aligned}\n\\text{Minimize} \\quad F &= \\sum_{i \\in \\mathcal{I}} \\sum_{j \\in \\mathcal{J}} c_{i,j} X_{i,j} \\\\\n\\text{subject to:} \\quad\n&\\sum_{j \\in \\mathcal{J}} X_{i,j} \\leq a_i \\quad &&\\forall i \\in \\mathcal{I} \\\\\n&\\sum_{i \\in \\mathcal{I}} X_{i,j} \\geq b_j \\quad &&\\forall j \\in \\mathcal{J} \\\\\n&X_{i,j} \\geq 0 \\quad &&\\forall i \\in \\mathcal{I}, \\forall j \\in \\mathcal{J}\n\\end{aligned}\n\\]"
  },
  {
    "objectID": "part-01/lecture-presentation.html#new-model",
    "href": "part-01/lecture-presentation.html#new-model",
    "title": "Lecture I - Welcome and Introduction",
    "section": "New Model",
    "text": "New Model\n\\[\n\\begin{aligned}\n\\text{Maximize} \\quad F &= \\sum_{i \\in \\mathcal{I}} \\sum_{j \\in \\mathcal{J}} (p-c-c_{i,j}) X_{i,j} \\\\\n\\text{subject to:} \\quad\n&\\sum_{j \\in \\mathcal{J}} X_{i,j} \\leq a_i \\quad &&\\forall i \\in \\mathcal{I} \\\\\n&\\sum_{i \\in \\mathcal{I}} X_{i,j} \\leq b_j \\quad &&\\forall j \\in \\mathcal{J} \\\\\n&X_{i,j} \\geq 0 \\quad &&\\forall i \\in \\mathcal{I}, \\forall j \\in \\mathcal{J}\n\\end{aligned}\n\\]"
  },
  {
    "objectID": "part-01/lecture-presentation.html#section-4",
    "href": "part-01/lecture-presentation.html#section-4",
    "title": "Lecture I - Welcome and Introduction",
    "section": "",
    "text": "Do you have\nany questions?"
  },
  {
    "objectID": "part-01/lecture-presentation.html#download-and-install-julia",
    "href": "part-01/lecture-presentation.html#download-and-install-julia",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Download and Install Julia",
    "text": "Download and Install Julia\n\nTo prepare for the upcoming lectures, we start by installing the Julia Programming Language and an Integrated Development Environment (IDE) to work with Julia."
  },
  {
    "objectID": "part-01/lecture-presentation.html#installating-julia",
    "href": "part-01/lecture-presentation.html#installating-julia",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Installating Julia",
    "text": "Installating Julia\n\n\nHead to julialang.org and follow the instructions.\n\n\n\n\n\n\n\nTip\n\n\nIf you are ever asked to add something to your “PATH”, do so!"
  },
  {
    "objectID": "part-01/lecture-presentation.html#vs-code",
    "href": "part-01/lecture-presentation.html#vs-code",
    "title": "Lecture I - Welcome and Introduction",
    "section": "VS Code",
    "text": "VS Code\n\n\nNext, we are going to install VS Code\nAlternatively, you can install VS Codium\nIt is essentially VS Code but without any tracking by MS"
  },
  {
    "objectID": "part-01/lecture-presentation.html#installing-vs-code",
    "href": "part-01/lecture-presentation.html#installing-vs-code",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Installing VS Code",
    "text": "Installing VS Code\n\nHead to the website code.visualstudio.com\nOR to the webside vscodium.com\nDownload and install the latest release"
  },
  {
    "objectID": "part-01/lecture-presentation.html#verify-the-installation",
    "href": "part-01/lecture-presentation.html#verify-the-installation",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Verify the Installation",
    "text": "Verify the Installation\n\nStart the IDE and take a look around\nSearch for the field “Extensions” on the left sidebar\nClick it and search for “Julia”\nDownload and install “Julia (Julia Language Support)”"
  },
  {
    "objectID": "part-01/lecture-presentation.html#create-a-new-file",
    "href": "part-01/lecture-presentation.html#create-a-new-file",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Create a new file",
    "text": "Create a new file\n\nCreate a new file with a “.jl” ending\nSave it somewhere on your computer\ne.g., in a folder that you will use in the course\n\n\nprint(\"Hello World!\")\n\n\n\nHello World!\n\n\n\nRun the file by clicking “run” in the upper right corner\nOR by pressing “Control+Enter” or “STRG+Enter”"
  },
  {
    "objectID": "part-01/lecture-presentation.html#everything-working",
    "href": "part-01/lecture-presentation.html#everything-working",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Everything working?",
    "text": "Everything working?\n\nIf the terminal opens with a Hello World! → perfect!\nIf not, it is likely that the IDE cannot find the path to Julia\nTry to determine the path and save it to VS Code\nAfter saving it, try to run the file again\n\n\n\n\n\n\n\nTip\n\n\nDon’t worry if it is not running right away. We will fix this together!"
  },
  {
    "objectID": "part-01/lecture-presentation.html#how-to-get-started",
    "href": "part-01/lecture-presentation.html#how-to-get-started",
    "title": "Lecture I - Welcome and Introduction",
    "section": "How to get started?",
    "text": "How to get started?\n\nLearning a new programming language is a daunting task\nIt is best to start with some small, interactive problems\nThen, slowly increase the scope of the tasks\nWe will do this together in class!\n\n\n\n\n\n\n\nNote\n\n\nAnd that’s it for todays lecture!\nWe now have covered a first introduction and are ready to start solving some problems in the upcoming lectures."
  },
  {
    "objectID": "part-01/lecture-presentation.html#section-5",
    "href": "part-01/lecture-presentation.html#section-5",
    "title": "Lecture I - Welcome and Introduction",
    "section": "",
    "text": "Questions?"
  },
  {
    "objectID": "part-01/lecture-presentation.html#literature-i",
    "href": "part-01/lecture-presentation.html#literature-i",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Literature I",
    "text": "Literature I\nFor more interesting literature to learn more about Julia, take a look at the literature list of this course."
  },
  {
    "objectID": "part-01/lecture-presentation.html#literature-ii",
    "href": "part-01/lecture-presentation.html#literature-ii",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Literature II",
    "text": "Literature II"
  },
  {
    "objectID": "general/literature.html",
    "href": "general/literature.html",
    "title": "Literature and Resources",
    "section": "",
    "text": "This section provides a curated list of books and resources to enhance your understanding of mathematical Modelling, Julia programming and related topics. Each recommendation includes a brief description to help you choose the most suitable resources for you.",
    "crumbs": [
      "Literature"
    ]
  },
  {
    "objectID": "general/literature.html#books",
    "href": "general/literature.html#books",
    "title": "Literature and Resources",
    "section": "Books",
    "text": "Books\n\nLauwens, B., & Downey, A. B. (2019). Think Julia: How to think like a computer scientist (First edition). O’Reilly®. Link to the free book website.\n\nThis book is great for beginners and covers Julia programming in a comprehensive manner.\n\nKwon, C. (2019). Julia programming for operations research (Second edition). Changhyun Kwon. Link to the free book website.\n\nThis book is a fantastic ressource for students interested in Julia and Operations Research and covers a variety of topics.",
    "crumbs": [
      "Literature"
    ]
  },
  {
    "objectID": "general/literature.html#resources",
    "href": "general/literature.html#resources",
    "title": "Literature and Resources",
    "section": "Resources",
    "text": "Resources\n\nJulia Documentation\n\nThe official Julia documentation is an good starting point to understand the language’s features and syntax.\n\nJuMP Documentation\n\nThe official documentation of JuMP is a great resource for understanding optimization modeling in Julia, covering everything from simple linear models to advanced nonlinear and mixed-integer problems.",
    "crumbs": [
      "Literature"
    ]
  },
  {
    "objectID": "general/literature.html#books-1",
    "href": "general/literature.html#books-1",
    "title": "Literature and Resources",
    "section": "Books",
    "text": "Books\n\nWilke, C. (2019). Fundamentals of data visualization: A primer on making informative and compelling figures (First edition). O’Reilly Media.\n\nA book that is highly recommended to understand the principles of data visualization and how to create effective visualizations.\nLink to the free book website\n\nThomas, D., & Hunt, A. (2019). The pragmatic programmer, 20th anniversary edition: Journey to mastery (Second edition). Addison-Wesley.\n\nA fantastic book to understand the principles of software development and how to create effective software.",
    "crumbs": [
      "Literature"
    ]
  },
  {
    "objectID": "general/literature.html#resources-1",
    "href": "general/literature.html#resources-1",
    "title": "Literature and Resources",
    "section": "Resources",
    "text": "Resources\n\nQuarto\n\nA static website generator that is very powerful and flexible. Used to create the slides and the website for the course.\n\nCursor\n\nA code editor based on VS Code that is very powerful and flexible. It uses AI to help you write code.\n\nJupyter\n\nA web application that allows you to create and share documents that contain code, equations, visualizations and text. It is very popular in the field of data science and academia and also part of Quarto.\n\nAdvent of Code\n\nA wonderful website with daily challenges during the christmas time. Highly recommended to playfully improve your skills.\n\nGithub\n\nThe largest provider for git repositories owned by Microsoft. A lot of open source projects are hosted here and you can read the code.\n\nCodewars\n\nA platform to improve your coding skills by solving challenges. You can compete with others, see how other people solved the challenges and read and learn from the code.\n\nDaily Dose of Data Science\n\nA website and a newsletter with lots of easy-to-digest resources to improve your skills in Data Science.",
    "crumbs": [
      "Literature"
    ]
  },
  {
    "objectID": "general/cheatsheet-jump.html",
    "href": "general/cheatsheet-jump.html",
    "title": "JuMP Syntax Cheatsheet",
    "section": "",
    "text": "This cheatsheet summarizes the most common syntax elements of JuMP for optimization modeling in Julia. It includes examples for setting up models, declaring variables and constraints, defining objectives, adjusting solver options, solving, and accessing solutions.",
    "crumbs": [
      "Cheatsheets",
      "JuMP"
    ]
  },
  {
    "objectID": "general/cheatsheet-jump.html#importing-packages-and-creating-a-model",
    "href": "general/cheatsheet-jump.html#importing-packages-and-creating-a-model",
    "title": "JuMP Syntax Cheatsheet",
    "section": "Importing Packages and Creating a Model",
    "text": "Importing Packages and Creating a Model\n\nusing JuMP, HiGHS\n\n# Create a model with HiGHS optimizer\nmodel = Model(HiGHS.Optimizer)\n\n# Set a time limit for the optimizer (optional)\nset_optimizer_attribute(model, \"time_limit\", 60.0)",
    "crumbs": [
      "Cheatsheets",
      "JuMP"
    ]
  },
  {
    "objectID": "general/cheatsheet-jump.html#declaration",
    "href": "general/cheatsheet-jump.html#declaration",
    "title": "JuMP Syntax Cheatsheet",
    "section": "Declaration",
    "text": "Declaration\n\nContinuous Variables\n\n# Unbounded continuous variable\n@variable(model, x)\n\n# Non-negative continuous variable\n@variable(model, x &gt;= 0)\n\n# Bounded continuous variable (0 &lt;= x &lt;= 10)\n@variable(model, 0 &lt;= x &lt;= 10)\n\n# Fixed variable, x is fixed at 5\n@variable(model, x == 5)\n\n\n\nInteger Variables\n\n# Unbounded integer variable\n@variable(model, x, Int)\n\n# Non-negative integer variable\n@variable(model, x &gt;= 0, Int)\n\n# Bounded integer variable (0 &lt;= x &lt;= 10)\n@variable(model, 0 &lt;= x &lt;= 10, Int)\n\n\n\nBinary Variables\n\n# Binary variable (0 or 1)\n@variable(model, x, Bin)",
    "crumbs": [
      "Cheatsheets",
      "JuMP"
    ]
  },
  {
    "objectID": "general/cheatsheet-jump.html#containers",
    "href": "general/cheatsheet-jump.html#containers",
    "title": "JuMP Syntax Cheatsheet",
    "section": "Containers",
    "text": "Containers\n\nArrays and Matrices\n\n# Array of 5 continuous variables\n@variable(model, x[1:5])\n\n# Non-negative array of variables\n@variable(model, x[1:5] &gt;= 0)\n\n# Binary array of variables\n@variable(model, x[1:5], Bin)\n\n# 3x4 matrix of variables\n@variable(model, x[1:3, 1:4])\n\n# Integer 3x4 matrix\n@variable(model, x[1:3, 1:4], Int)\n\n\n\nCustom Indexing\n\nindices = [\"A\", \"B\", \"C\"]\n@variable(model, x[i in indices])",
    "crumbs": [
      "Cheatsheets",
      "JuMP"
    ]
  },
  {
    "objectID": "general/cheatsheet-jump.html#basic-constraints",
    "href": "general/cheatsheet-jump.html#basic-constraints",
    "title": "JuMP Syntax Cheatsheet",
    "section": "Basic Constraints",
    "text": "Basic Constraints\n\n# Declare additional variables as needed\n@variable(model, x)\n@variable(model, y)\n\n@constraint(model, con1, 2x + y &lt;= 10)\n@constraint(model, con2, x + 2y &gt;= 5)\n@constraint(model, con3, x == y)   # Equality constraint",
    "crumbs": [
      "Cheatsheets",
      "JuMP"
    ]
  },
  {
    "objectID": "general/cheatsheet-jump.html#constraints-with-containers",
    "href": "general/cheatsheet-jump.html#constraints-with-containers",
    "title": "JuMP Syntax Cheatsheet",
    "section": "Constraints with Containers",
    "text": "Constraints with Containers\n\n# Array Variables\n@variable(model, x[1:5] &gt;= 0)\n\n# Constraint for each variable element\n@constraint(model, capacity[i=1:5],\n    x[i] &lt;= 100\n)\n\n# Sum constraint across array\n@constraint(model, total_sum,\n    sum(x[i] for i in 1:5) &lt;= 500\n)\n\n# Matrix constraints: each element gets its constraint\n@variable(model, y[1:3, 1:4])\n@constraint(model, matrix_con[i=1:3, j=1:4],\n    y[i,j] &lt;= i + j\n)",
    "crumbs": [
      "Cheatsheets",
      "JuMP"
    ]
  },
  {
    "objectID": "general/cheatsheet-jump.html#conditional-constraints",
    "href": "general/cheatsheet-jump.html#conditional-constraints",
    "title": "JuMP Syntax Cheatsheet",
    "section": "Conditional Constraints",
    "text": "Conditional Constraints\n\n# Constraint applies only for indices where i &gt; 2\n@constraint(model, cond[i=1:5; i &gt; 2], \n    x[i] &lt;= 10\n)\n\n# Multiple conditions for two-dimensional index:\n@constraint(model, cond2[i=1:10, j=1:10; i != j && i + j &lt;= 15],\n    x[i,j] + x[j,i] &lt;= 1\n)",
    "crumbs": [
      "Cheatsheets",
      "JuMP"
    ]
  },
  {
    "objectID": "general/cheatsheet-jump.html#constraints-with-conditional-summations",
    "href": "general/cheatsheet-jump.html#constraints-with-conditional-summations",
    "title": "JuMP Syntax Cheatsheet",
    "section": "Constraints with Conditional Summations",
    "text": "Constraints with Conditional Summations\n\n# Sum over a subset of indices (e.g., i &gt; 2)\n@constraint(model, total_sum,\n    sum(x[i] for i in 1:5 if i &gt; 2) &lt;= 500\n)\n\n# Sum with multiple conditions on a 2D array\n@constraint(model, total_sum2,\n    sum(x[i,j] for i in 1:5, j in 1:5 if i != j && i + j &lt;= 7) &lt;= 1\n)\n\n\nTip: Use semicolons (;) to separate the index definition from conditions when defining constraints.",
    "crumbs": [
      "Cheatsheets",
      "JuMP"
    ]
  },
  {
    "objectID": "general/cheatsheet-jump.html#basic-objectives",
    "href": "general/cheatsheet-jump.html#basic-objectives",
    "title": "JuMP Syntax Cheatsheet",
    "section": "Basic Objectives",
    "text": "Basic Objectives\n\n@objective(model, Max, 5x + 3y)   # Maximize\n@objective(model, Min, 2x + 4y)   # Minimize",
    "crumbs": [
      "Cheatsheets",
      "JuMP"
    ]
  },
  {
    "objectID": "general/cheatsheet-jump.html#objectives-using-containers",
    "href": "general/cheatsheet-jump.html#objectives-using-containers",
    "title": "JuMP Syntax Cheatsheet",
    "section": "Objectives Using Containers",
    "text": "Objectives Using Containers\n\n# Container-based objective\n@variable(model, z[1:10])\n@objective(model, Min, sum(z[i] for i in 1:10))\n\n# Weighted objective function\nweights = [1, 2, 3, 4, 5]\n@objective(model, Max, \n    sum(weights[i] * z[i] for i in 1:5)\n)",
    "crumbs": [
      "Cheatsheets",
      "JuMP"
    ]
  },
  {
    "objectID": "general/cheatsheet-jump.html#variable-updates",
    "href": "general/cheatsheet-jump.html#variable-updates",
    "title": "JuMP Syntax Cheatsheet",
    "section": "Variable Updates",
    "text": "Variable Updates\n\n# Set or update variable bounds\nset_lower_bound(x, 0)\nset_upper_bound(x, 10)\n\n# Fix x to a specific value, then unfix if needed\nfix(x, 5)\nunfix(x)",
    "crumbs": [
      "Cheatsheets",
      "JuMP"
    ]
  },
  {
    "objectID": "general/cheatsheet-jump.html#constraint-updates",
    "href": "general/cheatsheet-jump.html#constraint-updates",
    "title": "JuMP Syntax Cheatsheet",
    "section": "Constraint Updates",
    "text": "Constraint Updates\n\n# Delete a constraint if necessary\ndelete(model, con1)\n\n\nNote: After modifying the model, you will need to re-solve it to update the solution.",
    "crumbs": [
      "Cheatsheets",
      "JuMP"
    ]
  },
  {
    "objectID": "general/cheatsheet-jump.html#checking-variable-properties",
    "href": "general/cheatsheet-jump.html#checking-variable-properties",
    "title": "JuMP Syntax Cheatsheet",
    "section": "Checking Variable Properties",
    "text": "Checking Variable Properties\n\n# Check bounds for a variable\nprintln(\"Has lower bound? \", has_lower_bound(x))\nprintln(\"Lower bound: \", lower_bound(x))\nprintln(\"Has upper bound? \", has_upper_bound(x))\nprintln(\"Upper bound: \", upper_bound(x))\n\n# Check variable type and retrieve information\nprintln(\"Is x binary? \", is_binary(x))\nprintln(\"Is x integer? \", is_integer(x))\nprintln(\"Variable name: \", name(x))\nprintln(\"Total number of variables: \", num_variables(model))",
    "crumbs": [
      "Cheatsheets",
      "JuMP"
    ]
  },
  {
    "objectID": "general/cheatsheet-jump.html#key-points",
    "href": "general/cheatsheet-jump.html#key-points",
    "title": "JuMP Syntax Cheatsheet",
    "section": "Key Points",
    "text": "Key Points\n\nAlways check solution status before using results\nSet appropriate time limits for large problems\nUse gap tolerances to balance precision and speed\nMonitor solve time for performance optimization\nConsider presolve for complex problems",
    "crumbs": [
      "Cheatsheets",
      "JuMP"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Welcome to Energy System Optimization (ESO) with Julia!",
    "section": "",
    "text": "Course Description\nIn this module we will focus on solving practical energy system problems with the help of optimization. Over the course of the semester, you will become familiar with advanced Operations Research methods and mathematical programming techniques applied to real-world energy challenges. You’ll work on diverse problems including renewable integration, storage optimization, and green hydrogen value chain optimization - all using modern programming tools. The module consists of lectures and hands-on programming exercises, totaling 2 semester hours per week (SWS). Students can earn 2.5 credit points through a portfolio examination that includes the programming excercieses (10%) and a final exam (90%).\n\n\nLearning Outcomes\nYou can find our specific outcomes in the module handbook. Our broader goal is to enable you to tackle complex energy system optimization problems independently. We want you to develop both theoretical understanding and practical implementation skills. Is our module hard? That’s a subjective question. We would say it is exciting and doable. If you have a basic interest in logical relationships and mathematics, you are in the right place. If you also have basic knowledge of programming or want to get into the subject with help, our module is perfect for you.\nUpon completion of the course, you …\n\ncan implement solutions to complex energy system optimization problems in Julia\nunderstand fundamental concepts of Operations Research and mathematical programming\nknow advanced optimization techniques including linear and mixed-integer programming\ncan develop and analyze mathematical models for energy system planning\nknow basic concepts of programming and algorithms such as loops, functions\nwill be able to read and write code in Julia\nwill have experience working with Julia libraries such as JuMP and HiGHS\nwill know how to collaborate in a small team to find solutions for problems at hand\nwill know how to tackle real-world energy system challenges\n\nPlease note that this course welcomes students from diverse study backgrounds interested in the field of energy from engineering and business perspective. While basic programming knowledge and mathematics fundamentals are prerequisites, it is not required to have any advanced knowledge or experience in programming to attend this course. The teaching format will make it possible to account for different levels of programming skills such that every student can take the most out of the course.\n\n\nCourse Blocks\nThe core content of the course is organized in three blocks:\n\nPart I: Introduction to Julia and Modelling\nPart II: Energy System Optimization with Basic Models\nPart III: Energy System Optimization with Advanced Models\n\nYou can find more information on the course blocks and the corresponding lectures in the syllabus.\n\n\nTutorials\nThe tutorials accompany the lectures. In the tutorials, you will apply the concepts from the lectures to realistic data sets. You will work in small groups of 2-3 participants, in which you can work out solutions together. We will help you during the weekly practice sessions by answering your questions or briefly explaining individual issues in case of difficulties. Afterwards, you have the opportunity to submit your jointly developed solution until the next exercise date in order to earn bonus points for the exam. You can earn up to half a bonus point per exercise, up to 6.0 bonus points in total. Important: the bonus points will only be credited to you if you pass the exam with at least a 4.0. Furthermore, we will not award bonus points for exercises in which you have simply copied the results of another group.\n\n\nHow to see the slides\n\nThis course is based on Quarto\nIt uses revealjs to render the slides\nYou find the slides for each lecture in the corresponding lecture\nTo see the slides, click on RevealJS in the top right side in the lecture\n\n\n\nQuestions\nIf you have any questions regarding the course, please contact me under tobias.cors@haw-hamburg.de.\n\n\nContributors\nThanks to Tobias Vlcek, who helped to prepare the lecture materials, especially for the first part of the course.",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "general/cheatsheet-julia.html",
    "href": "general/cheatsheet-julia.html",
    "title": "Julia Syntax Cheatsheet",
    "section": "",
    "text": "# Basic variable declaration\nx = 1                  # Implicit typing\ny::Int64 = 5          # Explicit type annotation\n\n# Common types\nnum_int = 42          # Integer\nnum_float = 19.99     # Float\nis_student = true     # Boolean\nname = \"Julia\"        # String\n\n# Check type\ntypeof(num_int)       # Returns Int64\ntypeof(num_float)     # Returns Float64\n\n\n\n\n\nname = \"Julia\"\nage = 30\n# Basic interpolation\nmessage = \"I am $age years old\"\n# Complex interpolation\ngreeting = \"Hello, my name is $name and I am $age years old\"\n\n\n\n\n\n# Convert between types\nfloat_num = Float64(42)    # Int to Float\nint_num = Int64(3.14)      # Float to Int\nstr_num = string(42)       # Number to String",
    "crumbs": [
      "Cheatsheets",
      "Julia"
    ]
  },
  {
    "objectID": "general/cheatsheet-julia.html#variable-declaration-and-types",
    "href": "general/cheatsheet-julia.html#variable-declaration-and-types",
    "title": "Julia Syntax Cheatsheet",
    "section": "",
    "text": "# Basic variable declaration\nx = 1                  # Implicit typing\ny::Int64 = 5          # Explicit type annotation\n\n# Common types\nnum_int = 42          # Integer\nnum_float = 19.99     # Float\nis_student = true     # Boolean\nname = \"Julia\"        # String\n\n# Check type\ntypeof(num_int)       # Returns Int64\ntypeof(num_float)     # Returns Float64",
    "crumbs": [
      "Cheatsheets",
      "Julia"
    ]
  },
  {
    "objectID": "general/cheatsheet-julia.html#string-operations",
    "href": "general/cheatsheet-julia.html#string-operations",
    "title": "Julia Syntax Cheatsheet",
    "section": "String Operations",
    "text": "String Operations\n\n# String manipulation\nstr = \"Hello, World!\"\nlength(str)           # String length\nlowercase(str)        # Convert to lowercase\nuppercase(str)        # Convert to uppercase\nstrip(\" text \")       # Remove leading/trailing whitespace",
    "crumbs": [
      "Cheatsheets",
      "Julia"
    ]
  },
  {
    "objectID": "general/cheatsheet-julia.html#string-interpolation",
    "href": "general/cheatsheet-julia.html#string-interpolation",
    "title": "Julia Syntax Cheatsheet",
    "section": "",
    "text": "name = \"Julia\"\nage = 30\n# Basic interpolation\nmessage = \"I am $age years old\"\n# Complex interpolation\ngreeting = \"Hello, my name is $name and I am $age years old\"",
    "crumbs": [
      "Cheatsheets",
      "Julia"
    ]
  },
  {
    "objectID": "general/cheatsheet-julia.html#type-conversion",
    "href": "general/cheatsheet-julia.html#type-conversion",
    "title": "Julia Syntax Cheatsheet",
    "section": "",
    "text": "# Convert between types\nfloat_num = Float64(42)    # Int to Float\nint_num = Int64(3.14)      # Float to Int\nstr_num = string(42)       # Number to String",
    "crumbs": [
      "Cheatsheets",
      "Julia"
    ]
  },
  {
    "objectID": "general/cheatsheet-julia.html#vectors",
    "href": "general/cheatsheet-julia.html#vectors",
    "title": "Julia Syntax Cheatsheet",
    "section": "Vectors",
    "text": "Vectors\n\n# Create vectors\ngrades = [95, 87, 91, 78, 88]    # Numeric vector\nnames = [\"Mike\", \"Yola\", \"Elio\"] # String vector\n\n# Vector operations\npush!(grades, 82)       # Add element to end\npop!(grades)           # Remove last element\npopfirst!(grades)      # Remove first element\n\n# Vector indexing\nfirst = grades[1]      # Access first element\nsubset = grades[1:3]   # Access first three elements",
    "crumbs": [
      "Cheatsheets",
      "Julia"
    ]
  },
  {
    "objectID": "general/cheatsheet-julia.html#matrices",
    "href": "general/cheatsheet-julia.html#matrices",
    "title": "Julia Syntax Cheatsheet",
    "section": "Matrices",
    "text": "Matrices\n\n# Create matrices\nmatrix = [1 2 3; 4 5 6]    # 2x3 matrix\n# Matrix operations\nmatrix[2,3] = 17           # Change specific element\n\n# Matrix arithmetic\nmatrix1 = [2 2; 3 3]\nmatrix2 = [1 2; 3 4]\nsum_matrix = matrix1 + matrix2      # Matrix addition\nprod_matrix = matrix1 * matrix2     # Matrix multiplication\nelement_prod = matrix1 .* matrix2   # Element-wise multiplication\n\n# Broadcasting\nmatrix .+ 10                # Add 10 to each element",
    "crumbs": [
      "Cheatsheets",
      "Julia"
    ]
  },
  {
    "objectID": "general/cheatsheet-julia.html#tuples",
    "href": "general/cheatsheet-julia.html#tuples",
    "title": "Julia Syntax Cheatsheet",
    "section": "Tuples",
    "text": "Tuples\n\n# Create tuples (immutable)\nperson = (\"Elio Smith\", 18, \"Hamburg\")\nrgb = (255, 0, 0)\n\n# Tuple operations\nname = person[1]           # Access first element\nage, city = person[2:3]    # Multiple assignment",
    "crumbs": [
      "Cheatsheets",
      "Julia"
    ]
  },
  {
    "objectID": "general/cheatsheet-julia.html#key-differences",
    "href": "general/cheatsheet-julia.html#key-differences",
    "title": "Julia Syntax Cheatsheet",
    "section": "Key Differences",
    "text": "Key Differences\n\nVectors: Mutable, 1-dimensional, good for lists\nMatrices: Mutable, 2-dimensional, good for linear algebra\nTuples: Immutable, fixed-size, good for grouping related constants",
    "crumbs": [
      "Cheatsheets",
      "Julia"
    ]
  },
  {
    "objectID": "general/cheatsheet-julia.html#basic-comparisons",
    "href": "general/cheatsheet-julia.html#basic-comparisons",
    "title": "Julia Syntax Cheatsheet",
    "section": "Basic Comparisons",
    "text": "Basic Comparisons\n\n# Comparison operators\nx == y    # Equal to\nx != y    # Not equal to\nx &lt; y     # Less than\nx &gt; y     # Greater than\nx &lt;= y    # Less than or equal to\nx &gt;= y    # Greater than or equal to\n\n# Examples\npassword_correct = (input == \"secret123\")\nis_adult = (age &gt;= 18)\ncan_afford = (price &lt;= budget)",
    "crumbs": [
      "Cheatsheets",
      "Julia"
    ]
  },
  {
    "objectID": "general/cheatsheet-julia.html#logical-operators",
    "href": "general/cheatsheet-julia.html#logical-operators",
    "title": "Julia Syntax Cheatsheet",
    "section": "Logical Operators",
    "text": "Logical Operators\n\n# AND operator (&&)\ncan_buy = (age &gt;= 18) && (money &gt;= price)    # Both conditions must be true\n\n# OR operator (||)\nneed_coat = (temp &lt; 10) || is_raining        # At least one must be true\n\n# NOT operator (!)\nis_closed = !is_open                         # Inverts boolean value",
    "crumbs": [
      "Cheatsheets",
      "Julia"
    ]
  },
  {
    "objectID": "general/cheatsheet-julia.html#chained-comparisons",
    "href": "general/cheatsheet-julia.html#chained-comparisons",
    "title": "Julia Syntax Cheatsheet",
    "section": "Chained Comparisons",
    "text": "Chained Comparisons\n\n# Instead of\nx &gt;= 0 && x &lt;= 10    # Check if x is between 0 and 10\n\n# You can write\n0 &lt;= x &lt;= 10         # More natural syntax\n\n# Real-world examples\nnormal_temp = 36.5 &lt;= body_temp &lt;= 37.5\nwork_hours = 9 &lt;= current_hour &lt; 17",
    "crumbs": [
      "Cheatsheets",
      "Julia"
    ]
  },
  {
    "objectID": "general/cheatsheet-julia.html#key-points-1",
    "href": "general/cheatsheet-julia.html#key-points-1",
    "title": "Julia Syntax Cheatsheet",
    "section": "Key Points",
    "text": "Key Points\n\nComparisons return boolean values (true or false)\n&& requires all conditions to be true\n|| requires at least one condition to be true\n! inverts a boolean value\nChained comparisons make range checks more readable",
    "crumbs": [
      "Cheatsheets",
      "Julia"
    ]
  },
  {
    "objectID": "general/cheatsheet-julia.html#for-loops",
    "href": "general/cheatsheet-julia.html#for-loops",
    "title": "Julia Syntax Cheatsheet",
    "section": "For Loops",
    "text": "For Loops\n\n# Basic for loop with range\nfor i in 1:3\n    println(i)        # Prints 1, 2, 3\nend\n\n# Iterating over array\nfruits = [\"apple\", \"banana\", \"cherry\"]\nfor fruit in fruits\n    println(fruit)    # Prints each fruit\nend\n\n# For loop with break\nfor x in 1:10\n    if x == 4\n        break        # Exits loop when x is 4\n    end\nend\n\n# For loop with conditions\nfor x in 1:10\n    if x &lt;= 2\n        println(x)\n    elseif x == 3\n        println(\"Three!\")\n    else \n        break\n    end\nend",
    "crumbs": [
      "Cheatsheets",
      "Julia"
    ]
  },
  {
    "objectID": "general/cheatsheet-julia.html#while-loops",
    "href": "general/cheatsheet-julia.html#while-loops",
    "title": "Julia Syntax Cheatsheet",
    "section": "While Loops",
    "text": "While Loops\n\n# Basic while loop\nnumber = 10\nwhile number &gt;= 5\n    number -= 1      # Decrements until &lt; 5\nend\n\n# Infinite loop with break\ncurrent = 0\nwhile true\n    current += 1\n    if current == 5\n        break        # Exits when condition met\n    end\nend\n\n# While loop with condition\nlives = 3\nwhile lives &gt; 0\n    lives -= 1       # Continues until lives = 0\nend",
    "crumbs": [
      "Cheatsheets",
      "Julia"
    ]
  },
  {
    "objectID": "general/cheatsheet-julia.html#nested-loops",
    "href": "general/cheatsheet-julia.html#nested-loops",
    "title": "Julia Syntax Cheatsheet",
    "section": "Nested Loops",
    "text": "Nested Loops\n\n# Nested loop example\nsizes = [\"S\", \"M\", \"L\"]\ncolors = [\"Red\", \"Blue\"]\nfor size in sizes\n    for color in colors\n        println(\"$color $size\")\n    end\nend\n\n# Matrix iteration\nfor i in 1:3\n    for j in 1:2\n        println(\"Position: $i,$j\")\n    end\nend",
    "crumbs": [
      "Cheatsheets",
      "Julia"
    ]
  },
  {
    "objectID": "general/cheatsheet-julia.html#list-comprehensions",
    "href": "general/cheatsheet-julia.html#list-comprehensions",
    "title": "Julia Syntax Cheatsheet",
    "section": "List Comprehensions",
    "text": "List Comprehensions\n\n# Basic list comprehension\nsquares = [n^2 for n in 1:5]    # [1,4,9,16,25]\n\n# With condition\nevens = [n for n in 1:10 if n % 2 == 0]    # [2,4,6,8,10]\n\n# Nested comprehension\nmatrix = [i*j for i in 1:3, j in 1:3]    # 3x3 multiplication table",
    "crumbs": [
      "Cheatsheets",
      "Julia"
    ]
  },
  {
    "objectID": "general/cheatsheet-julia.html#key-points-2",
    "href": "general/cheatsheet-julia.html#key-points-2",
    "title": "Julia Syntax Cheatsheet",
    "section": "Key Points",
    "text": "Key Points\n\nfor loops are best when you know the number of iterations\nwhile loops are useful for unknown iteration counts\nUse break to exit loops early\nList comprehensions offer concise array creation\nNested loops are useful for multi-dimensional iteration",
    "crumbs": [
      "Cheatsheets",
      "Julia"
    ]
  },
  {
    "objectID": "general/cheatsheet-julia.html#basic-dictionary-operations",
    "href": "general/cheatsheet-julia.html#basic-dictionary-operations",
    "title": "Julia Syntax Cheatsheet",
    "section": "Basic Dictionary Operations",
    "text": "Basic Dictionary Operations\n\n# Create a dictionary\nstudent_ids = Dict(\n    \"Elio\" =&gt; 1001,\n    \"Bob\" =&gt; 1002,\n    \"Yola\" =&gt; 1003\n)\n\n# Access values\nid = student_ids[\"Elio\"]        # Get value by key\nstudent_ids[\"David\"] = 1004     # Add new key-value pair\ndelete!(student_ids, \"Bob\")     # Remove entry\n\n# Check key existence\nif haskey(student_ids, \"Eve\")\n    println(student_ids[\"Eve\"])\nend",
    "crumbs": [
      "Cheatsheets",
      "Julia"
    ]
  },
  {
    "objectID": "general/cheatsheet-julia.html#advanced-operations",
    "href": "general/cheatsheet-julia.html#advanced-operations",
    "title": "Julia Syntax Cheatsheet",
    "section": "Advanced Operations",
    "text": "Advanced Operations\n\n# Dictionary with array values\ngrades = Dict(\n    \"Elio\" =&gt; [85, 92, 78],\n    \"Bob\" =&gt; [76, 88, 94]\n)\n\n# Get all keys and values\nnames = keys(grades)          # Get all keys\nscores = values(grades)       # Get all values\n\n# Iterate over dictionary\nfor (student, grade_list) in grades\n    avg = sum(grade_list) / length(grade_list)\n    println(\"$student: $avg\")\nend",
    "crumbs": [
      "Cheatsheets",
      "Julia"
    ]
  },
  {
    "objectID": "general/cheatsheet-julia.html#common-methods",
    "href": "general/cheatsheet-julia.html#common-methods",
    "title": "Julia Syntax Cheatsheet",
    "section": "Common Methods",
    "text": "Common Methods\n\n# Dictionary methods\nlength(dict)           # Number of entries\nempty!(dict)           # Remove all entries\nget(dict, key, default)# Get value or default if key missing\nmerge(dict1, dict2)    # Combine two dictionaries\ncopy(dict)             # Create shallow copy",
    "crumbs": [
      "Cheatsheets",
      "Julia"
    ]
  },
  {
    "objectID": "general/cheatsheet-julia.html#key-points-3",
    "href": "general/cheatsheet-julia.html#key-points-3",
    "title": "Julia Syntax Cheatsheet",
    "section": "Key Points",
    "text": "Key Points\n\nKeys must be unique\nValues can be of any type (including arrays)\nUse haskey() to safely check for key existence\nDictionaries are mutable (can be changed)\nKeys are accessed with square brackets dict[\"key\"]",
    "crumbs": [
      "Cheatsheets",
      "Julia"
    ]
  },
  {
    "objectID": "general/cheatsheet-julia.html#basic-function-definition",
    "href": "general/cheatsheet-julia.html#basic-function-definition",
    "title": "Julia Syntax Cheatsheet",
    "section": "Basic Function Definition",
    "text": "Basic Function Definition\n\n# Basic function with explicit return\nfunction say_hello(name)\n    return \"Hello, $(name)!\"\nend\n\n# Function with implicit return\nfunction multiply(a, b)\n    a * b    # Last expression is automatically returned\nend\n\n# Conditional return\nfunction do_something(a, b)\n    if a &gt; b\n        return a * b\n    else\n        return a + b\n    end\nend",
    "crumbs": [
      "Cheatsheets",
      "Julia"
    ]
  },
  {
    "objectID": "general/cheatsheet-julia.html#advanced-function-features",
    "href": "general/cheatsheet-julia.html#advanced-function-features",
    "title": "Julia Syntax Cheatsheet",
    "section": "Advanced Function Features",
    "text": "Advanced Function Features\n\n# Optional arguments\nfunction greet(name=\"Guest\", greeting=\"Hello\")\n    \"$greeting, $name!\"\nend\n\n# Multiple return values\nfunction stats(numbers)\n    avg = sum(numbers) / length(numbers)\n    min_val = minimum(numbers)\n    max_val = maximum(numbers)\n    return avg, min_val, max_val\nend\n\n# Anonymous functions\nnumbers = 1:10\nmap(x -&gt; x^2, numbers)  # Square each number",
    "crumbs": [
      "Cheatsheets",
      "Julia"
    ]
  },
  {
    "objectID": "general/cheatsheet-julia.html#function-scope",
    "href": "general/cheatsheet-julia.html#function-scope",
    "title": "Julia Syntax Cheatsheet",
    "section": "Function Scope",
    "text": "Function Scope\n\n# Local scope example\nfunction bake_cake()\n    secret_ingredient = \"vanilla\"    # Only exists inside function\n    return secret_ingredient        # Must return to access outside\nend\n\n# Variables outside function not accessible inside\nglobal_var = 10\nfunction scope_example()\n    # Can read global_var but can't modify it\n    return global_var + 5\nend",
    "crumbs": [
      "Cheatsheets",
      "Julia"
    ]
  },
  {
    "objectID": "general/cheatsheet-julia.html#multiple-dispatch",
    "href": "general/cheatsheet-julia.html#multiple-dispatch",
    "title": "Julia Syntax Cheatsheet",
    "section": "Multiple Dispatch",
    "text": "Multiple Dispatch\n\n# Generic operation for all types\nfunction operation(a, b)\n    \"Generic operation for $(typeof(a)) and $(typeof(b))\"\nend\n\n# Type-specific implementations\noperation(a::Number, b::Number) = a + b        # For numbers\noperation(a::String, b::String) = string(a, b) # For strings\n\n# Usage examples\noperation(10, 20)          # Returns 30\noperation(\"Hello\", \"!\")    # Returns \"Hello!\"\noperation(\"Hi\", 42)        # Uses generic operation",
    "crumbs": [
      "Cheatsheets",
      "Julia"
    ]
  },
  {
    "objectID": "general/cheatsheet-julia.html#key-points-4",
    "href": "general/cheatsheet-julia.html#key-points-4",
    "title": "Julia Syntax Cheatsheet",
    "section": "Key Points",
    "text": "Key Points\n\nFunctions can have explicit or implicit returns\nLast expression is automatically returned if no return statement\nVariables inside functions are local by default\nMultiple dispatch allows different behavior based on argument types\nUse return for early exits or conditional",
    "crumbs": [
      "Cheatsheets",
      "Julia"
    ]
  },
  {
    "objectID": "general/cheatsheet-julia.html#basic-package-operations",
    "href": "general/cheatsheet-julia.html#basic-package-operations",
    "title": "Julia Syntax Cheatsheet",
    "section": "Basic Package Operations",
    "text": "Basic Package Operations\n\n# Import package manager\nimport Pkg              # Access as Pkg.function()\nusing Pkg              # Import all exported names\n\n# Add packages\nPkg.add(\"DataFrames\")  # Add single package\nPkg.add([\"Package1\", \"Package2\"])  # Add multiple packages\n\n# Update packages\nPkg.update()           # Update all packages\nPkg.update(\"DataFrames\")  # Update specific package\n\n# Remove packages\nPkg.rm(\"DataFrames\")   # Remove package",
    "crumbs": [
      "Cheatsheets",
      "Julia"
    ]
  },
  {
    "objectID": "general/faq.html",
    "href": "general/faq.html",
    "title": "Frequently Asked Questions",
    "section": "",
    "text": "If you have a question that is not answered here, please let me know by sending me an e-mail to tobias.cors@haw-hamburg.de or by creating an issue on GitHub.",
    "crumbs": [
      "FAQs"
    ]
  },
  {
    "objectID": "general/faq.html#unanswered-questions",
    "href": "general/faq.html#unanswered-questions",
    "title": "Frequently Asked Questions",
    "section": "",
    "text": "If you have a question that is not answered here, please let me know by sending me an e-mail to tobias.cors@haw-hamburg.de or by creating an issue on GitHub.",
    "crumbs": [
      "FAQs"
    ]
  },
  {
    "objectID": "general/faq.html#contribution-and-mistakes",
    "href": "general/faq.html#contribution-and-mistakes",
    "title": "Frequently Asked Questions",
    "section": "Contribution and Mistakes",
    "text": "Contribution and Mistakes\nIf you have found a mistake in the course material or if you have any suggestion on how to improve the course, please let me know in the following form or by creating an issue on GitHub.",
    "crumbs": [
      "FAQs"
    ]
  },
  {
    "objectID": "general/faq.html#faqs",
    "href": "general/faq.html#faqs",
    "title": "Frequently Asked Questions",
    "section": "FAQs",
    "text": "FAQs\n\nIs the course difficult?\nIn terms of difficulty, this is of course somehow complicated for me to assess. However, I have tried to make all the content as comprehensible as possible and really do ask you many questions in the lectures. If I have the impression that something has not been understood at all, then I take longer at that point. This semester is the first time I think the course is truly finished. I have adapted the slides based on feedback from the last two years and made all the examples as simple as possible. In a nutshell: If you are interested in the subject and equations do not scare you, you will likely do great in the course.\n\n\nHow can I download PDF slides from the lecture?\nYou have two options:\n\nOption 1: Download from Github\n\nFollow this link to the PDF slides on Github.\n\n\n\nOption 2: Generate yourself\n\nFirst, open the lecture you want to download the slides from.\nThen, click on the RevealJS button in the top right corner.\nNow, click on the three stacked bars in the lower left corner.\nThen, click on Tools in the upper left corner.\nNow you can select PDF Export Mode and then save the slides as a PDF.\n\n\n\n\n\n\n\nNote\n\n\n\nUnfortunately, this method does not work perfectly on all browsers. If you have a Chrome based browser, you should be fine.",
    "crumbs": [
      "FAQs"
    ]
  },
  {
    "objectID": "general/faq.html#how-does-the-calculation-of-the-bonus-points-work",
    "href": "general/faq.html#how-does-the-calculation-of-the-bonus-points-work",
    "title": "Frequently Asked Questions",
    "section": "How does the calculation of the bonus points work?",
    "text": "How does the calculation of the bonus points work?\nTo reach the full 6 points, all exercises must be submitted. A maximum of 0.5 points can be earned per exercise. In the overview, ‘1’ stands for successfully submitted, and ‘0.5’ for submitted (but without attempting to solve everything). In the end, I calculate this as half or quarter points towards the total score.",
    "crumbs": [
      "FAQs"
    ]
  },
  {
    "objectID": "general/syllabus.html",
    "href": "general/syllabus.html",
    "title": "Syllabus",
    "section": "",
    "text": "In the first part, an introduction to the basic concepts of programming in Julia and to mathematical modelling is provided. Students will learn the Julia syntax, data types, as well as how to implement loops and functions in Julia. We will introduce core Julia libraries, too, including JuMP and DataFrames. Once these concepts are understood, we will learn how they can be used to solve problems.\n\n\n\nWelcome and Introduction (I)\nIntroduction to the course and mathematical modelling\nFirst Steps in Julia (II)\nVectors, matrices, basic operations loops and functions\nPackages and Data Management (III)\nPackage Management, DataFrames, reading and writing data\nModelling with JuMP (IV)\nModeling with JuMP with variables, parameters and constraints",
    "crumbs": [
      "Syllabus"
    ]
  },
  {
    "objectID": "general/syllabus.html#introduction-to-julia-and-modelling",
    "href": "general/syllabus.html#introduction-to-julia-and-modelling",
    "title": "Syllabus",
    "section": "",
    "text": "In the first part, an introduction to the basic concepts of programming in Julia and to mathematical modelling is provided. Students will learn the Julia syntax, data types, as well as how to implement loops and functions in Julia. We will introduce core Julia libraries, too, including JuMP and DataFrames. Once these concepts are understood, we will learn how they can be used to solve problems.",
    "crumbs": [
      "Syllabus"
    ]
  },
  {
    "objectID": "general/syllabus.html#lectures",
    "href": "general/syllabus.html#lectures",
    "title": "Syllabus",
    "section": "",
    "text": "Welcome and Introduction (I)\nIntroduction to the course and mathematical modelling\nFirst Steps in Julia (II)\nVectors, matrices, basic operations loops and functions\nPackages and Data Management (III)\nPackage Management, DataFrames, reading and writing data\nModelling with JuMP (IV)\nModeling with JuMP with variables, parameters and constraints",
    "crumbs": [
      "Syllabus"
    ]
  },
  {
    "objectID": "general/syllabus.html#applied-optimization-with-basic-models",
    "href": "general/syllabus.html#applied-optimization-with-basic-models",
    "title": "Syllabus",
    "section": "Applied Optimization with Basic Models",
    "text": "Applied Optimization with Basic Models\nIn the second part, we will cover energy system optimization based on basic modelling concepts. We will start with the classic generator expansion problem and learn how to model and solve it using JuMP. Afterwards we start to bring together further modelling concepts, such as the unit commitment and storages, to build a digital twin of a power system for various decision problems. Finally, we developed a basic framework to model and solve operations and investment planning problems of energy systems.",
    "crumbs": [
      "Syllabus"
    ]
  },
  {
    "objectID": "general/syllabus.html#lectures-1",
    "href": "general/syllabus.html#lectures-1",
    "title": "Syllabus",
    "section": "Lectures",
    "text": "Lectures\nGenerator Expansion Planning (V)\nA case study on generator expansion planning\nUnit Commitment as Short-term Scheduling (VI)\nA case study on unit commitment as short-term scheduling\nStorages (VII)\nA case study on storages\nInvestment Planning (VIII)\nA case study on investment planning",
    "crumbs": [
      "Syllabus"
    ]
  },
  {
    "objectID": "general/syllabus.html#applied-optimization-with-advanced-models",
    "href": "general/syllabus.html#applied-optimization-with-advanced-models",
    "title": "Syllabus",
    "section": "Applied Optimization with Advanced Models",
    "text": "Applied Optimization with Advanced Models\nIn the third part, we will cover more advanced optimization models and concepts. We will start to extend the basic models to more complex models, such as multi-energy systems and uncertainty modelling.",
    "crumbs": [
      "Syllabus"
    ]
  },
  {
    "objectID": "general/syllabus.html#lectures-2",
    "href": "general/syllabus.html#lectures-2",
    "title": "Syllabus",
    "section": "Lectures",
    "text": "Lectures\nMulti-energy Systems (IX)\nA case study on multi-energy systems\nUncertainty Modelling and Renewable Energy Integration (X)\nA case study on uncertainty modelling and renewable energy integration\nIntermission: Exam Preparation (XI)\nWe will prepare for the exam by solving a set of exercises together in the lecture.\nElectricity Market and Carbon Pricing (XII)\nA case study on electricity market and carbon pricing\nRecap and Discussion (XIII)\nWe repeat the concepts from the course and discuss all your remaining questions",
    "crumbs": [
      "Syllabus"
    ]
  },
  {
    "objectID": "part-02/lecture-presentation.html#download-and-install-julia",
    "href": "part-02/lecture-presentation.html#download-and-install-julia",
    "title": "Lecture II - First Steps in Julia",
    "section": "Download and Install Julia",
    "text": "Download and Install Julia\n\nTo prepare for the upcoming lectures, we start by installing the Julia Programming Language and an Integrated Development Environment (IDE) to work with Julia."
  },
  {
    "objectID": "part-02/lecture-presentation.html#installaing-julia",
    "href": "part-02/lecture-presentation.html#installaing-julia",
    "title": "Lecture II - First Steps in Julia",
    "section": "Installaing Julia",
    "text": "Installaing Julia\n\n\nHead to julialang.org and follow the instructions.\n\n\n\n\n\n\n\n\nTip\n\n\nIf you are ever asked to add something to your “PATH”, do so!"
  },
  {
    "objectID": "part-02/lecture-presentation.html#vs-code",
    "href": "part-02/lecture-presentation.html#vs-code",
    "title": "Lecture II - First Steps in Julia",
    "section": "VS Code",
    "text": "VS Code\n\n\nNext, we are going to install VS Code\nAlternatively, you can install VS Codium\nIt is essentially VS Code but without any tracking by MS"
  },
  {
    "objectID": "part-02/lecture-presentation.html#installing-vs-code",
    "href": "part-02/lecture-presentation.html#installing-vs-code",
    "title": "Lecture II - First Steps in Julia",
    "section": "Installing VS Code",
    "text": "Installing VS Code\n\nHead to the website code.visualstudio.com\nOR to the webside vscodium.com\nDownload and install the latest release"
  },
  {
    "objectID": "part-02/lecture-presentation.html#verify-the-installation",
    "href": "part-02/lecture-presentation.html#verify-the-installation",
    "title": "Lecture II - First Steps in Julia",
    "section": "Verify the Installation",
    "text": "Verify the Installation\n\nStart the IDE and take a look around\nSearch for the field “Extensions” on the left sidebar\nClick it and search for “Julia”\nDownload and install “Julia (Julia Language Support)”"
  },
  {
    "objectID": "part-02/lecture-presentation.html#create-a-new-file",
    "href": "part-02/lecture-presentation.html#create-a-new-file",
    "title": "Lecture II - First Steps in Julia",
    "section": "Create a new file",
    "text": "Create a new file\n\nCreate a new file with a “.jl” ending\nSave it somewhere on your computer\ne.g., in a folder that you will use in the course\n\n\nprint(\"Hello World!\")\n\n\n\nHello World!\n\n\n\nRun the file by clicking “run” in the upper right corner\nOR by pressing “Control+Enter” or “STRG+Enter”"
  },
  {
    "objectID": "part-02/lecture-presentation.html#everything-working",
    "href": "part-02/lecture-presentation.html#everything-working",
    "title": "Lecture II - First Steps in Julia",
    "section": "Everything working?",
    "text": "Everything working?\n\nIf the terminal opens with a Hello World! → perfect!\nIf not, it is likely that the IDE cannot find the path to Julia\nTry to determine the path and save it to VS Code\nAfter saving it, try to run the file again\n\n\n\n\n\n\n\nTip\n\n\nDon’t worry if it is not running right away. We will fix this together!"
  },
  {
    "objectID": "part-02/lecture-presentation.html#julia-as-a-programming-language",
    "href": "part-02/lecture-presentation.html#julia-as-a-programming-language",
    "title": "Lecture II - First Steps in Julia",
    "section": "Julia as a Programming Language",
    "text": "Julia as a Programming Language\n\nFollowing three lectures are dedicated to learning the basics\nStart with the very basics and gradually move on\nFocus in the first two lectures on the programming language\nThird lecture dedicated to Mathematical Optimization"
  },
  {
    "objectID": "part-02/lecture-presentation.html#notebooks-in-vs-code",
    "href": "part-02/lecture-presentation.html#notebooks-in-vs-code",
    "title": "Lecture II - First Steps in Julia",
    "section": "Notebooks in VS Code",
    "text": "Notebooks in VS Code\n\nThe easiest way is by using VS Code\nInstall the Jupyter Extension\nNow, you can open .ipynb files\nHere you can run the code in the cells"
  },
  {
    "objectID": "part-02/lecture-presentation.html#downloading-the-notebooks",
    "href": "part-02/lecture-presentation.html#downloading-the-notebooks",
    "title": "Lecture II - First Steps in Julia",
    "section": "Downloading the Notebooks",
    "text": "Downloading the Notebooks\n\nYou will find the tutorial notebooks next to the tutorial pages\nOn each page, you will find a button Jupyter on the right\nClick it to download the notebook and save it\nI’d recommend storing the notebooks in a separate directory for this course"
  },
  {
    "objectID": "part-02/lecture-presentation.html#learning-by-doing",
    "href": "part-02/lecture-presentation.html#learning-by-doing",
    "title": "Lecture II - First Steps in Julia",
    "section": "Learning by doing",
    "text": "Learning by doing\n\nThe best way to learn a programming language is by doing\nWe will therefore solve problems the coming weeks\nThe goal is to get you familiar with the language\nYou can discuss the problems with your fellow students\nYou can hand in your solutions to receive bonus points!"
  },
  {
    "objectID": "part-02/lecture-presentation.html#ijulia",
    "href": "part-02/lecture-presentation.html#ijulia",
    "title": "Lecture II - First Steps in Julia",
    "section": "IJulia",
    "text": "IJulia\n\nIJulia is an interface between Julia and Jupyter Notebooks\nPopular tool for data analysis and visualization\nYou can use IJulia to run Julia code in the notebooks\n\n\n\n\n\n\n\n\nTip\n\n\nYou can also copy and paste code from the notebooks into your IDE!"
  },
  {
    "objectID": "part-02/lecture-presentation.html#installing-ijulia",
    "href": "part-02/lecture-presentation.html#installing-ijulia",
    "title": "Lecture II - First Steps in Julia",
    "section": "Installing IJulia",
    "text": "Installing IJulia\n\nOpen the VS Code IDE and start a terminal\nStart Julia by typing julia in the terminal\nInstall IJulia by typing ] to open the package manager\nInstall IJulia by typing add IJulia\nPress Enter"
  },
  {
    "objectID": "part-02/lecture-presentation.html#running-ijulia",
    "href": "part-02/lecture-presentation.html#running-ijulia",
    "title": "Lecture II - First Steps in Julia",
    "section": "Running IJulia",
    "text": "Running IJulia\nusing IJulia; notebook()\n\nStart IJulia by typing the above code in the Julia prompt\nThis will open a new browser window\nYou can now run code in the notebooks\n\n\n\n\n\n\n\n\nTip\n\n\nYou can also run the notebooks in VS Code, if you prefer!"
  },
  {
    "objectID": "part-02/lecture-presentation.html#submission-of-assignments-1",
    "href": "part-02/lecture-presentation.html#submission-of-assignments-1",
    "title": "Lecture II - First Steps in Julia",
    "section": "Submission of Assignments",
    "text": "Submission of Assignments\n\nYou can work in groups of up to three people\nSubmit the assignment via Moodle\nYou will submit your assignment by uploading a notebook\nThe assignment is due the day before the next tutorial\n\n\n\n\n\n\n\n\nTip\n\n\nDon’t forget to save your notebook before uploading it to Moodle!"
  },
  {
    "objectID": "part-02/lecture-presentation.html#grading-of-assignments",
    "href": "part-02/lecture-presentation.html#grading-of-assignments",
    "title": "Lecture II - First Steps in Julia",
    "section": "Grading of Assignments",
    "text": "Grading of Assignments\n\nEach assignment is worth 0.5 points\nYou can get a maximum of 6.0 points from the assignments\nThe points will be added to your exam points\nYou need to pass the exam first, to receive any bonus points!\n\n\n\n\n\n\n\n\nNote\n\n\nThe assignments are mandatory!"
  },
  {
    "objectID": "part-02/lecture-presentation.html#topics-of-the-tutorials",
    "href": "part-02/lecture-presentation.html#topics-of-the-tutorials",
    "title": "Lecture II - First Steps in Julia",
    "section": "Topics of the Tutorials",
    "text": "Topics of the Tutorials\n\nVariables: Learn how to assign values to variables\nVectors: Learn how to create and manipulate vectors\nComparisons: Learn how to compare values\nLoops: Learn how to use loops to repeat code\nScope: Learn about the scope of variables"
  },
  {
    "objectID": "part-02/lecture-presentation.html#get-started-with-the-tutorials",
    "href": "part-02/lecture-presentation.html#get-started-with-the-tutorials",
    "title": "Lecture II - First Steps in Julia",
    "section": "Get started with the tutorials",
    "text": "Get started with the tutorials\n\nDownload the first notebook and open it\nStart with the first problem and solve it step by step\nYou can find the tutorials here on the website\nYou can ask questions anytime!\n\n\n\n\n\n\n\n\nAnd that’s it for this lecture!\n\n\nThe remaining time we will already start working on the first problems."
  },
  {
    "objectID": "part-02/lecture-presentation.html#literature-1",
    "href": "part-02/lecture-presentation.html#literature-1",
    "title": "Lecture II - First Steps in Julia",
    "section": "Literature",
    "text": "Literature\n\nLauwens, B., & Downey, A. B. (2019). Think Julia: How to think like a computer scientist (First edition). O’Reilly®. Link to the free book website.\nJulia Documentation\n\nFor more interesting literature to learn more about Julia, take a look at the literature list of this course."
  },
  {
    "objectID": "part-02/lecture-firststeps.html",
    "href": "part-02/lecture-firststeps.html",
    "title": "Lecture II - First Steps in Julia",
    "section": "",
    "text": "To prepare for the upcoming lectures, we start by installing the Julia Programming Language and an Integrated Development Environment (IDE) to work with Julia.\n\n\n\n\n\nHead to julialang.org and follow the instructions.\n\n. . .\n\n\n\n\n\n\nTip\n\n\n\nIf you are ever asked to add something to your “PATH”, do so!\n\n\n\n\n\n\n\nNext, we are going to install VS Code\nAlternatively, you can install VS Codium\nIt is essentially VS Code but without any tracking by MS\n\n\n\n\n\nHead to the website code.visualstudio.com\nOR to the webside vscodium.com\nDownload and install the latest release\n\n\n\n\n\nStart the IDE and take a look around\nSearch for the field “Extensions” on the left sidebar\nClick it and search for “Julia”\nDownload and install “Julia (Julia Language Support)”\n\n\n\n\n\nCreate a new file with a “.jl” ending\nSave it somewhere on your computer\ne.g., in a folder that you will use in the course\n\n\nprint(\"Hello World!\")\n\nHello World!\n\n\n\nRun the file by clicking “run” in the upper right corner\nOR by pressing “Control+Enter” or “STRG+Enter”\n\n\n\n\n\nIf the terminal opens with a Hello World! → perfect!\nIf not, it is likely that the IDE cannot find the path to Julia\nTry to determine the path and save it to VS Code\nAfter saving it, try to run the file again\n\n\n\n\n\n\n\nTip\n\n\n\nDon’t worry if it is not running right away. We will fix this together!",
    "crumbs": [
      "02 First Steps",
      "Lecture"
    ]
  },
  {
    "objectID": "part-02/lecture-firststeps.html#download-and-install-julia",
    "href": "part-02/lecture-firststeps.html#download-and-install-julia",
    "title": "Lecture II - First Steps in Julia",
    "section": "",
    "text": "To prepare for the upcoming lectures, we start by installing the Julia Programming Language and an Integrated Development Environment (IDE) to work with Julia.",
    "crumbs": [
      "02 First Steps",
      "Lecture"
    ]
  },
  {
    "objectID": "part-02/lecture-firststeps.html#installaing-julia",
    "href": "part-02/lecture-firststeps.html#installaing-julia",
    "title": "Lecture II - First Steps in Julia",
    "section": "",
    "text": "Head to julialang.org and follow the instructions.\n\n. . .\n\n\n\n\n\n\nTip\n\n\n\nIf you are ever asked to add something to your “PATH”, do so!",
    "crumbs": [
      "02 First Steps",
      "Lecture"
    ]
  },
  {
    "objectID": "part-02/lecture-firststeps.html#vs-code",
    "href": "part-02/lecture-firststeps.html#vs-code",
    "title": "Lecture II - First Steps in Julia",
    "section": "",
    "text": "Next, we are going to install VS Code\nAlternatively, you can install VS Codium\nIt is essentially VS Code but without any tracking by MS",
    "crumbs": [
      "02 First Steps",
      "Lecture"
    ]
  },
  {
    "objectID": "part-02/lecture-firststeps.html#installing-vs-code",
    "href": "part-02/lecture-firststeps.html#installing-vs-code",
    "title": "Lecture II - First Steps in Julia",
    "section": "",
    "text": "Head to the website code.visualstudio.com\nOR to the webside vscodium.com\nDownload and install the latest release",
    "crumbs": [
      "02 First Steps",
      "Lecture"
    ]
  },
  {
    "objectID": "part-02/lecture-firststeps.html#verify-the-installation",
    "href": "part-02/lecture-firststeps.html#verify-the-installation",
    "title": "Lecture II - First Steps in Julia",
    "section": "",
    "text": "Start the IDE and take a look around\nSearch for the field “Extensions” on the left sidebar\nClick it and search for “Julia”\nDownload and install “Julia (Julia Language Support)”",
    "crumbs": [
      "02 First Steps",
      "Lecture"
    ]
  },
  {
    "objectID": "part-02/lecture-firststeps.html#create-a-new-file",
    "href": "part-02/lecture-firststeps.html#create-a-new-file",
    "title": "Lecture II - First Steps in Julia",
    "section": "",
    "text": "Create a new file with a “.jl” ending\nSave it somewhere on your computer\ne.g., in a folder that you will use in the course\n\n\nprint(\"Hello World!\")\n\nHello World!\n\n\n\nRun the file by clicking “run” in the upper right corner\nOR by pressing “Control+Enter” or “STRG+Enter”",
    "crumbs": [
      "02 First Steps",
      "Lecture"
    ]
  },
  {
    "objectID": "part-02/lecture-firststeps.html#everything-working",
    "href": "part-02/lecture-firststeps.html#everything-working",
    "title": "Lecture II - First Steps in Julia",
    "section": "",
    "text": "If the terminal opens with a Hello World! → perfect!\nIf not, it is likely that the IDE cannot find the path to Julia\nTry to determine the path and save it to VS Code\nAfter saving it, try to run the file again\n\n\n\n\n\n\n\nTip\n\n\n\nDon’t worry if it is not running right away. We will fix this together!",
    "crumbs": [
      "02 First Steps",
      "Lecture"
    ]
  },
  {
    "objectID": "part-02/lecture-firststeps.html#julia-as-a-programming-language",
    "href": "part-02/lecture-firststeps.html#julia-as-a-programming-language",
    "title": "Lecture II - First Steps in Julia",
    "section": "Julia as a Programming Language",
    "text": "Julia as a Programming Language\n\nFollowing three lectures are dedicated to learning the basics\nStart with the very basics and gradually move on\nFocus in the first two lectures on the programming language\nThird lecture dedicated to Mathematical Optimization",
    "crumbs": [
      "02 First Steps",
      "Lecture"
    ]
  },
  {
    "objectID": "part-02/lecture-firststeps.html#notebooks-in-vs-code",
    "href": "part-02/lecture-firststeps.html#notebooks-in-vs-code",
    "title": "Lecture II - First Steps in Julia",
    "section": "Notebooks in VS Code",
    "text": "Notebooks in VS Code\n\nThe easiest way is by using VS Code\nInstall the Jupyter Extension\nNow, you can open .ipynb files\nHere you can run the code in the cells",
    "crumbs": [
      "02 First Steps",
      "Lecture"
    ]
  },
  {
    "objectID": "part-02/lecture-firststeps.html#downloading-the-notebooks",
    "href": "part-02/lecture-firststeps.html#downloading-the-notebooks",
    "title": "Lecture II - First Steps in Julia",
    "section": "Downloading the Notebooks",
    "text": "Downloading the Notebooks\n\nYou will find the tutorial notebooks next to the tutorial pages\nOn each page, you will find a button Jupyter on the right\nClick it to download the notebook and save it\nI’d recommend storing the notebooks in a separate directory for this course",
    "crumbs": [
      "02 First Steps",
      "Lecture"
    ]
  },
  {
    "objectID": "part-02/lecture-firststeps.html#learning-by-doing",
    "href": "part-02/lecture-firststeps.html#learning-by-doing",
    "title": "Lecture II - First Steps in Julia",
    "section": "Learning by doing",
    "text": "Learning by doing\n\nThe best way to learn a programming language is by doing\nWe will therefore solve problems the coming weeks\nThe goal is to get you familiar with the language\nYou can discuss the problems with your fellow students\nYou can hand in your solutions to receive bonus points!",
    "crumbs": [
      "02 First Steps",
      "Lecture"
    ]
  },
  {
    "objectID": "part-02/lecture-firststeps.html#ijulia",
    "href": "part-02/lecture-firststeps.html#ijulia",
    "title": "Lecture II - First Steps in Julia",
    "section": "IJulia",
    "text": "IJulia\n\nIJulia is an interface between Julia and Jupyter Notebooks\nPopular tool for data analysis and visualization\nYou can use IJulia to run Julia code in the notebooks\n\n. . .\n\n\n\n\n\n\nTip\n\n\n\nYou can also copy and paste code from the notebooks into your IDE!",
    "crumbs": [
      "02 First Steps",
      "Lecture"
    ]
  },
  {
    "objectID": "part-02/lecture-firststeps.html#installing-ijulia",
    "href": "part-02/lecture-firststeps.html#installing-ijulia",
    "title": "Lecture II - First Steps in Julia",
    "section": "Installing IJulia",
    "text": "Installing IJulia\n\nOpen the VS Code IDE and start a terminal\nStart Julia by typing julia in the terminal\nInstall IJulia by typing ] to open the package manager\nInstall IJulia by typing add IJulia\nPress Enter",
    "crumbs": [
      "02 First Steps",
      "Lecture"
    ]
  },
  {
    "objectID": "part-02/lecture-firststeps.html#running-ijulia",
    "href": "part-02/lecture-firststeps.html#running-ijulia",
    "title": "Lecture II - First Steps in Julia",
    "section": "Running IJulia",
    "text": "Running IJulia\nusing IJulia; notebook()\n\nStart IJulia by typing the above code in the Julia prompt\nThis will open a new browser window\nYou can now run code in the notebooks\n\n. . .\n\n\n\n\n\n\nTip\n\n\n\nYou can also run the notebooks in VS Code, if you prefer!",
    "crumbs": [
      "02 First Steps",
      "Lecture"
    ]
  },
  {
    "objectID": "part-02/lecture-firststeps.html#submission-of-assignments-1",
    "href": "part-02/lecture-firststeps.html#submission-of-assignments-1",
    "title": "Lecture II - First Steps in Julia",
    "section": "Submission of Assignments",
    "text": "Submission of Assignments\n\nYou can work in groups of up to three people\nSubmit the assignment via Moodle\nYou will submit your assignment by uploading a notebook\nThe assignment is due the day before the next tutorial\n\n. . .\n\n\n\n\n\n\nTip\n\n\n\nDon’t forget to save your notebook before uploading it to Moodle!",
    "crumbs": [
      "02 First Steps",
      "Lecture"
    ]
  },
  {
    "objectID": "part-02/lecture-firststeps.html#grading-of-assignments",
    "href": "part-02/lecture-firststeps.html#grading-of-assignments",
    "title": "Lecture II - First Steps in Julia",
    "section": "Grading of Assignments",
    "text": "Grading of Assignments\n\nEach assignment is worth 0.5 points\nYou can get a maximum of 6.0 points from the assignments\nThe points will be added to your exam points\nYou need to pass the exam first, to receive any bonus points!\n\n. . .\n\n\n\n\n\n\nNote\n\n\n\nThe assignments are mandatory!",
    "crumbs": [
      "02 First Steps",
      "Lecture"
    ]
  },
  {
    "objectID": "part-02/lecture-firststeps.html#topics-of-the-tutorials",
    "href": "part-02/lecture-firststeps.html#topics-of-the-tutorials",
    "title": "Lecture II - First Steps in Julia",
    "section": "Topics of the Tutorials",
    "text": "Topics of the Tutorials\n\nVariables: Learn how to assign values to variables\nVectors: Learn how to create and manipulate vectors\nComparisons: Learn how to compare values\nLoops: Learn how to use loops to repeat code\nScope: Learn about the scope of variables",
    "crumbs": [
      "02 First Steps",
      "Lecture"
    ]
  },
  {
    "objectID": "part-02/lecture-firststeps.html#get-started-with-the-tutorials",
    "href": "part-02/lecture-firststeps.html#get-started-with-the-tutorials",
    "title": "Lecture II - First Steps in Julia",
    "section": "Get started with the tutorials",
    "text": "Get started with the tutorials\n\nDownload the first notebook and open it\nStart with the first problem and solve it step by step\nYou can find the tutorials here on the website\nYou can ask questions anytime!\n\n. . .\n\n\n\n\n\n\nAnd that’s it for this lecture!\n\n\n\nThe remaining time we will already start working on the first problems.",
    "crumbs": [
      "02 First Steps",
      "Lecture"
    ]
  },
  {
    "objectID": "part-02/lecture-firststeps.html#literature-1",
    "href": "part-02/lecture-firststeps.html#literature-1",
    "title": "Lecture II - First Steps in Julia",
    "section": "Literature",
    "text": "Literature\n\nLauwens, B., & Downey, A. B. (2019). Think Julia: How to think like a computer scientist (First edition). O’Reilly®. Link to the free book website.\nJulia Documentation\n\nFor more interesting literature to learn more about Julia, take a look at the literature list of this course.",
    "crumbs": [
      "02 First Steps",
      "Lecture"
    ]
  },
  {
    "objectID": "part-02/tutorial-02-02-vectors.html",
    "href": "part-02/tutorial-02-02-vectors.html",
    "title": "Tutorial II.II - Vectors and Matrices",
    "section": "",
    "text": "This interactive Julia script introduces the basics of vectors, matrices, and tuples.\n\nA vector is like a single row in a spreadsheet or a shopping list - it stores items in a line\nA matrix is like a spreadsheet - it has rows and columns\nA tuple is like a sealed package containing different types of items\n\nUnderstanding these data structures and how to manipulate them is crucial in Julia. Follow the instructions, write your code in the designated code blocks, and execute the corresponding code cell.\n\n\n\n\n\n\nNote\n\n\n\nIf a cell is marked with YOUR CODE BELOW, you are expected to write your code in that cell.",
    "crumbs": [
      "02 First Steps",
      "02 - Vectors"
    ]
  },
  {
    "objectID": "part-02/tutorial-02-02-vectors.html#exercise-1.1---create-a-vector",
    "href": "part-02/tutorial-02-02-vectors.html#exercise-1.1---create-a-vector",
    "title": "Tutorial II.II - Vectors and Matrices",
    "section": "Exercise 1.1 - Create a Vector",
    "text": "Exercise 1.1 - Create a Vector\nCreate a vector ‘fib’ with the first five Fibonacci numbers: 1, 1, 2, 3, 5.\n\n# YOUR CODE BELOW\n\n\n\nCode\n# Test your answer\n@assert fib == [1, 1, 2, 3, 5]\nprintln(\"The 'fib' vector: \", fib)",
    "crumbs": [
      "02 First Steps",
      "02 - Vectors"
    ]
  },
  {
    "objectID": "part-02/tutorial-02-02-vectors.html#exercise-1.2---append-to-a-vector",
    "href": "part-02/tutorial-02-02-vectors.html#exercise-1.2---append-to-a-vector",
    "title": "Tutorial II.II - Vectors and Matrices",
    "section": "Exercise 1.2 - Append to a Vector",
    "text": "Exercise 1.2 - Append to a Vector\nAppend the number 8 to the fib vector.\n\n# YOUR CODE BELOW\n\n\n\nCode\n# Test your answer\n@assert fib == [1, 1, 2, 3, 5, 8]\nprintln(\"The 'fib' vector after appending 8: \", fib)",
    "crumbs": [
      "02 First Steps",
      "02 - Vectors"
    ]
  },
  {
    "objectID": "part-02/tutorial-02-02-vectors.html#exercise-1.3---remove-the-first-element",
    "href": "part-02/tutorial-02-02-vectors.html#exercise-1.3---remove-the-first-element",
    "title": "Tutorial II.II - Vectors and Matrices",
    "section": "Exercise 1.3 - Remove the First Element",
    "text": "Exercise 1.3 - Remove the First Element\nRemove the first element of the fib vector.\n\n# YOUR CODE BELOW\n\n\n\nCode\n# Test your answer\n@assert fib == [1, 2, 3, 5, 8]\nprintln(\"The 'fib' vector after removing the first element: \", fib)",
    "crumbs": [
      "02 First Steps",
      "02 - Vectors"
    ]
  },
  {
    "objectID": "part-02/tutorial-02-02-vectors.html#exercise-1.4---access-and-save-the-first-three-elements",
    "href": "part-02/tutorial-02-02-vectors.html#exercise-1.4---access-and-save-the-first-three-elements",
    "title": "Tutorial II.II - Vectors and Matrices",
    "section": "Exercise 1.4 - Access and Save the First Three Elements",
    "text": "Exercise 1.4 - Access and Save the First Three Elements\nAccess and save the first three elements of fib, to first_three_elements.\n\n# YOUR CODE BELOW\n\n\n\nCode\n# Test your answer\n@assert first_three_elements == fib[1:3]\nprintln(\"The first three elements of the 'fib' vector: \", first_three_elements)",
    "crumbs": [
      "02 First Steps",
      "02 - Vectors"
    ]
  },
  {
    "objectID": "part-02/tutorial-02-02-vectors.html#exercise-2.1---create-a-matrix",
    "href": "part-02/tutorial-02-02-vectors.html#exercise-2.1---create-a-matrix",
    "title": "Tutorial II.II - Vectors and Matrices",
    "section": "Exercise 2.1 - Create a Matrix",
    "text": "Exercise 2.1 - Create a Matrix\nCreate a 2x3 matrix my_matrix with the values: 1 2 3; 4 5 6.\n\n# YOUR CODE BELOW\n\n\n\nCode\n# Test your answer\n@assert my_matrix == [1 2 3; 4 5 6]\nprintln(\"The 'my_matrix':\\n\", my_matrix)",
    "crumbs": [
      "02 First Steps",
      "02 - Vectors"
    ]
  },
  {
    "objectID": "part-02/tutorial-02-02-vectors.html#exercise-2.2---change-the-3rd-column-of-the-2nd-row",
    "href": "part-02/tutorial-02-02-vectors.html#exercise-2.2---change-the-3rd-column-of-the-2nd-row",
    "title": "Tutorial II.II - Vectors and Matrices",
    "section": "Exercise 2.2 - Change the 3rd Column of the 2nd Row",
    "text": "Exercise 2.2 - Change the 3rd Column of the 2nd Row\nChange the 3rd column of the 2nd row to 17 by accessing and changing the element.\n\n# YOUR CODE BELOW\n\n\n\n\nCode\n# Test your answer\n@assert my_matrix == [1 2 3; 4 5 17]\nprintln(\"The 'my_matrix' after modification:\\n\", my_matrix)",
    "crumbs": [
      "02 First Steps",
      "02 - Vectors"
    ]
  },
  {
    "objectID": "part-02/tutorial-02-02-vectors.html#exercise-2.3---perform-matrix-addition",
    "href": "part-02/tutorial-02-02-vectors.html#exercise-2.3---perform-matrix-addition",
    "title": "Tutorial II.II - Vectors and Matrices",
    "section": "Exercise 2.3 - Perform Matrix Addition",
    "text": "Exercise 2.3 - Perform Matrix Addition\nPerform matrix addition with my_matrix and another_matrix. Call the resulting matrix added_matrices.\n\nanother_matrix = [10 20 30; 40 50 60]\n# YOUR CODE BELOW\n\n\n\nCode\n# Test your answer\n@assert added_matrices == [11 22 33; 44 55 77]\nprintln(\"Result of adding 'my_matrix' and 'another_matrix':\\n\", added_matrices)",
    "crumbs": [
      "02 First Steps",
      "02 - Vectors"
    ]
  },
  {
    "objectID": "part-02/tutorial-02-02-vectors.html#exercise-2.4---add-10-to-each-element",
    "href": "part-02/tutorial-02-02-vectors.html#exercise-2.4---add-10-to-each-element",
    "title": "Tutorial II.II - Vectors and Matrices",
    "section": "Exercise 2.4 - Add 10 to Each Element",
    "text": "Exercise 2.4 - Add 10 to Each Element\nAdd 10 to each element in added_matrices.\n\n# YOUR CODE BELOW\n\n\n\nCode\n# Test your answer\n@assert added_matrices == [21 32 43; 54 65 87]\nprintln(\"Result of adding 10 to each element in 'added_matrices':\\n\", added_matrices)",
    "crumbs": [
      "02 First Steps",
      "02 - Vectors"
    ]
  },
  {
    "objectID": "part-02/tutorial-02-02-vectors.html#exercise-3.1---create-a-tuple",
    "href": "part-02/tutorial-02-02-vectors.html#exercise-3.1---create-a-tuple",
    "title": "Tutorial II.II - Vectors and Matrices",
    "section": "Exercise 3.1 - Create a Tuple",
    "text": "Exercise 3.1 - Create a Tuple\nCreate a tuple my_tuple with three elements: 4.0, your matrix added_matrices, and \"Hi there!\".\n\n# YOUR CODE BELOW\n\n\n\nCode\n# Test your answer\n@assert my_tuple == (4.0, added_matrices, \"Hi there!\")\nprintln(\"The 'my_tuple': \", my_tuple)",
    "crumbs": [
      "02 First Steps",
      "02 - Vectors"
    ]
  },
  {
    "objectID": "part-02/tutorial-02-02-vectors.html#exercise-3.2---access-the-second-element",
    "href": "part-02/tutorial-02-02-vectors.html#exercise-3.2---access-the-second-element",
    "title": "Tutorial II.II - Vectors and Matrices",
    "section": "Exercise 3.2 - Access the Second Element",
    "text": "Exercise 3.2 - Access the Second Element\nAccess the second element of my_tuple, store it in second_element.\n\n# YOUR CODE BELOW\n\n\n\nCode\n# Test your answer\n@assert second_element == [21 32 43; 54 65 87]\nprintln(\"The second element of 'my_tuple':\\n\", second_element)",
    "crumbs": [
      "02 First Steps",
      "02 - Vectors"
    ]
  },
  {
    "objectID": "part-02/tutorial-02-04-loops.html",
    "href": "part-02/tutorial-02-04-loops.html",
    "title": "Tutorial II.IV - Loops",
    "section": "",
    "text": "Imagine you need to do the same task many times - like sending emails to 100 people or counting from 1 to 10. Instead of writing the same code over and over, we use loops! Loops are like having a helpful assistant who can repeat tasks for you.\nFollow the instructions, input your code in the designated areas, and verify your implementations with @assert statements.",
    "crumbs": [
      "02 First Steps",
      "04 - Loops"
    ]
  },
  {
    "objectID": "part-02/tutorial-02-04-loops.html#exercise-1.1---sum-the-numbers-from-1-to-5",
    "href": "part-02/tutorial-02-04-loops.html#exercise-1.1---sum-the-numbers-from-1-to-5",
    "title": "Tutorial II.IV - Loops",
    "section": "Exercise 1.1 - Sum the Numbers from 1 to 5",
    "text": "Exercise 1.1 - Sum the Numbers from 1 to 5\nSum the numbers from 1 to 5 in a loop. The next lines initialize sum_numbers to 0. The sum you compute should accumulate in this variable.\n\nsum_numbers = 0\n# YOUR CODE BELOW\n\n\n# Test your answer\n@assert sum_numbers == 15\nprintln(\"Sum of numbers from 1 to 5: \", sum_numbers)",
    "crumbs": [
      "02 First Steps",
      "04 - Loops"
    ]
  },
  {
    "objectID": "part-02/tutorial-02-04-loops.html#exercise-1.2---sum-only-the-even-numbers-from-1-to-10",
    "href": "part-02/tutorial-02-04-loops.html#exercise-1.2---sum-only-the-even-numbers-from-1-to-10",
    "title": "Tutorial II.IV - Loops",
    "section": "Exercise 1.2 - Sum Only the Even Numbers from 1 to 10",
    "text": "Exercise 1.2 - Sum Only the Even Numbers from 1 to 10\nSum only the even numbers from 1 to 10. Again, we initialize a variable sum_evens to 0. The sum you compute should accumulate in this variable.\n\nsum_evens = 0\n# YOUR CODE BELOW\n\n\n# Test your answer\n@assert sum_evens == 30\nprintln(\"Sum of even numbers from 1 to 10: \", sum_evens)\n\n\n\n\n\n\n\nTip\n\n\n\nHint: You can use the modulo operator % to check if a number is even. The modulo operator returns the remainder of the division of two numbers. If a number is divisible by another number, the remainder is 0. The following example checks if 4 is even: 4 % 2 == 0.",
    "crumbs": [
      "02 First Steps",
      "04 - Loops"
    ]
  },
  {
    "objectID": "part-02/tutorial-02-04-loops.html#exercise-1.3---exit-the-loop-if-the-current-fruit-is-banana",
    "href": "part-02/tutorial-02-04-loops.html#exercise-1.3---exit-the-loop-if-the-current-fruit-is-banana",
    "title": "Tutorial II.IV - Loops",
    "section": "Exercise 1.3 - Exit the Loop if the Current Fruit is Banana",
    "text": "Exercise 1.3 - Exit the Loop if the Current Fruit is Banana\nIterate over each fruit in the fruits array, store the current fruit in current_fruit, and exit the loop if current_fruit is banana. The next lines initialize the fruits array and current_fruit variable.\n\nfruits = [\"apple\", \"banana\", \"cherry\"]\ncurrent_fruit = \"None\"\n# YOUR CODE BELOW\n\n\n# Test your answer\n@assert current_fruit == \"banana\"\nprintln(\"The current fruit is: \", current_fruit)",
    "crumbs": [
      "02 First Steps",
      "04 - Loops"
    ]
  },
  {
    "objectID": "part-02/tutorial-02-04-loops.html#exercise-2.1---subtract-from-10-in-increments-of-1-until-the-result-is-less-than-3",
    "href": "part-02/tutorial-02-04-loops.html#exercise-2.1---subtract-from-10-in-increments-of-1-until-the-result-is-less-than-3",
    "title": "Tutorial II.IV - Loops",
    "section": "Exercise 2.1 - Subtract from 10 in Increments of 1 Until the Result is Less Than 3",
    "text": "Exercise 2.1 - Subtract from 10 in Increments of 1 Until the Result is Less Than 3\nSubtract from 10 in increments of 1 until the result is less than 3. The next line initializes current_value to 10. The result should be in this variable.\n\ncurrent_value = 10\n# YOUR CODE BELOW\n\n\n# Test your answer\n@assert current_value == 2\nprintln(\"The first value smaller than 3 is: \", current_value)",
    "crumbs": [
      "02 First Steps",
      "04 - Loops"
    ]
  },
  {
    "objectID": "part-02/tutorial-02-04-loops.html#exercise-2.2---find-the-first-multiple-of-7-greater-than-50",
    "href": "part-02/tutorial-02-04-loops.html#exercise-2.2---find-the-first-multiple-of-7-greater-than-50",
    "title": "Tutorial II.IV - Loops",
    "section": "Exercise 2.2 - Find the First Multiple of 7 Greater Than 50",
    "text": "Exercise 2.2 - Find the First Multiple of 7 Greater Than 50\nFind the first multiple of 7 greater than 50 using an indefinite loop. The next line initializes first_multiple_of_7 to 0. The first multiple should be in this variable.\n\nfirst_multiple_of_7 = 0\n# YOUR CODE BELOW\n\n\n# Test your answer\n@assert first_multiple_of_7 == 56\nprintln(\"First multiple of 7 greater than 50: \", first_multiple_of_7)\n\n\n\n\n\n\n\nTip\n\n\n\n‘while true … end’ constructs an infinite loop. You can exit the loop using a ‘break’ statement if a condition is met.",
    "crumbs": [
      "02 First Steps",
      "04 - Loops"
    ]
  },
  {
    "objectID": "part-02/tutorial-02-04-loops.html#exercise-3.1---compute-the-product-of-each-pair-of-elements-from-two-arrays",
    "href": "part-02/tutorial-02-04-loops.html#exercise-3.1---compute-the-product-of-each-pair-of-elements-from-two-arrays",
    "title": "Tutorial II.IV - Loops",
    "section": "Exercise 3.1 - Compute the Product of Each Pair of Elements from Two Arrays",
    "text": "Exercise 3.1 - Compute the Product of Each Pair of Elements from Two Arrays\nCompute the product of each pair of elements from two arrays. For example, the product of two numbers a and b is a * b. The next lines initialize numbers1, numbers2 arrays, and the products array to store your results.\n\nnumbers1 = [1, 2, 3]\nnumbers2 = [4, 5, 6]\nproducts = []\n# YOUR CODE BELOW\n\n\n# Test your answer\n@assert products == [4, 5, 6, 8, 10, 12, 12, 15, 18]\nprintln(\"Products of each pair from two arrays: \", products)\n\n\n\n\n\n\n\nTip\n\n\n\nRemember, you can use push!() to append elements to an array.",
    "crumbs": [
      "02 First Steps",
      "04 - Loops"
    ]
  },
  {
    "objectID": "part-02/tutorial-02-04-loops.html#exercise-4.1---create-a-list-of-even-numbers",
    "href": "part-02/tutorial-02-04-loops.html#exercise-4.1---create-a-list-of-even-numbers",
    "title": "Tutorial II.IV - Loops",
    "section": "Exercise 4.1 - Create a List of Even Numbers",
    "text": "Exercise 4.1 - Create a List of Even Numbers\nCreate a list of even numbers from 1 to 10 using a list comprehension.\n\n# YOUR CODE BELOW\n\n\n# Test your answer\n@assert even_numbers == [2, 4, 6, 8, 10]\nprintln(\"Even numbers from 1 to 10: \", even_numbers)",
    "crumbs": [
      "02 First Steps",
      "04 - Loops"
    ]
  },
  {
    "objectID": "part-03/lecture-presentation.html#variables-and-data-types",
    "href": "part-03/lecture-presentation.html#variables-and-data-types",
    "title": "Lecture III - Packages and Data Management",
    "section": "Variables and Data Types",
    "text": "Variables and Data Types\n\nVariables are used to store values\nAssign a value to a variable using the = operator\nYou can use different data types for variables\nYou can change the value of a variable\n\n\n\n\n\n\n\n\nTip\n\n\nYou can use the typeof function to check the type of a variable."
  },
  {
    "objectID": "part-03/lecture-presentation.html#vectors-and-matrices",
    "href": "part-03/lecture-presentation.html#vectors-and-matrices",
    "title": "Lecture III - Packages and Data Management",
    "section": "Vectors and Matrices",
    "text": "Vectors and Matrices\n\nVectors and matrices are used to store multiple values\nYou can create a them using the [ and ] operators\nAccess their elements using square brackets\n\n\n\n\n\n\n\n\nTip\n\n\nYou can use the push! function to add elements to a vector or the pop! function to remove elements from a vector."
  },
  {
    "objectID": "part-03/lecture-presentation.html#comparisons-and-logic",
    "href": "part-03/lecture-presentation.html#comparisons-and-logic",
    "title": "Lecture III - Packages and Data Management",
    "section": "Comparisons and Logic",
    "text": "Comparisons and Logic\n\nComparisons are used to compare values\n== checks if two values are equal\n!= checks if two values are not equal\n&lt; checks if one value is smaller than the other\n&gt;= checks if one value is greater than or equal to the other\n&& checks if two values are true\n|| checks if at least one of two values is true"
  },
  {
    "objectID": "part-03/lecture-presentation.html#loops",
    "href": "part-03/lecture-presentation.html#loops",
    "title": "Lecture III - Packages and Data Management",
    "section": "Loops",
    "text": "Loops\n\nLoops are used to repeat code\nfor loop repeats code for a fixed number of times\nwhile loop repeats code until a condition is met\nif statement checks if a condition is true\nelse executes code if a condition is false\nelseif checks if a condition is true and executes if it is"
  },
  {
    "objectID": "part-03/lecture-presentation.html#scope",
    "href": "part-03/lecture-presentation.html#scope",
    "title": "Lecture III - Packages and Data Management",
    "section": "Scope",
    "text": "Scope\n\nScope determines where a variable is defined and lives\nglobal keyword defines a global variable\nlocal keyword defines a local variable\nlet keyword defines a local variable\n\n\n\n\n\n\n\n\nTip\n\n\nGlobal variables usually make your code much slower, if they are not defined as constants. But for this leeture this is not that important."
  },
  {
    "objectID": "part-03/lecture-presentation.html#solutions-from-last-week",
    "href": "part-03/lecture-presentation.html#solutions-from-last-week",
    "title": "Lecture III - Packages and Data Management",
    "section": "Solutions from last Week",
    "text": "Solutions from last Week\n\nThe tutorials from last week will be available on Friday\nYou can access them in the project folder on Github\nClick on the little cat icon on the bottom right\n\n\n\n\n\n\n\n\nTip\n\n\nYou can ask questions anytime in class or via email!"
  },
  {
    "objectID": "part-03/lecture-presentation.html#topics-of-the-tutorials",
    "href": "part-03/lecture-presentation.html#topics-of-the-tutorials",
    "title": "Lecture III - Packages and Data Management",
    "section": "Topics of the Tutorials",
    "text": "Topics of the Tutorials\n\nFunctions: Learn how to define and use functions\nPackages: Learn how to install and use packages\nDataFrames: Learn how to work with tabular data in Julia\nIO: Learn how to read and write data in Julia\nPlots: Learn how to create plots in Julia"
  },
  {
    "objectID": "part-03/lecture-presentation.html#get-started-with-the-tutorials",
    "href": "part-03/lecture-presentation.html#get-started-with-the-tutorials",
    "title": "Lecture III - Packages and Data Management",
    "section": "Get started with the tutorials",
    "text": "Get started with the tutorials\n\nDownload this weeks tutorials and start with the first one\nRemember, you can ask questions anytime!\n\n\n\n\n\n\n\n\nAnd that’s it for this lecture!\n\n\nThe remaining time we will already start working on the problems of the third lecture."
  },
  {
    "objectID": "part-03/lecture-presentation.html#literature-1",
    "href": "part-03/lecture-presentation.html#literature-1",
    "title": "Lecture III - Packages and Data Management",
    "section": "Literature",
    "text": "Literature\n\nLauwens, B., & Downey, A. B. (2019). Think Julia: How to think like a computer scientist (First edition). O’Reilly®. Link to the free book website.\nJulia Documentation\n\nFor more interesting literature to learn more about Julia, take a look at the literature list of this course."
  },
  {
    "objectID": "part-03/lecture-packages.html",
    "href": "part-03/lecture-packages.html",
    "title": "Lecture III - Packages and Data Management",
    "section": "",
    "text": "Variables are used to store values\nAssign a value to a variable using the = operator\nYou can use different data types for variables\nYou can change the value of a variable\n\n. . .\n\n\n\n\n\n\nTip\n\n\n\nYou can use the typeof function to check the type of a variable.\n\n\n\n\n\n\nVectors and matrices are used to store multiple values\nYou can create a them using the [ and ] operators\nAccess their elements using square brackets\n\n. . .\n\n\n\n\n\n\nTip\n\n\n\nYou can use the push! function to add elements to a vector or the pop! function to remove elements from a vector.\n\n\n\n\n\n\nComparisons are used to compare values\n== checks if two values are equal\n!= checks if two values are not equal\n&lt; checks if one value is smaller than the other\n&gt;= checks if one value is greater than or equal to the other\n&& checks if two values are true\n|| checks if at least one of two values is true\n\n\n\n\n\nLoops are used to repeat code\nfor loop repeats code for a fixed number of times\nwhile loop repeats code until a condition is met\nif statement checks if a condition is true\nelse executes code if a condition is false\nelseif checks if a condition is true and executes if it is\n\n\n\n\n\nScope determines where a variable is defined and lives\nglobal keyword defines a global variable\nlocal keyword defines a local variable\nlet keyword defines a local variable\n\n. . .\n\n\n\n\n\n\nTip\n\n\n\nGlobal variables usually make your code much slower, if they are not defined as constants. But for this leeture this is not that important.\n\n\n\n\n\n\nThe tutorials from last week will be available on Friday\nYou can access them in the project folder on Github\nClick on the little cat icon on the bottom right\n\n. . .\n\n\n\n\n\n\nTip\n\n\n\nYou can ask questions anytime in class or via email!",
    "crumbs": [
      "03 Data",
      "Lecture"
    ]
  },
  {
    "objectID": "part-03/lecture-packages.html#variables-and-data-types",
    "href": "part-03/lecture-packages.html#variables-and-data-types",
    "title": "Lecture III - Packages and Data Management",
    "section": "",
    "text": "Variables are used to store values\nAssign a value to a variable using the = operator\nYou can use different data types for variables\nYou can change the value of a variable\n\n. . .\n\n\n\n\n\n\nTip\n\n\n\nYou can use the typeof function to check the type of a variable.",
    "crumbs": [
      "03 Data",
      "Lecture"
    ]
  },
  {
    "objectID": "part-03/lecture-packages.html#vectors-and-matrices",
    "href": "part-03/lecture-packages.html#vectors-and-matrices",
    "title": "Lecture III - Packages and Data Management",
    "section": "",
    "text": "Vectors and matrices are used to store multiple values\nYou can create a them using the [ and ] operators\nAccess their elements using square brackets\n\n. . .\n\n\n\n\n\n\nTip\n\n\n\nYou can use the push! function to add elements to a vector or the pop! function to remove elements from a vector.",
    "crumbs": [
      "03 Data",
      "Lecture"
    ]
  },
  {
    "objectID": "part-03/lecture-packages.html#comparisons-and-logic",
    "href": "part-03/lecture-packages.html#comparisons-and-logic",
    "title": "Lecture III - Packages and Data Management",
    "section": "",
    "text": "Comparisons are used to compare values\n== checks if two values are equal\n!= checks if two values are not equal\n&lt; checks if one value is smaller than the other\n&gt;= checks if one value is greater than or equal to the other\n&& checks if two values are true\n|| checks if at least one of two values is true",
    "crumbs": [
      "03 Data",
      "Lecture"
    ]
  },
  {
    "objectID": "part-03/lecture-packages.html#loops",
    "href": "part-03/lecture-packages.html#loops",
    "title": "Lecture III - Packages and Data Management",
    "section": "",
    "text": "Loops are used to repeat code\nfor loop repeats code for a fixed number of times\nwhile loop repeats code until a condition is met\nif statement checks if a condition is true\nelse executes code if a condition is false\nelseif checks if a condition is true and executes if it is",
    "crumbs": [
      "03 Data",
      "Lecture"
    ]
  },
  {
    "objectID": "part-03/lecture-packages.html#scope",
    "href": "part-03/lecture-packages.html#scope",
    "title": "Lecture III - Packages and Data Management",
    "section": "",
    "text": "Scope determines where a variable is defined and lives\nglobal keyword defines a global variable\nlocal keyword defines a local variable\nlet keyword defines a local variable\n\n. . .\n\n\n\n\n\n\nTip\n\n\n\nGlobal variables usually make your code much slower, if they are not defined as constants. But for this leeture this is not that important.",
    "crumbs": [
      "03 Data",
      "Lecture"
    ]
  },
  {
    "objectID": "part-03/lecture-packages.html#solutions-from-last-week",
    "href": "part-03/lecture-packages.html#solutions-from-last-week",
    "title": "Lecture III - Packages and Data Management",
    "section": "",
    "text": "The tutorials from last week will be available on Friday\nYou can access them in the project folder on Github\nClick on the little cat icon on the bottom right\n\n. . .\n\n\n\n\n\n\nTip\n\n\n\nYou can ask questions anytime in class or via email!",
    "crumbs": [
      "03 Data",
      "Lecture"
    ]
  },
  {
    "objectID": "part-03/lecture-packages.html#topics-of-the-tutorials",
    "href": "part-03/lecture-packages.html#topics-of-the-tutorials",
    "title": "Lecture III - Packages and Data Management",
    "section": "Topics of the Tutorials",
    "text": "Topics of the Tutorials\n\nFunctions: Learn how to define and use functions\nPackages: Learn how to install and use packages\nDataFrames: Learn how to work with tabular data in Julia\nIO: Learn how to read and write data in Julia\nPlots: Learn how to create plots in Julia",
    "crumbs": [
      "03 Data",
      "Lecture"
    ]
  },
  {
    "objectID": "part-03/lecture-packages.html#get-started-with-the-tutorials",
    "href": "part-03/lecture-packages.html#get-started-with-the-tutorials",
    "title": "Lecture III - Packages and Data Management",
    "section": "Get started with the tutorials",
    "text": "Get started with the tutorials\n\nDownload this weeks tutorials and start with the first one\nRemember, you can ask questions anytime!\n\n. . .\n\n\n\n\n\n\nAnd that’s it for this lecture!\n\n\n\nThe remaining time we will already start working on the problems of the third lecture.",
    "crumbs": [
      "03 Data",
      "Lecture"
    ]
  },
  {
    "objectID": "part-03/lecture-packages.html#literature-1",
    "href": "part-03/lecture-packages.html#literature-1",
    "title": "Lecture III - Packages and Data Management",
    "section": "Literature",
    "text": "Literature\n\nLauwens, B., & Downey, A. B. (2019). Think Julia: How to think like a computer scientist (First edition). O’Reilly®. Link to the free book website.\nJulia Documentation\n\nFor more interesting literature to learn more about Julia, take a look at the literature list of this course.",
    "crumbs": [
      "03 Data",
      "Lecture"
    ]
  },
  {
    "objectID": "part-03/tutorial-03-02-handling.html",
    "href": "part-03/tutorial-03-02-handling.html",
    "title": "Tutorial III.II - Package Management",
    "section": "",
    "text": "Welcome to this beginner-friendly guide on understanding packages and package management in Julia!\nThink of packages as pre-written sets of tools that extend what Julia can do. It’s like having a toolbox where you can add new tools (packages) to help you solve specific problems. For example, there are packages for working with data, creating visualizations, or solving complex math problems.\nThe best part? Most Julia packages are free to use, thanks to the open-source community!\n\n\n\n\n\n\nNote\n\n\n\nWhile we’ll practice some commands here, you’ll typically manage packages in Julia’s REPL (Read-Eval-Print Loop), which is like Julia’s command center.",
    "crumbs": [
      "03 Data",
      "02 - Packages"
    ]
  },
  {
    "objectID": "part-03/tutorial-03-02-handling.html#exercise-1.1---import-the-pkg-module",
    "href": "part-03/tutorial-03-02-handling.html#exercise-1.1---import-the-pkg-module",
    "title": "Tutorial III.II - Package Management",
    "section": "Exercise 1.1 - Import the Pkg Module",
    "text": "Exercise 1.1 - Import the Pkg Module\nImport the Pkg module to start managing packages effectively.\n\n# YOUR CODE BELOW\n\n\n\nCode\n# Test your answer\ntry \n    Pkg.update()\n    println(\"Pkg module imported successfully and packages were updated!\")\ncatch e\n    @error \"The Pkg module was not imported yet! Have you used the correct syntax?\"\nend",
    "crumbs": [
      "03 Data",
      "02 - Packages"
    ]
  },
  {
    "objectID": "part-03/tutorial-03-02-handling.html#exercise-2.1---add-the-dataframes-package",
    "href": "part-03/tutorial-03-02-handling.html#exercise-2.1---add-the-dataframes-package",
    "title": "Tutorial III.II - Package Management",
    "section": "Exercise 2.1 - Add the DataFrames Package",
    "text": "Exercise 2.1 - Add the DataFrames Package\nLet’s add a popular package called DataFrames. It’s great for working with structured data, like spreadsheets.\n\n# YOUR CODE BELOW\n\n\n\nCode\n# Test your answer\ntry \n    using DataFrames\n    println(\"Package added successfully!\")\ncatch e\n    @error \"Package was not added yet! Have you used the correct syntax?\"\nend",
    "crumbs": [
      "03 Data",
      "02 - Packages"
    ]
  },
  {
    "objectID": "part-03/tutorial-03-02-handling.html#conclusion",
    "href": "part-03/tutorial-03-02-handling.html#conclusion",
    "title": "Tutorial III.II - Package Management",
    "section": "Conclusion",
    "text": "Conclusion\nCongratulations! You’ve completed the tutorial on packages and package management in Julia. These skills are important for effectively managing and utilizing external libraries. Continue to the next file to learn more.",
    "crumbs": [
      "03 Data",
      "02 - Packages"
    ]
  },
  {
    "objectID": "part-03/tutorial-03-04-IO.html",
    "href": "part-03/tutorial-03-04-IO.html",
    "title": "Tutorial III.IV - Input and Output",
    "section": "",
    "text": "Welcome to this interactive Julia tutorial on working with external files! File Input/Output (I/O) operations are crucial in programming and data analysis, allowing us to persist data, share information between programs, and work with large datasets that don’t fit in memory. In this tutorial, we’ll cover reading and writing text files, handling CSV files, and working with delimited files using various Julia packages. These skills are fundamental for data preprocessing, analysis, and result storage in real-world applications.\nFollow the instructions, write your code in the designated code blocks, and validate your results with @assert statements.",
    "crumbs": [
      "03 Data",
      "04 - Input and Output"
    ]
  },
  {
    "objectID": "part-03/tutorial-03-04-IO.html#exercise-1.1---read-a-csv-file",
    "href": "part-03/tutorial-03-04-IO.html#exercise-1.1---read-a-csv-file",
    "title": "Tutorial III.IV - Input and Output",
    "section": "Exercise 1.1 - Read a CSV File",
    "text": "Exercise 1.1 - Read a CSV File\nNow it’s your turn! Let’s read the CSV file we just created.\n\n\n\n\n\n\nTip\n\n\n\nTo learn how to use a Julia function, you can type ? followed by the function name in the REPL (Julia’s command-line interface). For example, ?readdlm will show you information about the readdlm() function.\n\n\nUse the readdlm() function to read the ‘matrix.csv’ file we just created. Save the result in a variable called read_matrix.\n\n# YOUR CODE BELOW\n# Don't forget to use the @__DIR__ macro to get the correct file path!\n\n\n\nCode\n# Test your answer\n@assert read_matrix == new_data\nprintln(\"File 'matrix.csv' read successfully!\")",
    "crumbs": [
      "03 Data",
      "04 - Input and Output"
    ]
  },
  {
    "objectID": "part-03/tutorial-03-04-IO.html#exercise-2.1---write-a-dataframe-to-a-csv-file",
    "href": "part-03/tutorial-03-04-IO.html#exercise-2.1---write-a-dataframe-to-a-csv-file",
    "title": "Tutorial III.IV - Input and Output",
    "section": "Exercise 2.1 - Write a DataFrame to a CSV File",
    "text": "Exercise 2.1 - Write a DataFrame to a CSV File\nWrite the following given DataFrame to a CSV file table_out.csv in the folder ExampleData. This can be done by using the function CSV.write(). To learn the syntax, ask the inbuild help with ? and the function name.\n\nusing CSV, DataFrames\ndata = DataFrame(Name = [\"Elio\", \"Bob\", \"Yola\"], Age = [18, 25, 29])\ncsv_file_path = \"$(@__DIR__)/ExampleData/table_out.csv\"\n# YOUR CODE BELOW\n\n\n\nCode\n# Test your answer\n@assert isfile(\"ExampleData/table_out.csv\") \"Sorry, the file could not be found. \n    Have you followed all steps?\"\nprintln(\"CSV file 'data.csv' written successfully!\")",
    "crumbs": [
      "03 Data",
      "04 - Input and Output"
    ]
  },
  {
    "objectID": "part-03/tutorial-03-04-IO.html#exercise-2.2---read-a-csv-file-in",
    "href": "part-03/tutorial-03-04-IO.html#exercise-2.2---read-a-csv-file-in",
    "title": "Tutorial III.IV - Input and Output",
    "section": "Exercise 2.2 - Read a CSV File in",
    "text": "Exercise 2.2 - Read a CSV File in\nRead the CSV file table_out.csv in the folder ExampleData into the variable read_data. Here you can use the function CSV.read(), e.g.:\nread_data = CSV.read(\"Path/datatable.csv\", DataFrame)\n\n\n\n\n\n\nNote\n\n\n\nNote, that you need to provide a sink for the data when using CSV.read(), e.g. a DataFrame.\n\n\n\n# YOUR CODE BELOW\n# Again, don't forget to use the @__DIR__ macro to get the correct file path!\n\n\n\nCode\n# Test your answer\n@assert read_data[1,1] == \"Elio\"\nprintln(\"CSV file 'table_out.csv' read successfully!\")",
    "crumbs": [
      "03 Data",
      "04 - Input and Output"
    ]
  },
  {
    "objectID": "part-04/lecture-presentation.html#functions",
    "href": "part-04/lecture-presentation.html#functions",
    "title": "Lecture IV - Modelling with JuMP",
    "section": "Functions",
    "text": "Functions\n\nFunctions are reusable blocks of code\nDefine functions using the function keyword\nFunctions can take arguments and return values\nUse return to specify the output of a function\n\n\n\n\n\n\n\n\nTip\n\n\nYou can create anonymous functions using the -&gt; syntax for quick, one-off operations."
  },
  {
    "objectID": "part-04/lecture-presentation.html#packages",
    "href": "part-04/lecture-presentation.html#packages",
    "title": "Lecture IV - Modelling with JuMP",
    "section": "Packages",
    "text": "Packages\n\nPackages extend Julia’s functionality\nUse using Pkg to access package management\nInstall packages with Pkg.add(\"PackageName\")\nImport packages with using PackageName or import PackageName"
  },
  {
    "objectID": "part-04/lecture-presentation.html#dataframes",
    "href": "part-04/lecture-presentation.html#dataframes",
    "title": "Lecture IV - Modelling with JuMP",
    "section": "DataFrames",
    "text": "DataFrames\n\nDataFrames are used for working with tabular data\nCreate DataFrames using the DataFrame constructor\nAccess columns using dot notation or square brackets\nPerform operations on columns and rows\n\n\n\n\n\n\n\n\nTip\n\n\nUse describe(df) to get a quick summary of your DataFrame."
  },
  {
    "objectID": "part-04/lecture-presentation.html#inputoutput-io",
    "href": "part-04/lecture-presentation.html#inputoutput-io",
    "title": "Lecture IV - Modelling with JuMP",
    "section": "Input/Output (IO)",
    "text": "Input/Output (IO)\n\nIO operations allow reading from and writing to files\nReading and writing CSV files can be done with the CSV package\nUse CSV.read() to read a CSV file into a DataFrame\nUse CSV.write() to write a DataFrame to a CSV file"
  },
  {
    "objectID": "part-04/lecture-presentation.html#plots",
    "href": "part-04/lecture-presentation.html#plots",
    "title": "Lecture IV - Modelling with JuMP",
    "section": "Plots",
    "text": "Plots\n\nPlotting in Julia is done through packages like Plots.jl\nCreate basic plots with functions like plot(), scatter(), bar()\nCustomize plots with attributes like title, xlabel, ylabel\n\n\n\n\n\n\n\n\nTip\n\n\nExplore different plot types and in the long term even backends for various output formats and interactivity."
  },
  {
    "objectID": "part-04/lecture-presentation.html#solutions-from-last-week",
    "href": "part-04/lecture-presentation.html#solutions-from-last-week",
    "title": "Lecture IV - Modelling with JuMP",
    "section": "Solutions from last Week",
    "text": "Solutions from last Week\n\nThe tutorials from last week will again be available on Friday\nYou can access them in the project folder on Github\nClick on the little cat icon on the bottom right\n\n\n\n\n\n\n\n\nTip\n\n\nYou can ask questions anytime in class or via email!"
  },
  {
    "objectID": "part-04/lecture-presentation.html#topics-of-the-tutorials",
    "href": "part-04/lecture-presentation.html#topics-of-the-tutorials",
    "title": "Lecture IV - Modelling with JuMP",
    "section": "Topics of the Tutorials",
    "text": "Topics of the Tutorials\n\nJuMP: Learn how to use JuMP to define optimization problems\nVariable Bounds: Learn how to set variable bounds\nConstrains: Learn how to add constraints to your model\nAdvanced Modeling: Learn how to model more complex problems\nTransport Problem: Learn how to solve a transportation problem"
  },
  {
    "objectID": "part-04/lecture-presentation.html#get-started-with-the-tutorials",
    "href": "part-04/lecture-presentation.html#get-started-with-the-tutorials",
    "title": "Lecture IV - Modelling with JuMP",
    "section": "Get started with the tutorials",
    "text": "Get started with the tutorials\n\nDownload this weeks tutorials and start with the first one\nRemember, you can ask questions anytime!\n\n\n\n\n\n\n\n\nAnd that’s it for this lecture!\n\n\nThe remaining time we will already start working on the problems of the fourth lecture. From next week, we will start with different optimizations problems and topics, that we address together in the course."
  },
  {
    "objectID": "part-04/lecture-presentation.html#literature-1",
    "href": "part-04/lecture-presentation.html#literature-1",
    "title": "Lecture IV - Modelling with JuMP",
    "section": "Literature",
    "text": "Literature\n\nLauwens, B., & Downey, A. B. (2019). Think Julia: How to think like a computer scientist (First edition). O’Reilly®. Link to the free book website.\nJulia Documentation\n\nFor more interesting literature to learn more about Julia, take a look at the literature list of this course."
  },
  {
    "objectID": "part-04/lecture-jump.html",
    "href": "part-04/lecture-jump.html",
    "title": "Lecture IV - Modelling with JuMP",
    "section": "",
    "text": "Functions are reusable blocks of code\nDefine functions using the function keyword\nFunctions can take arguments and return values\nUse return to specify the output of a function\n\n. . .\n\n\n\n\n\n\nTip\n\n\n\nYou can create anonymous functions using the -&gt; syntax for quick, one-off operations.\n\n\n\n\n\n\nPackages extend Julia’s functionality\nUse using Pkg to access package management\nInstall packages with Pkg.add(\"PackageName\")\nImport packages with using PackageName or import PackageName\n\n\n\n\n\nDataFrames are used for working with tabular data\nCreate DataFrames using the DataFrame constructor\nAccess columns using dot notation or square brackets\nPerform operations on columns and rows\n\n. . .\n\n\n\n\n\n\nTip\n\n\n\nUse describe(df) to get a quick summary of your DataFrame.\n\n\n\n\n\n\nIO operations allow reading from and writing to files\nReading and writing CSV files can be done with the CSV package\nUse CSV.read() to read a CSV file into a DataFrame\nUse CSV.write() to write a DataFrame to a CSV file\n\n\n\n\n\nPlotting in Julia is done through packages like Plots.jl\nCreate basic plots with functions like plot(), scatter(), bar()\nCustomize plots with attributes like title, xlabel, ylabel\n\n. . .\n\n\n\n\n\n\nTip\n\n\n\nExplore different plot types and in the long term even backends for various output formats and interactivity.\n\n\n\n\n\n\nThe tutorials from last week will again be available on Friday\nYou can access them in the project folder on Github\nClick on the little cat icon on the bottom right\n\n. . .\n\n\n\n\n\n\nTip\n\n\n\nYou can ask questions anytime in class or via email!",
    "crumbs": [
      "04 Optimization",
      "Lecture"
    ]
  },
  {
    "objectID": "part-04/lecture-jump.html#functions",
    "href": "part-04/lecture-jump.html#functions",
    "title": "Lecture IV - Modelling with JuMP",
    "section": "",
    "text": "Functions are reusable blocks of code\nDefine functions using the function keyword\nFunctions can take arguments and return values\nUse return to specify the output of a function\n\n. . .\n\n\n\n\n\n\nTip\n\n\n\nYou can create anonymous functions using the -&gt; syntax for quick, one-off operations.",
    "crumbs": [
      "04 Optimization",
      "Lecture"
    ]
  },
  {
    "objectID": "part-04/lecture-jump.html#packages",
    "href": "part-04/lecture-jump.html#packages",
    "title": "Lecture IV - Modelling with JuMP",
    "section": "",
    "text": "Packages extend Julia’s functionality\nUse using Pkg to access package management\nInstall packages with Pkg.add(\"PackageName\")\nImport packages with using PackageName or import PackageName",
    "crumbs": [
      "04 Optimization",
      "Lecture"
    ]
  },
  {
    "objectID": "part-04/lecture-jump.html#dataframes",
    "href": "part-04/lecture-jump.html#dataframes",
    "title": "Lecture IV - Modelling with JuMP",
    "section": "",
    "text": "DataFrames are used for working with tabular data\nCreate DataFrames using the DataFrame constructor\nAccess columns using dot notation or square brackets\nPerform operations on columns and rows\n\n. . .\n\n\n\n\n\n\nTip\n\n\n\nUse describe(df) to get a quick summary of your DataFrame.",
    "crumbs": [
      "04 Optimization",
      "Lecture"
    ]
  },
  {
    "objectID": "part-04/lecture-jump.html#inputoutput-io",
    "href": "part-04/lecture-jump.html#inputoutput-io",
    "title": "Lecture IV - Modelling with JuMP",
    "section": "",
    "text": "IO operations allow reading from and writing to files\nReading and writing CSV files can be done with the CSV package\nUse CSV.read() to read a CSV file into a DataFrame\nUse CSV.write() to write a DataFrame to a CSV file",
    "crumbs": [
      "04 Optimization",
      "Lecture"
    ]
  },
  {
    "objectID": "part-04/lecture-jump.html#plots",
    "href": "part-04/lecture-jump.html#plots",
    "title": "Lecture IV - Modelling with JuMP",
    "section": "",
    "text": "Plotting in Julia is done through packages like Plots.jl\nCreate basic plots with functions like plot(), scatter(), bar()\nCustomize plots with attributes like title, xlabel, ylabel\n\n. . .\n\n\n\n\n\n\nTip\n\n\n\nExplore different plot types and in the long term even backends for various output formats and interactivity.",
    "crumbs": [
      "04 Optimization",
      "Lecture"
    ]
  },
  {
    "objectID": "part-04/lecture-jump.html#solutions-from-last-week",
    "href": "part-04/lecture-jump.html#solutions-from-last-week",
    "title": "Lecture IV - Modelling with JuMP",
    "section": "",
    "text": "The tutorials from last week will again be available on Friday\nYou can access them in the project folder on Github\nClick on the little cat icon on the bottom right\n\n. . .\n\n\n\n\n\n\nTip\n\n\n\nYou can ask questions anytime in class or via email!",
    "crumbs": [
      "04 Optimization",
      "Lecture"
    ]
  },
  {
    "objectID": "part-04/lecture-jump.html#topics-of-the-tutorials",
    "href": "part-04/lecture-jump.html#topics-of-the-tutorials",
    "title": "Lecture IV - Modelling with JuMP",
    "section": "Topics of the Tutorials",
    "text": "Topics of the Tutorials\n\nJuMP: Learn how to use JuMP to define optimization problems\nVariable Bounds: Learn how to set variable bounds\nConstrains: Learn how to add constraints to your model\nAdvanced Modeling: Learn how to model more complex problems\nTransport Problem: Learn how to solve a transportation problem",
    "crumbs": [
      "04 Optimization",
      "Lecture"
    ]
  },
  {
    "objectID": "part-04/lecture-jump.html#get-started-with-the-tutorials",
    "href": "part-04/lecture-jump.html#get-started-with-the-tutorials",
    "title": "Lecture IV - Modelling with JuMP",
    "section": "Get started with the tutorials",
    "text": "Get started with the tutorials\n\nDownload this weeks tutorials and start with the first one\nRemember, you can ask questions anytime!\n\n. . .\n\n\n\n\n\n\nAnd that’s it for this lecture!\n\n\n\nThe remaining time we will already start working on the problems of the fourth lecture. From next week, we will start with different optimizations problems and topics, that we address together in the course.",
    "crumbs": [
      "04 Optimization",
      "Lecture"
    ]
  },
  {
    "objectID": "part-04/lecture-jump.html#literature-1",
    "href": "part-04/lecture-jump.html#literature-1",
    "title": "Lecture IV - Modelling with JuMP",
    "section": "Literature",
    "text": "Literature\n\nLauwens, B., & Downey, A. B. (2019). Think Julia: How to think like a computer scientist (First edition). O’Reilly®. Link to the free book website.\nJulia Documentation\n\nFor more interesting literature to learn more about Julia, take a look at the literature list of this course.",
    "crumbs": [
      "04 Optimization",
      "Lecture"
    ]
  },
  {
    "objectID": "part-04/tutorial-04-02-bounds.html",
    "href": "part-04/tutorial-04-02-bounds.html",
    "title": "Tutorial IV.II - Variables and Bounds in JuMP",
    "section": "",
    "text": "Welcome to this beginner-friendly tutorial on variables and bounds in JuMP! In this lesson, we’ll explore different types of variables and how to set limits (or bounds) on them. Don’t worry if you’re new to optimization - we’ll explain everything step by step using real-world examples.\nFollow the instructions, write your code in the designated code blocks, and confirm your understanding with @assert statements. Make sure to have the JuMP package installed to follow this tutorial.\nLet’s start by loading the JuMP package:\n\nusing JuMP\n\nNow, let’s create a model that we’ll use throughout this tutorial:\n\nmodel = Model()\nprintln(\"Great! We've created a new optimization model.\")\n\nGreat! We've created a new optimization model.",
    "crumbs": [
      "04 Optimization",
      "02 - Bounds"
    ]
  },
  {
    "objectID": "part-04/tutorial-04-02-bounds.html#exercise-1.1---create-variables",
    "href": "part-04/tutorial-04-02-bounds.html#exercise-1.1---create-variables",
    "title": "Tutorial IV.II - Variables and Bounds in JuMP",
    "section": "Exercise 1.1 - Create Variables",
    "text": "Exercise 1.1 - Create Variables\nNow it’s your turn! Create three variables:\n\nA continuous variable called water_amount\nAn integer variable called cars_produced\nA binary variable called build_store\n\n\n# YOUR CODE BELOW\n# Hint: Use the @variable macro three times, once for each variable\n\n\n\nCode\n# Test your answer\n@assert typeof(water_amount) == VariableRef && !is_integer(water_amount) && !is_binary(water_amount)\n@assert typeof(cars_produced) == VariableRef && is_integer(cars_produced)\n@assert typeof(build_store) == VariableRef && is_binary(build_store)\nprintln(\"Excellent work! You've successfully created continuous, integer, and binary variables.\")",
    "crumbs": [
      "04 Optimization",
      "02 - Bounds"
    ]
  },
  {
    "objectID": "part-04/tutorial-04-02-bounds.html#exercise-2.1---create-an-array",
    "href": "part-04/tutorial-04-02-bounds.html#exercise-2.1---create-an-array",
    "title": "Tutorial IV.II - Variables and Bounds in JuMP",
    "section": "Exercise 2.1 - Create an Array",
    "text": "Exercise 2.1 - Create an Array\nImagine you’re planning production for a week. Create an array daily_production with 7 non-negative variables, one for each day of the week.\n\n# YOUR CODE BELOW\n\n\n\nCode\n# Test your answer\n@assert length(daily_production) == 7\n@assert all(lower_bound(daily_production[i]) == 0 for i in 1:7)\nprintln(\"Great job! You've created an array of 7 non-negative variables for daily production.\")",
    "crumbs": [
      "04 Optimization",
      "02 - Bounds"
    ]
  },
  {
    "objectID": "part-04/tutorial-04-02-bounds.html#exercise-2.2---create-a-matrix-of-variables",
    "href": "part-04/tutorial-04-02-bounds.html#exercise-2.2---create-a-matrix-of-variables",
    "title": "Tutorial IV.II - Variables and Bounds in JuMP",
    "section": "Exercise 2.2 - Create a Matrix of Variables",
    "text": "Exercise 2.2 - Create a Matrix of Variables\nNow, imagine you’re deciding whether to stock 4 different products in 3 different stores. Create a 3x4 matrix of binary variables called stock_decision.\n\n# YOUR CODE BELOW\n\n\n\nCode\n# Test your answer\n@assert size(stock_decision) == (3, 4)\n@assert all(is_binary(stock_decision[i,j]) for i in 1:3, j in 1:4)\nprintln(\"Excellent! You've created a 3x4 matrix of binary variables for stocking decisions.\")",
    "crumbs": [
      "04 Optimization",
      "02 - Bounds"
    ]
  },
  {
    "objectID": "part-04/tutorial-04-02-bounds.html#exercise-3.1---set-bounds-on-a-variable",
    "href": "part-04/tutorial-04-02-bounds.html#exercise-3.1---set-bounds-on-a-variable",
    "title": "Tutorial IV.II - Variables and Bounds in JuMP",
    "section": "Exercise 3.1 - Set Bounds on a Variable",
    "text": "Exercise 3.1 - Set Bounds on a Variable\nCreate a variable temperature that represents the temperature setting on a thermostat. It should be between 0 and 37 degrees.\n\n# YOUR CODE BELOW\n\n\n\nCode\n# Test your answer\n@assert lower_bound(temperature) == 0\n@assert upper_bound(temperature) == 37\nprintln(\"Well done! You've created a variable for temperature with appropriate bounds.\")",
    "crumbs": [
      "04 Optimization",
      "02 - Bounds"
    ]
  },
  {
    "objectID": "part-04/tutorial-04-04-advanced.html",
    "href": "part-04/tutorial-04-04-advanced.html",
    "title": "Tutorial IV.IV - Advanced Solver Options with HiGHS in JuMP",
    "section": "",
    "text": "Welcome to this tutorial on advanced solver options in JuMP using the HiGHS solver! Don’t worry if “advanced solver options” sounds intimidating - we’ll break everything down into simple, easy-to-understand concepts.\nImagine you’re using a GPS app to find the best route to a new restaurant. Just like how you can adjust settings in your GPS (like avoiding toll roads or preferring highways), we can adjust settings in our optimization solver to help it find solutions more efficiently or to meet specific requirements.\nBy the end of this tutorial, you’ll be able to: 1. Understand what solver options are and why they’re useful 2. Set basic solver options like time limits and solution tolerances 3. Interpret solver output to understand how well your problem was solved\nLet’s start by loading the necessary packages:\n\nusing JuMP, HiGHS\n\nPrecompiling JuMP...\n    545.5 ms  ✓ BenchmarkTools\n  14866.8 ms  ✓ MathOptInterface\n   6940.5 ms  ✓ JuMP\n  3 dependencies successfully precompiled in 22 seconds. 48 already precompiled.\nPrecompiling HiGHS...\n   5222.9 ms  ✓ HiGHS\n  1 dependency successfully precompiled in 5 seconds. 51 already precompiled.",
    "crumbs": [
      "04 Optimization",
      "04 - Advanced"
    ]
  },
  {
    "objectID": "part-04/tutorial-04-04-advanced.html#exercise-1.1---set-solver-options",
    "href": "part-04/tutorial-04-04-advanced.html#exercise-1.1---set-solver-options",
    "title": "Tutorial IV.IV - Advanced Solver Options with HiGHS in JuMP",
    "section": "Exercise 1.1 - Set Solver Options",
    "text": "Exercise 1.1 - Set Solver Options\nNow it’s your turn! Set the following solver options: 1. A time limit of 120 seconds 2. A MIP gap tolerance of 0.5% 3. Turn off presolve\n\n# YOUR CODE BELOW\n\n\n\nCode\n# Test your answer\n@assert time_limit_sec(model) == 120 \"The time limit should be 120 seconds but is $(time_limit_sec(model))\"\n@assert solver_name(model) == \"HiGHS\" \"The solver should be HiGHS but is $(solver_name(model))\"\n@assert MOI.get(model, MOI.RawOptimizerAttribute(\"mip_rel_gap\")) == 0.005 \"The MIP gap should be 0.5% but is $(MOI.get(model, MOI.RawOptimizerAttribute(\"mip_rel_gap\")))\"\n@assert MOI.get(model, MOI.RawOptimizerAttribute(\"presolve\")) == \"off\" \"Presolve should be off but is $(MOI.get(model, MOI.RawOptimizerAttribute(\"presolve\")))\"\nprintln(\"Great job! You've successfully set advanced solver options.\")",
    "crumbs": [
      "04 Optimization",
      "04 - Advanced"
    ]
  },
  {
    "objectID": "part-04/tutorial-04-04-advanced.html#exercise-2.1---modify-and-solve-the-problem",
    "href": "part-04/tutorial-04-04-advanced.html#exercise-2.1---modify-and-solve-the-problem",
    "title": "Tutorial IV.IV - Advanced Solver Options with HiGHS in JuMP",
    "section": "Exercise 2.1 - Modify and Solve the Problem",
    "text": "Exercise 2.1 - Modify and Solve the Problem\nNow it’s your turn! Modify the problem above by:\n\nChanging the production time constraint to 300 minutes\nIncreasing the profit for widgets to 30\nSolving the modified problem and printing the results\n\n\n# YOUR CODE BELOW\n# Hint: Copy the code above and make the necessary changes\nmodel = Model(HiGHS.Optimizer) # Don't forget to re-initialize the model\n\n\n\nCode\n# Test your answer\n@assert termination_status(model) == MOI.OPTIMAL \"The termination status should be OPTIMAL but is $(termination_status(model))\"\n@assert isapprox(objective_value(model), 3780, atol=1e-6) \"The objective value should be 3780 but is $(objective_value(model))\"\n@assert isapprox(value(widgets), 80, atol=1e-6) \"The number of widgets to produce should be 80 but is $(value(widgets))\"\n@assert isapprox(value(gadgets), 46, atol=1e-6) \"The number of gadgets to produce should be 46 but is $(value(gadgets))\"\nprintln(\"Excellent work! You've successfully modified and solved the optimization problem.\")",
    "crumbs": [
      "04 Optimization",
      "04 - Advanced"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#part-ii-preliminary",
    "href": "part-01/lecture-introduction.html#part-ii-preliminary",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Part II (preliminary)",
    "text": "Part II (preliminary)\n\nGenerator Expansion Planning\nUnit Commitment as Short-term Scheduling\nStorages\nInvestment Planning",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "part-01/lecture-introduction.html#part-iii-preliminary",
    "href": "part-01/lecture-introduction.html#part-iii-preliminary",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Part III (preliminary)",
    "text": "Part III (preliminary)\n\nMulti-energy systems\nIntermission: Exam Preparation\nUncertainty Modelling and Renewable Energy Integration\nElectricity Market and Carbon Pricing\nRecap and Discussion",
    "crumbs": [
      "01 Introduction"
    ]
  },
  {
    "objectID": "general/syllabus.html#energy-system-optimization-with-basic-models",
    "href": "general/syllabus.html#energy-system-optimization-with-basic-models",
    "title": "Syllabus",
    "section": "Energy System Optimization with Basic Models",
    "text": "Energy System Optimization with Basic Models\nIn the second part, we will cover energy system optimization based on basic modelling concepts. We will start with the classic generator expansion problem and learn how to model and solve it using JuMP. Afterwards we start to bring together further modelling concepts, such as the unit commitment and storages, to build a digital twin of a power system for various decision problems. Finally, we developed a basic framework to model and solve operations and investment planning problems of energy systems.",
    "crumbs": [
      "Syllabus"
    ]
  },
  {
    "objectID": "general/syllabus.html#energy-system-optimization-with-advanced-models",
    "href": "general/syllabus.html#energy-system-optimization-with-advanced-models",
    "title": "Syllabus",
    "section": "Energy System Optimization with Advanced Models",
    "text": "Energy System Optimization with Advanced Models\nIn the third part, we will cover more advanced optimization models and concepts. We will start to extend the basic models to more complex models, such as multi-energy systems and uncertainty modelling.",
    "crumbs": [
      "Syllabus"
    ]
  },
  {
    "objectID": "part-01/lecture-presentation.html#part-ii-preliminary",
    "href": "part-01/lecture-presentation.html#part-ii-preliminary",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Part II (preliminary)",
    "text": "Part II (preliminary)\n\nGenerator Expansion Planning\nUnit Commitment as Short-term Scheduling\nStorages\nInvestment Planning"
  },
  {
    "objectID": "part-01/lecture-presentation.html#part-iii-preliminary",
    "href": "part-01/lecture-presentation.html#part-iii-preliminary",
    "title": "Lecture I - Welcome and Introduction",
    "section": "Part III (preliminary)",
    "text": "Part III (preliminary)\n\nMulti-energy systems\nIntermission: Exam Preparation\nUncertainty Modelling and Renewable Energy Integration\nElectricity Market and Carbon Pricing\nRecap and Discussion"
  },
  {
    "objectID": "part-05/lecture-dispatch.html",
    "href": "part-05/lecture-dispatch.html",
    "title": "Lecture V - Economic Dispatch Problem",
    "section": "",
    "text": "JuMP is a package for modeling optimization problems in Julia\nIt allows you to describe optimization problems in a way that is easy to understand and solve\nIt is a powerful tool for modeling and solving optimization problems\n\n. . .\n\n\n\n\n\n\nTip\n\n\n\nUse meaningful variable names and comments to make your model easier to understand.\n\n\n\n\n\n\nVariables in optimization models often need upper and lower bounds\nBounds can be set when declaring variables or added later as constraints\nCommon bounds include non-negativity (\\(\\leq 0\\)) and capacity limits\n\n\n\n\n\nConstraints define the feasible region of the optimization problem\nCan be equality (\\(=\\)) or inequality (\\(\\geq, \\leq\\)) constraints\nMultiple constraints can be added using loops or array comprehensions\n\n. . .\n\n\n\n\n\n\nTip\n\n\n\nConditional constraints allow flexible and dynamic model formulations reflecting conditions and dependencies in the constraint application.\n\n\n\n\n\n\nJuMP supports many different solvers like HiGHS, GLPK, Gurobi\nSolvers are specialized for different problem types (LP, MIP, NLP)\nCan set solver parameters to control solution process\n\n\n\n\n\nStart by creating a model with Model()\nAdd variables, objective function, and constraints\nCall optimize!() to solve the model\nAccess results through solution queries\n\n. . .\n\n\n\n\n\n\nTip\n\n\n\nAlways check the solution status before using the results to ensure the model solved successfully.\n\n\n\n\n\n\nThe tutorials from last week will again be available on Friday\nYou can access them in the project folder on Github\nClick on the little cat icon on the bottom right\n\n. . .\n\n\n\n\n\n\nTip\n\n\n\nYou can ask questions anytime in class or via email!",
    "crumbs": [
      "05 Dispatch",
      "Lecture"
    ]
  },
  {
    "objectID": "part-05/lecture-dispatch.html#jump",
    "href": "part-05/lecture-dispatch.html#jump",
    "title": "Lecture V - Economic Dispatch Problem",
    "section": "",
    "text": "JuMP is a package for modeling optimization problems in Julia\nIt allows you to describe optimization problems in a way that is easy to understand and solve\nIt is a powerful tool for modeling and solving optimization problems\n\n. . .\n\n\n\n\n\n\nTip\n\n\n\nUse meaningful variable names and comments to make your model easier to understand.",
    "crumbs": [
      "05 Dispatch",
      "Lecture"
    ]
  },
  {
    "objectID": "part-05/lecture-dispatch.html#bounds",
    "href": "part-05/lecture-dispatch.html#bounds",
    "title": "Lecture V - Economic Dispatch Problem",
    "section": "",
    "text": "Variables in optimization models often need upper and lower bounds\nBounds can be set when declaring variables or added later as constraints\nCommon bounds include non-negativity (\\(\\leq 0\\)) and capacity limits",
    "crumbs": [
      "05 Dispatch",
      "Lecture"
    ]
  },
  {
    "objectID": "part-05/lecture-dispatch.html#constraints",
    "href": "part-05/lecture-dispatch.html#constraints",
    "title": "Lecture V - Economic Dispatch Problem",
    "section": "",
    "text": "Constraints define the feasible region of the optimization problem\nCan be equality (\\(=\\)) or inequality (\\(\\geq, \\leq\\)) constraints\nMultiple constraints can be added using loops or array comprehensions\n\n. . .\n\n\n\n\n\n\nTip\n\n\n\nConditional constraints allow flexible and dynamic model formulations reflecting conditions and dependencies in the constraint application.",
    "crumbs": [
      "05 Dispatch",
      "Lecture"
    ]
  },
  {
    "objectID": "part-05/lecture-dispatch.html#solver",
    "href": "part-05/lecture-dispatch.html#solver",
    "title": "Lecture V - Economic Dispatch Problem",
    "section": "",
    "text": "JuMP supports many different solvers like HiGHS, GLPK, Gurobi\nSolvers are specialized for different problem types (LP, MIP, NLP)\nCan set solver parameters to control solution process",
    "crumbs": [
      "05 Dispatch",
      "Lecture"
    ]
  },
  {
    "objectID": "part-05/lecture-dispatch.html#model-setup",
    "href": "part-05/lecture-dispatch.html#model-setup",
    "title": "Lecture V - Economic Dispatch Problem",
    "section": "",
    "text": "Start by creating a model with Model()\nAdd variables, objective function, and constraints\nCall optimize!() to solve the model\nAccess results through solution queries\n\n. . .\n\n\n\n\n\n\nTip\n\n\n\nAlways check the solution status before using the results to ensure the model solved successfully.",
    "crumbs": [
      "05 Dispatch",
      "Lecture"
    ]
  },
  {
    "objectID": "part-05/lecture-dispatch.html#solutions-from-last-week",
    "href": "part-05/lecture-dispatch.html#solutions-from-last-week",
    "title": "Lecture V - Economic Dispatch Problem",
    "section": "",
    "text": "The tutorials from last week will again be available on Friday\nYou can access them in the project folder on Github\nClick on the little cat icon on the bottom right\n\n. . .\n\n\n\n\n\n\nTip\n\n\n\nYou can ask questions anytime in class or via email!",
    "crumbs": [
      "05 Dispatch",
      "Lecture"
    ]
  },
  {
    "objectID": "part-05/lecture-dispatch.html#power-system-basic-models-economic-dispatch",
    "href": "part-05/lecture-dispatch.html#power-system-basic-models-economic-dispatch",
    "title": "Lecture V - Economic Dispatch Problem",
    "section": "Power System Basic Models: Economic Dispatch",
    "text": "Power System Basic Models: Economic Dispatch\n\n\n\n\nPower system system with generators and an aggregated demand\n\nGenerators have to be dispatched to meet the demand at an infinitesimal moment\nGenerators have different costs and operational constraints",
    "crumbs": [
      "05 Dispatch",
      "Lecture"
    ]
  },
  {
    "objectID": "part-05/lecture-dispatch.html#section",
    "href": "part-05/lecture-dispatch.html#section",
    "title": "Lecture V - Economic Dispatch Problem",
    "section": "",
    "text": "How does the mathematical model look like?",
    "crumbs": [
      "05 Dispatch",
      "Lecture"
    ]
  },
  {
    "objectID": "part-05/lecture-dispatch.html#objective",
    "href": "part-05/lecture-dispatch.html#objective",
    "title": "Lecture V - Economic Dispatch Problem",
    "section": "Objective",
    "text": "Objective\n\n\n\n\nQuestion: What could be the objective?\nMinimize the electricity supply cost while satisfying the demand and adhering to the production capacity.",
    "crumbs": [
      "05 Dispatch",
      "Lecture"
    ]
  },
  {
    "objectID": "part-05/lecture-dispatch.html#available-sets",
    "href": "part-05/lecture-dispatch.html#available-sets",
    "title": "Lecture V - Economic Dispatch Problem",
    "section": "Available Sets",
    "text": "Available Sets\nQuestion: What are sets again?\n. . .\nSets are collections of objects.\n. . .\nQuestion: What could be the sets here?\n. . .\n\n\\(\\mathcal{G}\\) - Set of thermal generators indexed by \\(g \\in \\{1,2,...,|\\mathcal{G}|\\}\\)\n\\(\\mathcal{W}\\) - Set of wind turbines indexed by \\(w \\in \\{1,2,...,|\\mathcal{W}|\\}\\)",
    "crumbs": [
      "05 Dispatch",
      "Lecture"
    ]
  },
  {
    "objectID": "part-05/lecture-dispatch.html#available-parameters",
    "href": "part-05/lecture-dispatch.html#available-parameters",
    "title": "Lecture V - Economic Dispatch Problem",
    "section": "Available Parameters",
    "text": "Available Parameters\nQuestion: What are possible parameters?\n. . .\n\n\\(c^{var}_g\\) - Cost of thermal generator \\(g\\in\\mathcal{G}\\) in [\\(EUR/\\text{MWh}\\)]\n\\(c^{var}_w\\) - Cost of wind turbine \\(w\\in\\mathcal{W}\\) in [\\(EUR/\\text{MWh}\\)]\n\\(p^{\\min}_g\\) - Minimum power output of thermal generator \\(g\\in\\mathcal{G}\\) in [MW]\n\\(p^{\\max}_g\\) - Maximum power output of thermal generator \\(g\\in\\mathcal{G}\\) in [MW]\n\\(p^{f}_w\\) - Forecasted power output of wind turbine \\(w\\in\\mathcal{W}\\) in [MW]\n\\(d^f\\) - Forecasted demand in [MW]",
    "crumbs": [
      "05 Dispatch",
      "Lecture"
    ]
  },
  {
    "objectID": "part-05/lecture-dispatch.html#decision-variables",
    "href": "part-05/lecture-dispatch.html#decision-variables",
    "title": "Lecture V - Economic Dispatch Problem",
    "section": "Decision Variables?",
    "text": "Decision Variables?\n\n\n\n\n\n\nWe have the following sets:\n\n\n\n\nThermal generators indexed by \\(g \\in \\{1,2,...,|\\mathcal{G}|\\}\\)\nWind turbines indexed by \\(w \\in \\{1,2,...,|\\mathcal{W}|\\}\\)\n\n\n\n. . .\n\n\n\n\n\n\nOur objective is to:\n\n\n\nMinimize the electricity supply cost while satisfying the demand and adhering to the production capacity.\n\n\n. . .\nQuestion: What could be our decision variable/s?",
    "crumbs": [
      "05 Dispatch",
      "Lecture"
    ]
  },
  {
    "objectID": "part-05/lecture-dispatch.html#decision-variables-1",
    "href": "part-05/lecture-dispatch.html#decision-variables-1",
    "title": "Lecture V - Economic Dispatch Problem",
    "section": "Decision Variables",
    "text": "Decision Variables\n\n\\(p_g\\) - Power output of thermal generator \\(g\\in\\mathcal{G}\\)\n\\(p_w\\) - Power injection of wind turbine \\(w\\in\\mathcal{W}\\)",
    "crumbs": [
      "05 Dispatch",
      "Lecture"
    ]
  },
  {
    "objectID": "part-05/lecture-dispatch.html#objective-function",
    "href": "part-05/lecture-dispatch.html#objective-function",
    "title": "Lecture V - Economic Dispatch Problem",
    "section": "Objective Function?",
    "text": "Objective Function?\n\n\n\n\n\n\nOur objective is to:\n\n\n\nMinimize the electricity supply cost while satisfying the demand and adhering to the production capacity.\n\n\n. . .\nQuestion: What could be our objective function?\n. . .\n\n\n\n\n\n\nWe need the following variables:\n\n\n\n\n\\(p_g\\) - Power output of thermal generator \\(g\\in\\mathcal{G}\\)\n\\(p_w\\) - Power injection of wind turbine \\(w\\in\\mathcal{W}\\)",
    "crumbs": [
      "05 Dispatch",
      "Lecture"
    ]
  },
  {
    "objectID": "part-05/lecture-dispatch.html#objective-function-1",
    "href": "part-05/lecture-dispatch.html#objective-function-1",
    "title": "Lecture V - Economic Dispatch Problem",
    "section": "Objective Function",
    "text": "Objective Function\n\n\n\n\n\n\nWe need the following parameters:\n\n\n\n\n\\(c^{var}_g\\) - Cost of thermal generator \\(g\\in\\mathcal{G}\\) in [€/]\n\\(c^{var}_w\\) - Cost of wind turbine \\(w\\in\\mathcal{W}\\) in [€/]\n\n\n\n. . .\n\\(\\text{Minimize} \\quad \\sum_{g=1}^{\\mathcal{G}} (c^{var}_g p_g) + \\sum_{w=1}^{\\mathcal{W}} (c^{var}_w p_w)\\)",
    "crumbs": [
      "05 Dispatch",
      "Lecture"
    ]
  },
  {
    "objectID": "part-05/lecture-dispatch.html#constraints-1",
    "href": "part-05/lecture-dispatch.html#constraints-1",
    "title": "Lecture V - Economic Dispatch Problem",
    "section": "Constraints",
    "text": "Constraints\n\n\n\n\nQuestion: What constraints?\n\n\ngenerator limits\nrenewable power injection\nFulfill the power demand while maintaining power balance",
    "crumbs": [
      "05 Dispatch",
      "Lecture"
    ]
  },
  {
    "objectID": "part-05/lecture-dispatch.html#generator-limits-constraints",
    "href": "part-05/lecture-dispatch.html#generator-limits-constraints",
    "title": "Lecture V - Economic Dispatch Problem",
    "section": "Generator Limits Constraints?",
    "text": "Generator Limits Constraints?\n\n\n\n\n\n\nThe goal of these constraints is to:\n\n\n\nMinimum and maximum power limits the power output of generators.\n\n\n. . .\n\n\n\n\n\n\nWe need the following variables and parameters:\n\n\n\n\n\\(p_g\\) - Power output of thermal generator \\(g\\in\\mathcal{G}\\)\n\\(p^{\\min}_g\\) - Minimum power output of thermal generator \\(g\\in\\mathcal{G}\\) in [MW]\n\\(p^{\\max}_g\\) - Maximum power output of thermal generator \\(g\\in\\mathcal{G}\\) in [MW]\n\n\n\n. . .\nQuestion: What could the constraint look like?",
    "crumbs": [
      "05 Dispatch",
      "Lecture"
    ]
  },
  {
    "objectID": "part-05/lecture-dispatch.html#generator-limits-constraints-1",
    "href": "part-05/lecture-dispatch.html#generator-limits-constraints-1",
    "title": "Lecture V - Economic Dispatch Problem",
    "section": "Generator Limits Constraints",
    "text": "Generator Limits Constraints\n\\(p^{\\min}_g \\leq p_g \\leq p^{\\max}_g \\quad \\forall g\\in\\mathcal{G}\\)\n. . .\n\n\n\n\n\n\nRemember, these are the variables and parameters:\n\n\n\n\n\\(p_g\\) - Power output of thermal generator \\(g\\in\\mathcal{G}\\)\n\\(p^{\\min}_g\\) - Minimum power output of thermal generator \\(g\\in\\mathcal{G}\\) in [MW]\n\\(p^{\\max}_g\\) - Maximum power output of thermal generator \\(g\\in\\mathcal{G}\\) in [MW]\n\n\n\n. . .\nQuestion: What does \\(\\forall g\\in\\mathcal{G}\\) mean?",
    "crumbs": [
      "05 Dispatch",
      "Lecture"
    ]
  },
  {
    "objectID": "part-05/lecture-dispatch.html#renewable-power-injection-constraints",
    "href": "part-05/lecture-dispatch.html#renewable-power-injection-constraints",
    "title": "Lecture V - Economic Dispatch Problem",
    "section": "Renewable Power Injection Constraints?",
    "text": "Renewable Power Injection Constraints?\n\n\n\n\n\n\nThe goal of these constraints is to:\n\n\n\nRenewable power injection into the grid or power balance is limited by the renewable power forecast, e.g. wind power.\n\n\n. . .\n\n\n\n\n\n\nWe need the following variables and parameters:\n\n\n\n\n\\(p_w\\) - Power injection of wind turbine \\(w\\in\\mathcal{W}\\)\n\\(p^{f}_w\\) - Forecasted power output of wind turbine \\(w\\in\\mathcal{W}\\) in [MW]\n\n\n\n. . .\nQuestion: What could the second constraint be?",
    "crumbs": [
      "05 Dispatch",
      "Lecture"
    ]
  },
  {
    "objectID": "part-05/lecture-dispatch.html#wind-power-injection-constraints",
    "href": "part-05/lecture-dispatch.html#wind-power-injection-constraints",
    "title": "Lecture V - Economic Dispatch Problem",
    "section": "Wind Power Injection Constraints",
    "text": "Wind Power Injection Constraints\n:::\n\\(0 \\leq p_w \\leq p^f_w \\quad \\forall w\\in\\mathcal{W}\\)\n:::\n. . .\nQuestion: What kind of constraint is this? Think about what is limited.",
    "crumbs": [
      "05 Dispatch",
      "Lecture"
    ]
  },
  {
    "objectID": "part-05/lecture-dispatch.html#power-balance-constraints",
    "href": "part-05/lecture-dispatch.html#power-balance-constraints",
    "title": "Lecture V - Economic Dispatch Problem",
    "section": "Power Balance Constraints?",
    "text": "Power Balance Constraints?\n\n\n\n\n\n\nThe goal of these constraints is to:\n\n\n\nMaintain that produced and consumed power in the system is equal.\n\n\n. . .\n\n\n\n\n\n\nWe need the following variables and parameters:\n\n\n\n\n\\(p_g\\) - Power output of thermal generator \\(g\\in\\mathcal{G}\\)\n\\(p_w\\) - Power injection of wind turbine \\(w\\in\\mathcal{W}\\)\n\\(d^f\\) - Forecasted demand in [MW]",
    "crumbs": [
      "05 Dispatch",
      "Lecture"
    ]
  },
  {
    "objectID": "part-05/lecture-dispatch.html#power-balance-constraints-1",
    "href": "part-05/lecture-dispatch.html#power-balance-constraints-1",
    "title": "Lecture V - Economic Dispatch Problem",
    "section": "Power Balance Constraints",
    "text": "Power Balance Constraints\n\\[\\sum_{g=1}^{\\mathcal{G}} p_g + \\sum_{w=1}^{\\mathcal{W}} p_w = d^f\\]\n. . .\nAnd that’s basically it!",
    "crumbs": [
      "05 Dispatch",
      "Lecture"
    ]
  },
  {
    "objectID": "part-05/lecture-dispatch.html#economic-dispatch-objective-function",
    "href": "part-05/lecture-dispatch.html#economic-dispatch-objective-function",
    "title": "Lecture V - Economic Dispatch Problem",
    "section": "Economic Dispatch: Objective Function",
    "text": "Economic Dispatch: Objective Function\n\\(\\text{Minimize} \\quad \\sum_{g=1}^{\\mathcal{G}} (c^{var}_g p_g) + \\sum_{w=1}^{\\mathcal{W}} (c^{var}_w p_w)\\)\n\n\n\n\n\n\nThe goal of the objective function and model is to:\n\n\n\nMinimize the electricity supply cost while satisfying the demand and adhering to the production capacity.",
    "crumbs": [
      "05 Dispatch",
      "Lecture"
    ]
  },
  {
    "objectID": "part-05/lecture-dispatch.html#economic-dispatch-constraints",
    "href": "part-05/lecture-dispatch.html#economic-dispatch-constraints",
    "title": "Lecture V - Economic Dispatch Problem",
    "section": "Economic Dispatch: Constraints",
    "text": "Economic Dispatch: Constraints\n\\(p^{\\min}_g \\leq p_g \\leq p^{\\max}_g \\quad \\forall g\\in\\mathcal{G}\\)$\n\\(0 \\leq p_w \\leq p^f_w \\quad \\forall w\\in\\mathcal{W}\\)$\n\\(\\sum_{g=1}^{\\mathcal{G}} p_g + \\sum_{w=1}^{\\mathcal{W}} p_w = d^f\\)$\n\n\n\n\n\n\nOur constraints ensure:\n\n\n\nGenerator limits are respected, wind power is bounded by forecast, and power balance is maintained.",
    "crumbs": [
      "05 Dispatch",
      "Lecture"
    ]
  },
  {
    "objectID": "part-05/lecture-dispatch.html#economic-dispatch-variable-domains",
    "href": "part-05/lecture-dispatch.html#economic-dispatch-variable-domains",
    "title": "Lecture V - Economic Dispatch Problem",
    "section": "Economic Dispatch: Variable Domains",
    "text": "Economic Dispatch: Variable Domains\n\\(p_g \\geq 0 \\quad \\forall g\\in\\mathcal{G}\\)\n\\(p_w \\geq 0 \\quad \\forall w\\in\\mathcal{W}\\)\n\n\n\n\n\n\nThe variable domains make sure that:\n\n\n\nAll power outputs are non-negative.\n\n\n. . .\nQuestion: Are these necessary?",
    "crumbs": [
      "05 Dispatch",
      "Lecture"
    ]
  },
  {
    "objectID": "part-05/lecture-dispatch.html#economic-dispatch-complete-model",
    "href": "part-05/lecture-dispatch.html#economic-dispatch-complete-model",
    "title": "Lecture V - Economic Dispatch Problem",
    "section": "Economic Dispatch: Complete Model",
    "text": "Economic Dispatch: Complete Model\n\\(\\text{Minimize} \\quad \\sum_{g=1}^{\\mathcal{G}} (c^{var}_g p_g) + \\sum_{w=1}^{\\mathcal{W}} (c^{var}_w p_w)\\)\nsubject to\n\\(\\sum_{g=1}^{\\mathcal{G}} p_g + \\sum_{w=1}^{\\mathcal{W}} p_w = d^f\\)\n\\(p^{\\min}_g \\leq p_g \\leq p^{\\max}_g \\quad \\forall g\\in\\mathcal{G}\\)\n\\(0 \\leq p_w \\leq p^f_w \\quad \\forall w\\in\\mathcal{W}\\)",
    "crumbs": [
      "05 Dispatch",
      "Lecture"
    ]
  },
  {
    "objectID": "part-05/lecture-dispatch.html#some-basics",
    "href": "part-05/lecture-dispatch.html#some-basics",
    "title": "Lecture V - Economic Dispatch Problem",
    "section": "Some Basics",
    "text": "Some Basics\nThere exist several types of optimization problems:\n\n\nLinear (LP): Linear constraints and objective function\nMixed-integer (MIP): Linear constraints and objective function, but discrete variable domains\nQuadratic (QP): Quadratic constraints and/or objective\nNon-linear (NLP): Non-linear constraints and/or objective\nAnd more!",
    "crumbs": [
      "05 Dispatch",
      "Lecture"
    ]
  },
  {
    "objectID": "part-05/lecture-dispatch.html#solution-algorithms",
    "href": "part-05/lecture-dispatch.html#solution-algorithms",
    "title": "Lecture V - Economic Dispatch Problem",
    "section": "Solution Algorithms",
    "text": "Solution Algorithms\n\n\nSimplex algorithm to solve LPs\nBranch & Bound to solve MIPs\nOuter-Approximation for mixed-integer NLPs\nMath-Heuristics (e.g., Fix-and-Optimize, Tabu-Search, …)\nDecomposition methods (Lagrange, Benders, …)\nHeuristics (greedy, construction method, n-opt, …)\nGraph theoretical methods (network flow, shortest path)",
    "crumbs": [
      "05 Dispatch",
      "Lecture"
    ]
  },
  {
    "objectID": "part-05/lecture-dispatch.html#model-characteristics-1",
    "href": "part-05/lecture-dispatch.html#model-characteristics-1",
    "title": "Lecture V - Economic Dispatch Problem",
    "section": "Model Characteristics",
    "text": "Model Characteristics\nQuestions: On model characteristics\n\n\nIs the model formulation linear/ non-linear?\nWhat kind of variable domains do we have?\nWhat kind of solution algorithm could we use?",
    "crumbs": [
      "05 Dispatch",
      "Lecture"
    ]
  },
  {
    "objectID": "part-05/lecture-dispatch.html#model-assumptions",
    "href": "part-05/lecture-dispatch.html#model-assumptions",
    "title": "Lecture V - Economic Dispatch Problem",
    "section": "Model Assumptions",
    "text": "Model Assumptions\nQuestions: On model assumptions\n\n\nWhat assumptions have we made?\nWhat is the problem with the generator production and power balance?\nAny idea how to solve it?",
    "crumbs": [
      "05 Dispatch",
      "Lecture"
    ]
  },
  {
    "objectID": "part-05/lecture-dispatch.html#section-1",
    "href": "part-05/lecture-dispatch.html#section-1",
    "title": "Lecture V - Economic Dispatch Problem",
    "section": "",
    "text": "Can this be applied?",
    "crumbs": [
      "05 Dispatch",
      "Lecture"
    ]
  },
  {
    "objectID": "part-05/lecture-dispatch.html#utility-companies",
    "href": "part-05/lecture-dispatch.html#utility-companies",
    "title": "Lecture V - Economic Dispatch Problem",
    "section": "Utility companies",
    "text": "Utility companies\nThe ED problem is the smallest and simplest form of operational planning every utility company has to perform.",
    "crumbs": [
      "05 Dispatch",
      "Lecture"
    ]
  },
  {
    "objectID": "part-05/lecture-dispatch.html#what-are-further-considerations-to-make",
    "href": "part-05/lecture-dispatch.html#what-are-further-considerations-to-make",
    "title": "Lecture V - Economic Dispatch Problem",
    "section": "What are further considerations to make?",
    "text": "What are further considerations to make?\n\non/off status of system components -&gt; unit commitment (UC) problem\nefficiency losses\nramp rates\nminimum up- and downtimes\nstorages -&gt; multiple timesteps\nuncertainty in forecasts",
    "crumbs": [
      "05 Dispatch",
      "Lecture"
    ]
  },
  {
    "objectID": "part-05/lecture-dispatch.html#section-2",
    "href": "part-05/lecture-dispatch.html#section-2",
    "title": "Lecture V - Economic Dispatch Problem",
    "section": "",
    "text": "Any idea how to\nadapt the ED to UC?",
    "crumbs": [
      "05 Dispatch",
      "Lecture"
    ]
  },
  {
    "objectID": "part-05/lecture-dispatch.html#power-system-basic-models-unit-commitment",
    "href": "part-05/lecture-dispatch.html#power-system-basic-models-unit-commitment",
    "title": "Lecture V - Economic Dispatch Problem",
    "section": "Power System Basic Models: Unit Commitment",
    "text": "Power System Basic Models: Unit Commitment\n\nconsiders binary decisions if a unit, e.g., thermal generator, in the power system is switched on or off\ndecision are made over a time horizon, which means that variables are also indexed by timesteps.\n\nWe will cover the unit commitment problem in the next lecture.\n. . .\n\n\n\n\n\n\nAnd that’s it for todays lecture!\n\n\n\nWe now have covered the basics of the ED and are ready to start solving some tasks in the upcoming tutorial.",
    "crumbs": [
      "05 Dispatch",
      "Lecture"
    ]
  },
  {
    "objectID": "part-05/lecture-dispatch.html#section-3",
    "href": "part-05/lecture-dispatch.html#section-3",
    "title": "Lecture V - Economic Dispatch Problem",
    "section": "",
    "text": "Questions?",
    "crumbs": [
      "05 Dispatch",
      "Lecture"
    ]
  },
  {
    "objectID": "part-05/lecture-dispatch.html#literature-i",
    "href": "part-05/lecture-dispatch.html#literature-i",
    "title": "Lecture V - Economic Dispatch Problem",
    "section": "Literature I",
    "text": "Literature I\nFor more interesting literature to learn more about Julia, take a look at the literature list of this course.",
    "crumbs": [
      "05 Dispatch",
      "Lecture"
    ]
  },
  {
    "objectID": "part-05/lecture-dispatch.html#literature-ii",
    "href": "part-05/lecture-dispatch.html#literature-ii",
    "title": "Lecture V - Economic Dispatch Problem",
    "section": "Literature II",
    "text": "Literature II",
    "crumbs": [
      "05 Dispatch",
      "Lecture"
    ]
  },
  {
    "objectID": "part-05/lecture-presentation.html#jump",
    "href": "part-05/lecture-presentation.html#jump",
    "title": "Lecture V - Economic Dispatch Problem",
    "section": "JuMP",
    "text": "JuMP\n\nJuMP is a package for modeling optimization problems in Julia\nIt allows you to describe optimization problems in a way that is easy to understand and solve\nIt is a powerful tool for modeling and solving optimization problems\n\n\n\n\n\n\n\n\nTip\n\n\nUse meaningful variable names and comments to make your model easier to understand."
  },
  {
    "objectID": "part-05/lecture-presentation.html#bounds",
    "href": "part-05/lecture-presentation.html#bounds",
    "title": "Lecture V - Economic Dispatch Problem",
    "section": "Bounds",
    "text": "Bounds\n\nVariables in optimization models often need upper and lower bounds\nBounds can be set when declaring variables or added later as constraints\nCommon bounds include non-negativity (\\(\\leq 0\\)) and capacity limits"
  },
  {
    "objectID": "part-05/lecture-presentation.html#constraints",
    "href": "part-05/lecture-presentation.html#constraints",
    "title": "Lecture V - Economic Dispatch Problem",
    "section": "Constraints",
    "text": "Constraints\n\nConstraints define the feasible region of the optimization problem\nCan be equality (\\(=\\)) or inequality (\\(\\geq, \\leq\\)) constraints\nMultiple constraints can be added using loops or array comprehensions\n\n\n\n\n\n\n\n\nTip\n\n\nConditional constraints allow flexible and dynamic model formulations reflecting conditions and dependencies in the constraint application."
  },
  {
    "objectID": "part-05/lecture-presentation.html#solver",
    "href": "part-05/lecture-presentation.html#solver",
    "title": "Lecture V - Economic Dispatch Problem",
    "section": "Solver",
    "text": "Solver\n\nJuMP supports many different solvers like HiGHS, GLPK, Gurobi\nSolvers are specialized for different problem types (LP, MIP, NLP)\nCan set solver parameters to control solution process"
  },
  {
    "objectID": "part-05/lecture-presentation.html#model-setup",
    "href": "part-05/lecture-presentation.html#model-setup",
    "title": "Lecture V - Economic Dispatch Problem",
    "section": "Model Setup",
    "text": "Model Setup\n\nStart by creating a model with Model()\nAdd variables, objective function, and constraints\nCall optimize!() to solve the model\nAccess results through solution queries\n\n\n\n\n\n\n\n\nTip\n\n\nAlways check the solution status before using the results to ensure the model solved successfully."
  },
  {
    "objectID": "part-05/lecture-presentation.html#solutions-from-last-week",
    "href": "part-05/lecture-presentation.html#solutions-from-last-week",
    "title": "Lecture V - Economic Dispatch Problem",
    "section": "Solutions from last Week",
    "text": "Solutions from last Week\n\nThe tutorials from last week will again be available on Friday\nYou can access them in the project folder on Github\nClick on the little cat icon on the bottom right\n\n\n\n\n\n\n\n\nTip\n\n\nYou can ask questions anytime in class or via email!"
  },
  {
    "objectID": "part-05/lecture-presentation.html#power-system-basic-models-economic-dispatch",
    "href": "part-05/lecture-presentation.html#power-system-basic-models-economic-dispatch",
    "title": "Lecture V - Economic Dispatch Problem",
    "section": "Power System Basic Models: Economic Dispatch",
    "text": "Power System Basic Models: Economic Dispatch\n\n\n\n\nPower system system with generators and an aggregated demand\n\nGenerators have to be dispatched to meet the demand at an infinitesimal moment\nGenerators have different costs and operational constraints"
  },
  {
    "objectID": "part-05/lecture-presentation.html#section",
    "href": "part-05/lecture-presentation.html#section",
    "title": "Lecture V - Economic Dispatch Problem",
    "section": "",
    "text": "How does the mathematical model look like?"
  },
  {
    "objectID": "part-05/lecture-presentation.html#objective",
    "href": "part-05/lecture-presentation.html#objective",
    "title": "Lecture V - Economic Dispatch Problem",
    "section": "Objective",
    "text": "Objective\n\n\n\n\nQuestion: What could be the objective?\nMinimize the electricity supply cost while satisfying the demand and adhering to the production capacity."
  },
  {
    "objectID": "part-05/lecture-presentation.html#available-sets",
    "href": "part-05/lecture-presentation.html#available-sets",
    "title": "Lecture V - Economic Dispatch Problem",
    "section": "Available Sets",
    "text": "Available Sets\nQuestion: What are sets again?\n\nSets are collections of objects.\n\n\nQuestion: What could be the sets here?\n\n\n\n\\(\\mathcal{G}\\) - Set of thermal generators indexed by \\(g \\in \\{1,2,...,|\\mathcal{G}|\\}\\)\n\\(\\mathcal{W}\\) - Set of wind turbines indexed by \\(w \\in \\{1,2,...,|\\mathcal{W}|\\}\\)"
  },
  {
    "objectID": "part-05/lecture-presentation.html#available-parameters",
    "href": "part-05/lecture-presentation.html#available-parameters",
    "title": "Lecture V - Economic Dispatch Problem",
    "section": "Available Parameters",
    "text": "Available Parameters\nQuestion: What are possible parameters?\n\n\n\\(c^{var}_g\\) - Cost of thermal generator \\(g\\in\\mathcal{G}\\) in [\\(EUR/\\text{MWh}\\)]\n\\(c^{var}_w\\) - Cost of wind turbine \\(w\\in\\mathcal{W}\\) in [\\(EUR/\\text{MWh}\\)]\n\\(p^{\\min}_g\\) - Minimum power output of thermal generator \\(g\\in\\mathcal{G}\\) in [MW]\n\\(p^{\\max}_g\\) - Maximum power output of thermal generator \\(g\\in\\mathcal{G}\\) in [MW]\n\\(p^{f}_w\\) - Forecasted power output of wind turbine \\(w\\in\\mathcal{W}\\) in [MW]\n\\(d^f\\) - Forecasted demand in [MW]"
  },
  {
    "objectID": "part-05/lecture-presentation.html#decision-variables",
    "href": "part-05/lecture-presentation.html#decision-variables",
    "title": "Lecture V - Economic Dispatch Problem",
    "section": "Decision Variables?",
    "text": "Decision Variables?\n\n\n\n\n\n\nWe have the following sets:\n\n\n\nThermal generators indexed by \\(g \\in \\{1,2,...,|\\mathcal{G}|\\}\\)\nWind turbines indexed by \\(w \\in \\{1,2,...,|\\mathcal{W}|\\}\\)\n\n\n\n\n\n\n\n\n\n\n\nOur objective is to:\n\n\nMinimize the electricity supply cost while satisfying the demand and adhering to the production capacity.\n\n\n\n\n\nQuestion: What could be our decision variable/s?"
  },
  {
    "objectID": "part-05/lecture-presentation.html#decision-variables-1",
    "href": "part-05/lecture-presentation.html#decision-variables-1",
    "title": "Lecture V - Economic Dispatch Problem",
    "section": "Decision Variables",
    "text": "Decision Variables\n\n\\(p_g\\) - Power output of thermal generator \\(g\\in\\mathcal{G}\\)\n\\(p_w\\) - Power injection of wind turbine \\(w\\in\\mathcal{W}\\)"
  },
  {
    "objectID": "part-05/lecture-presentation.html#objective-function",
    "href": "part-05/lecture-presentation.html#objective-function",
    "title": "Lecture V - Economic Dispatch Problem",
    "section": "Objective Function?",
    "text": "Objective Function?\n\n\n\n\n\n\nOur objective is to:\n\n\nMinimize the electricity supply cost while satisfying the demand and adhering to the production capacity.\n\n\n\n\nQuestion: What could be our objective function?\n\n\n\n\n\n\n\n\nWe need the following variables:\n\n\n\n\\(p_g\\) - Power output of thermal generator \\(g\\in\\mathcal{G}\\)\n\\(p_w\\) - Power injection of wind turbine \\(w\\in\\mathcal{W}\\)"
  },
  {
    "objectID": "part-05/lecture-presentation.html#objective-function-1",
    "href": "part-05/lecture-presentation.html#objective-function-1",
    "title": "Lecture V - Economic Dispatch Problem",
    "section": "Objective Function",
    "text": "Objective Function\n\n\n\n\n\n\nWe need the following parameters:\n\n\n\n\\(c^{var}_g\\) - Cost of thermal generator \\(g\\in\\mathcal{G}\\) in [€/]\n\\(c^{var}_w\\) - Cost of wind turbine \\(w\\in\\mathcal{W}\\) in [€/]\n\n\n\n\n\n\\(\\text{Minimize} \\quad \\sum_{g=1}^{\\mathcal{G}} (c^{var}_g p_g) + \\sum_{w=1}^{\\mathcal{W}} (c^{var}_w p_w)\\)"
  },
  {
    "objectID": "part-05/lecture-presentation.html#constraints-1",
    "href": "part-05/lecture-presentation.html#constraints-1",
    "title": "Lecture V - Economic Dispatch Problem",
    "section": "Constraints",
    "text": "Constraints\n\n\n\n\nQuestion: What constraints?\n\n\ngenerator limits\nrenewable power injection\nFulfill the power demand while maintaining power balance"
  },
  {
    "objectID": "part-05/lecture-presentation.html#generator-limits-constraints",
    "href": "part-05/lecture-presentation.html#generator-limits-constraints",
    "title": "Lecture V - Economic Dispatch Problem",
    "section": "Generator Limits Constraints?",
    "text": "Generator Limits Constraints?\n\n\n\n\n\n\nThe goal of these constraints is to:\n\n\nMinimum and maximum power limits the power output of generators.\n\n\n\n\n\n\n\n\n\n\nWe need the following variables and parameters:\n\n\n\n\\(p_g\\) - Power output of thermal generator \\(g\\in\\mathcal{G}\\)\n\\(p^{\\min}_g\\) - Minimum power output of thermal generator \\(g\\in\\mathcal{G}\\) in [MW]\n\\(p^{\\max}_g\\) - Maximum power output of thermal generator \\(g\\in\\mathcal{G}\\) in [MW]\n\n\n\n\n\n\nQuestion: What could the constraint look like?"
  },
  {
    "objectID": "part-05/lecture-presentation.html#generator-limits-constraints-1",
    "href": "part-05/lecture-presentation.html#generator-limits-constraints-1",
    "title": "Lecture V - Economic Dispatch Problem",
    "section": "Generator Limits Constraints",
    "text": "Generator Limits Constraints\n\\(p^{\\min}_g \\leq p_g \\leq p^{\\max}_g \\quad \\forall g\\in\\mathcal{G}\\)\n\n\n\n\n\n\n\nRemember, these are the variables and parameters:\n\n\n\n\\(p_g\\) - Power output of thermal generator \\(g\\in\\mathcal{G}\\)\n\\(p^{\\min}_g\\) - Minimum power output of thermal generator \\(g\\in\\mathcal{G}\\) in [MW]\n\\(p^{\\max}_g\\) - Maximum power output of thermal generator \\(g\\in\\mathcal{G}\\) in [MW]\n\n\n\n\n\n\nQuestion: What does \\(\\forall g\\in\\mathcal{G}\\) mean?"
  },
  {
    "objectID": "part-05/lecture-presentation.html#renewable-power-injection-constraints",
    "href": "part-05/lecture-presentation.html#renewable-power-injection-constraints",
    "title": "Lecture V - Economic Dispatch Problem",
    "section": "Renewable Power Injection Constraints?",
    "text": "Renewable Power Injection Constraints?\n\n\n\n\n\n\nThe goal of these constraints is to:\n\n\nRenewable power injection into the grid or power balance is limited by the renewable power forecast, e.g. wind power.\n\n\n\n\n\n\n\n\n\n\nWe need the following variables and parameters:\n\n\n\n\\(p_w\\) - Power injection of wind turbine \\(w\\in\\mathcal{W}\\)\n\\(p^{f}_w\\) - Forecasted power output of wind turbine \\(w\\in\\mathcal{W}\\) in [MW]\n\n\n\n\n\n\nQuestion: What could the second constraint be?"
  },
  {
    "objectID": "part-05/lecture-presentation.html#wind-power-injection-constraints",
    "href": "part-05/lecture-presentation.html#wind-power-injection-constraints",
    "title": "Lecture V - Economic Dispatch Problem",
    "section": "Wind Power Injection Constraints",
    "text": "Wind Power Injection Constraints\n:::\n\\(0 \\leq p_w \\leq p^f_w \\quad \\forall w\\in\\mathcal{W}\\)\n:::\n\nQuestion: What kind of constraint is this? Think about what is limited."
  },
  {
    "objectID": "part-05/lecture-presentation.html#power-balance-constraints",
    "href": "part-05/lecture-presentation.html#power-balance-constraints",
    "title": "Lecture V - Economic Dispatch Problem",
    "section": "Power Balance Constraints?",
    "text": "Power Balance Constraints?\n\n\n\n\n\n\nThe goal of these constraints is to:\n\n\nMaintain that produced and consumed power in the system is equal.\n\n\n\n\n\n\n\n\n\n\nWe need the following variables and parameters:\n\n\n\n\\(p_g\\) - Power output of thermal generator \\(g\\in\\mathcal{G}\\)\n\\(p_w\\) - Power injection of wind turbine \\(w\\in\\mathcal{W}\\)\n\\(d^f\\) - Forecasted demand in [MW]"
  },
  {
    "objectID": "part-05/lecture-presentation.html#power-balance-constraints-1",
    "href": "part-05/lecture-presentation.html#power-balance-constraints-1",
    "title": "Lecture V - Economic Dispatch Problem",
    "section": "Power Balance Constraints",
    "text": "Power Balance Constraints\n\\[\\sum_{g=1}^{\\mathcal{G}} p_g + \\sum_{w=1}^{\\mathcal{W}} p_w = d^f\\]\n\nAnd that’s basically it!"
  },
  {
    "objectID": "part-05/lecture-presentation.html#economic-dispatch-objective-function",
    "href": "part-05/lecture-presentation.html#economic-dispatch-objective-function",
    "title": "Lecture V - Economic Dispatch Problem",
    "section": "Economic Dispatch: Objective Function",
    "text": "Economic Dispatch: Objective Function\n\\(\\text{Minimize} \\quad \\sum_{g=1}^{\\mathcal{G}} (c^{var}_g p_g) + \\sum_{w=1}^{\\mathcal{W}} (c^{var}_w p_w)\\)\n\n\n\n\n\n\nThe goal of the objective function and model is to:\n\n\nMinimize the electricity supply cost while satisfying the demand and adhering to the production capacity."
  },
  {
    "objectID": "part-05/lecture-presentation.html#economic-dispatch-constraints",
    "href": "part-05/lecture-presentation.html#economic-dispatch-constraints",
    "title": "Lecture V - Economic Dispatch Problem",
    "section": "Economic Dispatch: Constraints",
    "text": "Economic Dispatch: Constraints\n\\(p^{\\min}_g \\leq p_g \\leq p^{\\max}_g \\quad \\forall g\\in\\mathcal{G}\\)$\n\\(0 \\leq p_w \\leq p^f_w \\quad \\forall w\\in\\mathcal{W}\\)$\n\\(\\sum_{g=1}^{\\mathcal{G}} p_g + \\sum_{w=1}^{\\mathcal{W}} p_w = d^f\\)$\n\n\n\n\n\n\nOur constraints ensure:\n\n\nGenerator limits are respected, wind power is bounded by forecast, and power balance is maintained."
  },
  {
    "objectID": "part-05/lecture-presentation.html#economic-dispatch-variable-domains",
    "href": "part-05/lecture-presentation.html#economic-dispatch-variable-domains",
    "title": "Lecture V - Economic Dispatch Problem",
    "section": "Economic Dispatch: Variable Domains",
    "text": "Economic Dispatch: Variable Domains\n\\(p_g \\geq 0 \\quad \\forall g\\in\\mathcal{G}\\)\n\\(p_w \\geq 0 \\quad \\forall w\\in\\mathcal{W}\\)\n\n\n\n\n\n\nThe variable domains make sure that:\n\n\nAll power outputs are non-negative.\n\n\n\n\nQuestion: Are these necessary?"
  },
  {
    "objectID": "part-05/lecture-presentation.html#economic-dispatch-complete-model",
    "href": "part-05/lecture-presentation.html#economic-dispatch-complete-model",
    "title": "Lecture V - Economic Dispatch Problem",
    "section": "Economic Dispatch: Complete Model",
    "text": "Economic Dispatch: Complete Model\n\\(\\text{Minimize} \\quad \\sum_{g=1}^{\\mathcal{G}} (c^{var}_g p_g) + \\sum_{w=1}^{\\mathcal{W}} (c^{var}_w p_w)\\)\nsubject to\n\\(\\sum_{g=1}^{\\mathcal{G}} p_g + \\sum_{w=1}^{\\mathcal{W}} p_w = d^f\\)\n\\(p^{\\min}_g \\leq p_g \\leq p^{\\max}_g \\quad \\forall g\\in\\mathcal{G}\\)\n\\(0 \\leq p_w \\leq p^f_w \\quad \\forall w\\in\\mathcal{W}\\)"
  },
  {
    "objectID": "part-05/lecture-presentation.html#some-basics",
    "href": "part-05/lecture-presentation.html#some-basics",
    "title": "Lecture V - Economic Dispatch Problem",
    "section": "Some Basics",
    "text": "Some Basics\nThere exist several types of optimization problems:\n\n\nLinear (LP): Linear constraints and objective function\nMixed-integer (MIP): Linear constraints and objective function, but discrete variable domains\nQuadratic (QP): Quadratic constraints and/or objective\nNon-linear (NLP): Non-linear constraints and/or objective\nAnd more!"
  },
  {
    "objectID": "part-05/lecture-presentation.html#solution-algorithms",
    "href": "part-05/lecture-presentation.html#solution-algorithms",
    "title": "Lecture V - Economic Dispatch Problem",
    "section": "Solution Algorithms",
    "text": "Solution Algorithms\n\n\nSimplex algorithm to solve LPs\nBranch & Bound to solve MIPs\nOuter-Approximation for mixed-integer NLPs\nMath-Heuristics (e.g., Fix-and-Optimize, Tabu-Search, …)\nDecomposition methods (Lagrange, Benders, …)\nHeuristics (greedy, construction method, n-opt, …)\nGraph theoretical methods (network flow, shortest path)"
  },
  {
    "objectID": "part-05/lecture-presentation.html#model-characteristics-1",
    "href": "part-05/lecture-presentation.html#model-characteristics-1",
    "title": "Lecture V - Economic Dispatch Problem",
    "section": "Model Characteristics",
    "text": "Model Characteristics\nQuestions: On model characteristics\n\n\nIs the model formulation linear/ non-linear?\nWhat kind of variable domains do we have?\nWhat kind of solution algorithm could we use?"
  },
  {
    "objectID": "part-05/lecture-presentation.html#model-assumptions",
    "href": "part-05/lecture-presentation.html#model-assumptions",
    "title": "Lecture V - Economic Dispatch Problem",
    "section": "Model Assumptions",
    "text": "Model Assumptions\nQuestions: On model assumptions\n\n\nWhat assumptions have we made?\nWhat is the problem with the generator production and power balance?\nAny idea how to solve it?"
  },
  {
    "objectID": "part-05/lecture-presentation.html#section-1",
    "href": "part-05/lecture-presentation.html#section-1",
    "title": "Lecture V - Economic Dispatch Problem",
    "section": "",
    "text": "Can this be applied?"
  },
  {
    "objectID": "part-05/lecture-presentation.html#utility-companies",
    "href": "part-05/lecture-presentation.html#utility-companies",
    "title": "Lecture V - Economic Dispatch Problem",
    "section": "Utility companies",
    "text": "Utility companies\nThe ED problem is the smallest and simplest form of operational planning every utility company has to perform."
  },
  {
    "objectID": "part-05/lecture-presentation.html#what-are-further-considerations-to-make",
    "href": "part-05/lecture-presentation.html#what-are-further-considerations-to-make",
    "title": "Lecture V - Economic Dispatch Problem",
    "section": "What are further considerations to make?",
    "text": "What are further considerations to make?\n\non/off status of system components -&gt; unit commitment (UC) problem\nefficiency losses\nramp rates\nminimum up- and downtimes\nstorages -&gt; multiple timesteps\nuncertainty in forecasts"
  },
  {
    "objectID": "part-05/lecture-presentation.html#section-2",
    "href": "part-05/lecture-presentation.html#section-2",
    "title": "Lecture V - Economic Dispatch Problem",
    "section": "",
    "text": "Any idea how to\nadapt the ED to UC?"
  },
  {
    "objectID": "part-05/lecture-presentation.html#power-system-basic-models-unit-commitment",
    "href": "part-05/lecture-presentation.html#power-system-basic-models-unit-commitment",
    "title": "Lecture V - Economic Dispatch Problem",
    "section": "Power System Basic Models: Unit Commitment",
    "text": "Power System Basic Models: Unit Commitment\n\nconsiders binary decisions if a unit, e.g., thermal generator, in the power system is switched on or off\ndecision are made over a time horizon, which means that variables are also indexed by timesteps.\n\nWe will cover the unit commitment problem in the next lecture.\n\n\n\n\n\n\n\nAnd that’s it for todays lecture!\n\n\nWe now have covered the basics of the ED and are ready to start solving some tasks in the upcoming tutorial."
  },
  {
    "objectID": "part-05/lecture-presentation.html#section-3",
    "href": "part-05/lecture-presentation.html#section-3",
    "title": "Lecture V - Economic Dispatch Problem",
    "section": "",
    "text": "Questions?"
  },
  {
    "objectID": "part-05/lecture-presentation.html#literature-i",
    "href": "part-05/lecture-presentation.html#literature-i",
    "title": "Lecture V - Economic Dispatch Problem",
    "section": "Literature I",
    "text": "Literature I\nFor more interesting literature to learn more about Julia, take a look at the literature list of this course."
  },
  {
    "objectID": "part-05/lecture-presentation.html#literature-ii",
    "href": "part-05/lecture-presentation.html#literature-ii",
    "title": "Lecture V - Economic Dispatch Problem",
    "section": "Literature II",
    "text": "Literature II"
  },
  {
    "objectID": "part-05/lecture-dispatch.html#economic-dispatch-problem",
    "href": "part-05/lecture-dispatch.html#economic-dispatch-problem",
    "title": "Lecture V - Economic Dispatch Problem",
    "section": "Economic Dispatch Problem",
    "text": "Economic Dispatch Problem\n\nObjective: Minimize the cost of producing electricity\nConstraints in the simplest case:\n\nDemand must be met\nGenerators have limits on their power output\nRenewable power injection\n\nDecision variables:\n\nPower output of thermal generators\nPower output of renewables, e.g. wind",
    "crumbs": [
      "05 Dispatch",
      "Lecture"
    ]
  },
  {
    "objectID": "part-05/lecture-presentation.html#economic-dispatch-problem",
    "href": "part-05/lecture-presentation.html#economic-dispatch-problem",
    "title": "Lecture V - Economic Dispatch Problem",
    "section": "Economic Dispatch Problem",
    "text": "Economic Dispatch Problem\n\nObjective: Minimize the cost of producing electricity\nConstraints in the simplest case:\n\nDemand must be met\nGenerators have limits on their power output\nRenewable power injection\n\nDecision variables:\n\nPower output of thermal generators\nPower output of renewables, e.g. wind"
  },
  {
    "objectID": "part-05/tutorial-dispatch.html",
    "href": "part-05/tutorial-dispatch.html",
    "title": "Tutorial V - Economic Dispatch Problem",
    "section": "",
    "text": "1. Modelling the ED problem\nImplement the ED problem from the lecture in Julia. Before we start, let’s load the necessary packages and data.\n\nusing JuMP, HiGHS\nusing CSV\nusing DataFrames\nusing Plots\n\n\n\n\n\n\n\nTip\n\n\n\nIf you haven’t installed the packages yet, you can do so by running using Pkg first and then Pkg.add(\"JuMP\"), Pkg.add(\"HiGHS\"), Pkg.add(\"DataFrames\"), Pkg.add(\"Plots\"), and Pkg.add(\"StatsPlots\").\n\n\nNow, let’s load the data. The generator data (\\(p^{\\min}_g, p^{\\max}_g, c^{var}_g, c^{fix}_g\\)), \\(c^{fix}_g\\) being fixed cost not used in the ED, the wind data (\\(c^{var}_w\\)), and the scenario data (\\(p^f_w, d^f\\)) are provided as CSV files.\n\n# Get the directory of the current file\nfile_directory = \"$(@__DIR__)/data\"\n\n# Load the data of the thermal generators\ngenerators = CSV.read(\"$file_directory/generator.csv\", DataFrame)\nprintln(\"Number of generator: $(nrow(generators))\")\nprintln(\"First 5 rows of available genrator:\")\nprintln(generators[1:5, :])\n\nNumber of generator: 6\nFirst 5 rows of available genrator:\n5×5 DataFrame\n Row │ name     min_power  max_power  variable_cost  fix_cost \n     │ String3  Int64      Int64      Int64          Int64    \n─────┼────────────────────────────────────────────────────────\n   1 │ G1             100        500             50      1000\n   2 │ G2              50        350             60      1200\n   3 │ G3              40        250             55      1300\n   4 │ G4              30        200             70      1500\n   5 │ G5              30        200             60      1500\n\n\n\n# Load the data of the wind turbines\nwindTurbines = CSV.read(\"$file_directory/windTurbine.csv\", DataFrame)\nprintln(\"Number of wind turbines: $(nrow(windTurbines))\")\nprintln(\"Variable cost per wind turbine:\")\nprintln(windTurbines)\n\nNumber of wind turbines: 1\nVariable cost per wind turbine:\n1×2 DataFrame\n Row │ name     var_cost \n     │ String3  Int64    \n─────┼───────────────────\n   1 │ T1             50\n\n\n\n# Load the sceanrio data about the demand and wind forecast\nscenarios = CSV.read(\"$file_directory/scenario.csv\", DataFrame)\nprintln(\"First 5 rows of sceanios:\")\nprintln(scenarios[1:5, :])\n\nFirst 5 rows of sceanios:\n5×3 DataFrame\n Row │ name     wind_forecast  demand_forecast \n     │ String3  Int64          Int64           \n─────┼─────────────────────────────────────────\n   1 │ S1                1000             1500\n   2 │ S2                1000             1600\n   3 │ S3                1000             1400\n   4 │ S4                1000             1300\n   5 │ S5                1000             1000\n\n\nNext, you need to prepare the given data for the model. We will use ‘function’ to create a ‘Named Tuple’ which we can access with the dot notation:\n\n# This function creates the Named Tuple ThermalGenerator\nfunction ThermalGenerator(\n    min::Int64,\n    max::Int64,\n    fixed_cost::Int64,\n    variable_cost::Int64,\n)\n    return (\n        min = min,\n        max = max,\n        fixed_cost = fixed_cost,\n        variable_cost = variable_cost,\n    )\nend\n\n# Add generators of the data to a dictionary of the generators\ndictThermalGeneartors = Dict(row.name =&gt; ThermalGenerator(row.min_power, row.max_power, row.fix_cost, row.variable_cost) for row in eachrow(generators))\n\n# Now a generator propety can be accessed\nprintln(dictThermalGeneartors[\"G1\"].variable_cost)\n\nAnalogously create a dictionary for the wind turbines and scenarios. Call them dictWindTurbines and dictScenarios.\n\n# YOUR CODE BELOW\n\n\n\n\nCode\n# Validate your solution\n@assert length(dictThermalGeneartors) == nrow(generators) \"Available time dictionary should have same length as input data\"\n@assert length(dictWindTurbines) == nrow(windTurbines) \"Available time dictionary should have same length as input data\"\n@assert length(dictScenarios) == nrow(scenarios) \"Scenario dictionary should have same length as input data\"\n\n# Check that all values are positive\n@assert all(v -&gt; all(x -&gt; x &gt;= 0, [v.min, v.max, v.fixed_cost, v.variable_cost]), values(dictThermalGeneartors)) \"All thermal generator values must be positive\"\n@assert all(v -&gt; v.variable_cost &gt;= 0, values(dictWindTurbines)) \"All wind turbine values must be positive\"\n@assert all(v -&gt; all(x -&gt; x &gt;= 0, [v.wind_forecast, v.demand_forecast]), values(dictScenarios)) \"All scenario values must be positive\"\n\n# Check that dictionaries contain all expected keys\n@assert all(p -&gt; haskey(dictThermalGeneartors, p), generators.name) \"Missing names in dictionary\"\n@assert all(b -&gt; haskey(dictWindTurbines, b), windTurbines.name) \"Missing names in dictionary\"\n@assert all(b -&gt; haskey(dictScenarios, b), scenarios.name) \"Missing names in dictionary\"\n\n\nNext, we define the model instance for the ED problem.\n\n# Prepare the model instance\ndispatchModel = Model(HiGHS.Optimizer)\n\nNow, create your variables. Please name them p_g for the power output of generators, p_w for the power injection of wind turbines.\n\n\n\n\n\n\nNote\n\n\n\nConsider the bounds for these variables. First, we only want to solve the model for sceanrio “S1”.\n\n\n\n# YOUR CODE BELOW\n\n\n\n\nCode\n# Validate your solution\n# Check variable dimensions\n@assert length(p_g) == length(dictThermalGeneartors) \"Incorrect dimensions for p_g\"\n@assert length(p_w) == length(dictWindTurbines) \"Incorrect dimensions for p_w\"\n\n# Check variable types\n@assert all(x -&gt; is_valid(dispatchModel, x), p_g) \"p_g must be valid variables\"\n@assert all(x -&gt; is_valid(dispatchModel, x), p_w) \"p_w must be valid variables\"\n\n\nNext, define the objective function.\n\n# YOUR CODE BELOW\n\n\n\n\nCode\n# Validate your solution\n# Check if the model has an objective\n@assert objective_function(dispatchModel) !== nothing \"Model must have an objective function\"\n\n# Check if it's a minimization problem\n@assert objective_sense(dispatchModel) == MOI.MIN_SENSE \"Objective should be minimization\"\n\n# Check if the objective function contains both cost components\nobj_expr = objective_function(dispatchModel)\n@assert contains(string(dispatchModel), \"p_g\") \"Objective must include variable costs (p_g)\"\n@assert contains(string(dispatchModel), \"p_w\") \"Objective must include variable costs (p_w)\"\n\n\nNow, we need to define all necessary constraints for the model, which is only the demand/production balance constraint as we considered min and max power limitations in the variable setup.\n\n# YOUR CODE BELOW\n\n\nFinally, implement the solve statement for your model instance and print the results.\n\n# YOUR CODE BELOW\n\n\n\n\nCode\n# Validate your solution\n@assert objective_value(dispatchModel) == 76600 \"Objective value should be 76600\"\n\n\n\n\n2. Solving scenarios of the ED problem\nWe now want to solve all sceanrios. To do so we wrap the model in a function that we then can call with different inputs.\n\n\n\n\n\n\nNote\n\n\n\nCopy your model into the function. The results should be stored in the dataframe.\n\n\n\n# Create a function `solve_economic_dispatch`, which solves the economic\n# dispatch problem for a given set of input parameters.\n\nfunction solve_economic_dispatch(dictThermalGeneartors::Dict, dictWindTurbines::Dict, scenario)\n    ## Define the economic dispatch (ED) model\n    dispatchModel = Model(HiGHS.Optimizer)\n    set_silent(dispatchModel)\n    ## Define decision variables\n    ## p_g power output of generators\n    # YOUR CODE BELOW\n    \n    ## p_w wind power injection\n    # YOUR CODE BELOW\n\n    ## Define the objective function\n    # YOUR CODE BELOW\n  \n    ## Define the power balance constraint\n    # YOUR CODE BELOW\n    \n    ## Solve statement\n    optimize!(dispatchModel)\n    assert_is_solved_and_feasible(dispatchModel)\n\n    ## return the optimal value of the objective function and variables\n    return (\n        p_g = value.(p_g),\n        p_w = value.(p_w),\n        wind_curtailment = scenario.wind_forecast - sum(value.(p_w)),\n        total_cost = objective_value(dispatchModel),\n    )\nend\n\n# Create a dataframe to store results\nresults_df = DataFrame(\n    scenario = String[],\n    total_cost = Float64[],\n    wind_curtailment = Float64[]\n)\n\n# Loop over the scenarios and save the results to a dataframe\nfor (scenario_name, scenario_data) in dictScenarios\n    solution = solve_economic_dispatch(dictThermalGeneartors, dictWindTurbines, scenario_data)\n    push!(results_df, (scenario_name, solution.total_cost, solution.wind_curtailment))\nend\n\n# Print the dataframe\nprintln(\"\\nResults for all scenarios:\")\nprintln(results_df)\n\nWhat is the problem in scenario “S5” with the assumptions made in the ED problem leading to an inefficient usage of wind turbines?\n\n# YOUR ANSWER HERE\n\n\n\n\nSolutions\nYou will likely find solutions to most exercises online. However, I strongly encourage you to work on these exercises independently without searching explicitly for the exact answers to the exercises. Understanding someone else’s solution is very different from developing your own. Use the lecture notes and try to solve the exercises on your own. This approach will significantly enhance your learning and problem-solving skills.\nRemember, the goal is not just to complete the exercises, but to understand the concepts and improve your programming abilities. If you encounter difficulties, review the lecture materials, experiment with different approaches, and don’t hesitate to ask for clarification during class discussions.\nLater, you will find the solutions to these exercises online in the associated GitHub repository, but we will also quickly go over them in next week’s tutorial. To access the solutions, click on the Github button on the lower right and search for the folder with today’s lecture and tutorial. Alternatively, you can ask ChatGPT or Claude to explain them to you. But please remember, the goal is not just to complete the exercises, but to understand the concepts and improve your programming abilities.",
    "crumbs": [
      "05 Dispatch",
      "Tutorial"
    ]
  },
  {
    "objectID": "part-06/tutorial-commitment.html",
    "href": "part-06/tutorial-commitment.html",
    "title": "Tutorial VI - Unit Commitment Problem",
    "section": "",
    "text": "Implement the Unit Commitment problem from the lecture in Julia. Before we start, let’s load the necessary packages and data.\n\nusing JuMP, HiGHS\nusing CSV\nusing DataFrames\nusing Plots\nusing Dates\n\nNow, let’s load the data. The generator data includes additional parameters for UC, and the scenario data now includes timestamps and hourly values.\n\n# Get the directory of the current file\nfile_directory = \"$(@__DIR__)/data\"\n\n# Load the data of the thermal generators\ngenerators = CSV.read(\"$file_directory/generator.csv\", DataFrame)\nprintln(\"Number of generators: $(nrow(generators))\")\nprintln(\"First 5 rows of available generators:\")\nprintln(generators[1:5, :])\n\nNumber of generators: 6\nFirst 5 rows of available generators:\n5×10 DataFrame\n Row │ name     min_power  max_power  variable_cost  fix_cost  min_up_time  mi ⋯\n     │ String3  Int64      Int64      Int64          Int64     Int64        In ⋯\n─────┼──────────────────────────────────────────────────────────────────────────\n   1 │ G1             100        500             50      1000            4     ⋯\n   2 │ G2              50        350             60      1200            2\n   3 │ G3              40        250             55      1300            1\n   4 │ G4              30        200             70      1500            4\n   5 │ G5              30        200             60      1500            4     ⋯\n                                                               4 columns omitted\n\n\n\n# Load the data of the wind turbines\nwindTurbines = CSV.read(\"$file_directory/windTurbine.csv\", DataFrame)\nprintln(\"Number of wind turbines: $(nrow(windTurbines))\")\nprintln(\"Variable cost per wind turbine:\")\nprintln(windTurbines)\n\nNumber of wind turbines: 1\nVariable cost per wind turbine:\n1×2 DataFrame\n Row │ name     variable_cost \n     │ String3  Int64         \n─────┼────────────────────────\n   1 │ T1                  50\n\n\n\n# Load the scenario data about the demand and wind forecast\nscenarios = CSV.read(\"$file_directory/scenario.csv\", DataFrame)\nprintln(\"First 5 rows of scenarios:\")\nprintln(scenarios[1:5, :])\nprintln(\"Loaded scenarios:\")\nprintln(Vector{String}(unique(scenarios.scenario)))\n\nFirst 5 rows of scenarios:\n5×4 DataFrame\n Row │ scenario  datetime             demand_forecast  wind_forecast \n     │ String3   String31             Int64            Int64         \n─────┼───────────────────────────────────────────────────────────────\n   1 │ S1        2024-01-01 00:00:00              800            200\n   2 │ S1        2024-01-01 01:00:00              750            180\n   3 │ S1        2024-01-01 02:00:00              700            150\n   4 │ S1        2024-01-01 03:00:00              650            120\n   5 │ S1        2024-01-01 04:00:00              600            100\nLoaded scenarios:\n[\"S1\"]\n\n\nNext, prepare the data structures for the model. We’ll create NamedTuples for generators, wind turbines, and scenarios:\n\n# This function creates the Named Tuple ThermalGenerator\n# It stores all parameters needed for a thermal generator in the UC problem:\n# - min/max: minimum and maximum power output\n# - fixed_cost: cost per hour when the generator is running\n# - variable_cost: cost per MWh of power produced\n# - min_up_time: minimum number of hours the generator must stay on once started\n# - min_down_time: minimum number of hours the generator must stay off once shut down\n# - ramp_up/down: maximum power change between consecutive hours\n# - startup_cost: one-time cost when starting the generator\nfunction ThermalGenerator(\n    min::Int64,\n    max::Int64,\n    fixed_cost::Int64,\n    variable_cost::Int64,\n    min_up_time::Int64,\n    min_down_time::Int64,\n    ramp_up::Int64,\n    ramp_down::Int64,\n    startup_cost::Int64\n)\n    return (\n        min = min,\n        max = max,\n        fixed_cost = fixed_cost,\n        variable_cost = variable_cost,\n        min_up_time = min_up_time,\n        min_down_time = min_down_time,\n        ramp_up = ramp_up,\n        ramp_down = ramp_down,\n        startup_cost = startup_cost\n    )\nend\n\n# Create dictionaries for the data\n# Each generator's parameters are stored in a NamedTuple for easy access\ndictThermalGenerators = Dict(row.name =&gt; ThermalGenerator(\n    row.min_power, row.max_power, row.fix_cost, row.variable_cost,\n    row.min_up_time, row.min_down_time, row.ramp_up, row.ramp_down,\n    row.startup_cost\n) for row in eachrow(generators))\n\n# Create dictionary for wind turbines\n# Wind turbines only have variable costs as they don't have startup/shutdown constraints\ndictWindTurbines = Dict(row.name =&gt; (variable_cost = row.variable_cost,) for row in eachrow(windTurbines))\n\n# Create dictionary for scenarios\n# Each scenario contains time series data for demand and wind forecasts\ndate_format = dateformat\"yyyy-mm-dd HH:MM:SS\"\ndictScenarios = Dict()\nfor scenario in unique(scenarios.scenario)\n    scenario_data = scenarios[scenarios.scenario .== scenario, :]\n    dictScenarios[scenario] = (\n        datetime = DateTime.(scenario_data.datetime, date_format),\n        demand_forecast = scenario_data.demand_forecast,\n        wind_forecast = scenario_data.wind_forecast\n    )\nend",
    "crumbs": [
      "06 Commitment",
      "Tutorial"
    ]
  },
  {
    "objectID": "part-06/tutorial-commitment.html#task-implement-startup-variables-and-costs",
    "href": "part-06/tutorial-commitment.html#task-implement-startup-variables-and-costs",
    "title": "Tutorial VI - Unit Commitment Problem",
    "section": "Task: Implement Startup Variables and Costs",
    "text": "Task: Implement Startup Variables and Costs\n\nWe need to add a binary variable v_g[g,t] that equals 1 if generator g is started up at time t, and 0 otherwise.\nThe startup cost should be included in the objective function.\nWe need to link the startup variable to the generator status variable u_g[g,t].\n\nThe relationship between v_g and u_g is: If a generator is off at t-1 (u_g[g,t-1] = 0) and on at t (u_g[g,t] = 1), then it must have been started up (v_g[g,t] = 1).\nHow can this be expressed?\n\n## YOUR ANSWER HERE\n\n\nNow, let’s implement the Unit Commitment model in a function:\n\nfunction solve_unit_commitment(dictThermalGenerators::Dict, dictWindTurbines::Dict, scenario)\n    # Create the model\n    model = Model(HiGHS.Optimizer)\n    set_silent(model)\n    \n    # Define the time periods and sets\n    T = 1:length(scenario.datetime)  # Time periods (hours)\n    G = keys(dictThermalGenerators)  # Set of thermal generators\n    W = keys(dictWindTurbines)       # Set of wind turbines\n    \n    # Define variables\n    @variable(model, p_g[g in G, t in T] &gt;= 0)  # Power output of generators [MW]\n    @variable(model, p_w[w in W, t in T] &gt;= 0)  # Power output of wind turbines [MW]\n    @variable(model, u_g[g in G, t in T], Bin)  # Binary variable for generator status (1=on, 0=off)\n    @variable(model, v_g[g in G, t in T], Bin)  # Binary variable for startup (1=startup, 0=no startup)\n    \n    # Objective function: Minimize total costs\n    # Costs include:\n    # 1. Variable costs for power production\n    # 2. Fixed costs when generator is running\n    # 3. Startup costs when generator is started\n    # 4. Variable costs for wind power\n    ## YOUR CODE HERE\n\n    \n    # Power balance constraint: Total generation must equal demand\n    ## YOUR CODE HERE\n\n    \n    # Generator limits: Power output must be within min/max when running\n    ## YOUR CODE HERE\n\n    \n    # Wind limits: Wind power cannot exceed forecast\n    ## YOUR CODE HERE\n\n    \n    # Minimum up time: Generator must stay on for minimum duration after startup\n    ## Tip: Use the startup variable v_g to enforce the minimum up time\n    ## YOUR CODE HERE\n\n    \n    # Minimum down time: Generator must stay off for minimum duration after shutdown\n    ## Tip: Use the startup variable v_g to enforce the minimum down time\n    ## YOUR CODE HERE\n\n    \n    # Ramp rate limits: Power change between consecutive hours is limited\n    ## YOUR CODE HERE\n\n    \n    # Startup variable definition: v_g[g,t] = 1 if generator g is started at time t\n    ## YOUR CODE HERE\n\n    \n    # Solve the model\n    optimize!(model)\n    \n    # Return results\n    return (\n        p_g = value.(p_g),      # Generator power output\n        p_w = value.(p_w),      # Wind power output\n        u_g = value.(u_g),      # Generator status\n        v_g = value.(v_g),      # Startup events\n        total_cost = objective_value(model)\n    )\nend",
    "crumbs": [
      "06 Commitment",
      "Tutorial"
    ]
  },
  {
    "objectID": "part-06/lecture-commitment.html",
    "href": "part-06/lecture-commitment.html",
    "title": "Lecture VI - Unit Commitment Problem",
    "section": "",
    "text": "NamedTuples are immutable collections of key-value pairs\nThey provide a convenient way to group related data\nCan be created using a function that returns a tuple with named fields\n\n# Example: Creating a NamedTuple for a student\nfunction Student(name::String, age::Int, grade::Float64)\n    return (name = name, age = age, grade = grade)\nend\n\n# Create a dictionary of students\nstudents = Dict(\n    \"Alice\" =&gt; Student(\"Alice\", 20, 3.7),\n    \"Bob\" =&gt; Student(\"Bob\", 21, 3.5)\n)\n\n# Access data using dot notation\nprintln(students[\"Alice\"].grade)  # Output: 3.7\n\n\n\n\nEncapsulate optimization models in functions for reusability\nReturn results as NamedTuples for easy access\nStore results in DataFrames for analysis\n\n# Example data for different scenarios\ndata = Dict(\n    \"base\" =&gt; Dict(\n        \"cost\" =&gt; 10.0,\n        \"limit\" =&gt; 100.0\n    ),\n    \"high_cost\" =&gt; Dict(\n        \"cost\" =&gt; 15.0,\n        \"limit\" =&gt; 100.0\n    ),\n    \"low_limit\" =&gt; Dict(\n        \"cost\" =&gt; 10.0,\n        \"limit\" =&gt; 50.0\n    )\n)\n\n# Example: Function to solve a simple optimization problem\nfunction solve_optimization(data::Dict)\n    model = Model(HiGHS.Optimizer)\n    set_silent(model)\n    \n    # Define variables and solve model\n    @variable(model, x &gt;= 0)\n    @objective(model, Min, data[\"cost\"] * x)\n    @constraint(model, x &lt;= data[\"limit\"])\n    optimize!(model)\n    \n    # Return results as NamedTuple\n    return (\n        solution = value(x),\n        objective = objective_value(model)\n    )\nend\n\n# Store results in DataFrame\nresults = DataFrame(\n    scenario = String[],\n    solution = Float64[],\n    objective = Float64[]\n)\n\n# Solve multiple scenarios\nfor (name, scenario_data) in data\n    solution = solve_optimization(scenario_data)\n    push!(results, (name, solution.solution, solution.objective))\nend\n\n\n\n\nObjective: Minimize total generation cost\nDecision Variables:\n\nPower output of thermal generators (\\(p_g\\))\nPower output of wind turbines (\\(p_w\\))\n\nKey Constraints:\n\nPower balance: \\(\\sum_g p_g + \\sum_w p_w = d^f\\)\nGenerator limits: \\(p^{\\min}_g \\leq p_g \\leq p^{\\max}_g\\)\nWind limits: \\(0 \\leq p_w \\leq p^f_w\\)\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe Economic Dispatch problem optimizes power generation for a single time step, assuming all generators are already committed to operation.\n\n\n\n\n\nLimitations of Economic Dispatch: - Assumes generators are already running - Ignores start-up and shut-down costs - Doesn’t consider minimum up/down times - Single time step optimization\nUnit Commitment Solution: - Adds binary variables for generator on/off status - Considers multiple time steps - Includes start-up/shut-down costs - Enforces minimum up/down time, ramping, etc. constraints - More realistic but computationally more complex\n\n\n\n\n\n\nTip\n\n\n\nUnit Commitment extends Economic Dispatch by adding operational constraints and time-dependent decisions.\n\n\n\n\n\n\nThe tutorials from last week will again be available on Friday\nYou can access them in the project folder on Github\nClick on the little cat icon on the bottom right\n\n. . .\n\n\n\n\n\n\nTip\n\n\n\nYou can ask questions anytime in class or via email!",
    "crumbs": [
      "06 Commitment",
      "Lecture"
    ]
  },
  {
    "objectID": "part-06/lecture-commitment.html#namedtuples-in-julia",
    "href": "part-06/lecture-commitment.html#namedtuples-in-julia",
    "title": "Lecture VI - Unit Commitment Problem",
    "section": "",
    "text": "NamedTuples are immutable collections of key-value pairs\nThey provide a convenient way to group related data\nCan be created using a function that returns a tuple with named fields\n\n# Example: Creating a NamedTuple for a student\nfunction Student(name::String, age::Int, grade::Float64)\n    return (name = name, age = age, grade = grade)\nend\n\n# Create a dictionary of students\nstudents = Dict(\n    \"Alice\" =&gt; Student(\"Alice\", 20, 3.7),\n    \"Bob\" =&gt; Student(\"Bob\", 21, 3.5)\n)\n\n# Access data using dot notation\nprintln(students[\"Alice\"].grade)  # Output: 3.7",
    "crumbs": [
      "06 Commitment",
      "Lecture"
    ]
  },
  {
    "objectID": "part-06/lecture-commitment.html#model-solving-function-pattern",
    "href": "part-06/lecture-commitment.html#model-solving-function-pattern",
    "title": "Lecture VI - Unit Commitment Problem",
    "section": "",
    "text": "Encapsulate optimization models in functions for reusability\nReturn results as NamedTuples for easy access\nStore results in DataFrames for analysis\n\n# Example data for different scenarios\ndata = Dict(\n    \"base\" =&gt; Dict(\n        \"cost\" =&gt; 10.0,\n        \"limit\" =&gt; 100.0\n    ),\n    \"high_cost\" =&gt; Dict(\n        \"cost\" =&gt; 15.0,\n        \"limit\" =&gt; 100.0\n    ),\n    \"low_limit\" =&gt; Dict(\n        \"cost\" =&gt; 10.0,\n        \"limit\" =&gt; 50.0\n    )\n)\n\n# Example: Function to solve a simple optimization problem\nfunction solve_optimization(data::Dict)\n    model = Model(HiGHS.Optimizer)\n    set_silent(model)\n    \n    # Define variables and solve model\n    @variable(model, x &gt;= 0)\n    @objective(model, Min, data[\"cost\"] * x)\n    @constraint(model, x &lt;= data[\"limit\"])\n    optimize!(model)\n    \n    # Return results as NamedTuple\n    return (\n        solution = value(x),\n        objective = objective_value(model)\n    )\nend\n\n# Store results in DataFrame\nresults = DataFrame(\n    scenario = String[],\n    solution = Float64[],\n    objective = Float64[]\n)\n\n# Solve multiple scenarios\nfor (name, scenario_data) in data\n    solution = solve_optimization(scenario_data)\n    push!(results, (name, solution.solution, solution.objective))\nend",
    "crumbs": [
      "06 Commitment",
      "Lecture"
    ]
  },
  {
    "objectID": "part-06/lecture-commitment.html#economic-dispatch-problem-recap",
    "href": "part-06/lecture-commitment.html#economic-dispatch-problem-recap",
    "title": "Lecture VI - Unit Commitment Problem",
    "section": "",
    "text": "Objective: Minimize total generation cost\nDecision Variables:\n\nPower output of thermal generators (\\(p_g\\))\nPower output of wind turbines (\\(p_w\\))\n\nKey Constraints:\n\nPower balance: \\(\\sum_g p_g + \\sum_w p_w = d^f\\)\nGenerator limits: \\(p^{\\min}_g \\leq p_g \\leq p^{\\max}_g\\)\nWind limits: \\(0 \\leq p_w \\leq p^f_w\\)\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe Economic Dispatch problem optimizes power generation for a single time step, assuming all generators are already committed to operation.",
    "crumbs": [
      "06 Commitment",
      "Lecture"
    ]
  },
  {
    "objectID": "part-06/lecture-commitment.html#from-economic-dispatch-to-unit-commitment",
    "href": "part-06/lecture-commitment.html#from-economic-dispatch-to-unit-commitment",
    "title": "Lecture VI - Unit Commitment Problem",
    "section": "",
    "text": "Limitations of Economic Dispatch: - Assumes generators are already running - Ignores start-up and shut-down costs - Doesn’t consider minimum up/down times - Single time step optimization\nUnit Commitment Solution: - Adds binary variables for generator on/off status - Considers multiple time steps - Includes start-up/shut-down costs - Enforces minimum up/down time, ramping, etc. constraints - More realistic but computationally more complex\n\n\n\n\n\n\nTip\n\n\n\nUnit Commitment extends Economic Dispatch by adding operational constraints and time-dependent decisions.",
    "crumbs": [
      "06 Commitment",
      "Lecture"
    ]
  },
  {
    "objectID": "part-06/lecture-commitment.html#solutions-from-last-week",
    "href": "part-06/lecture-commitment.html#solutions-from-last-week",
    "title": "Lecture VI - Unit Commitment Problem",
    "section": "",
    "text": "The tutorials from last week will again be available on Friday\nYou can access them in the project folder on Github\nClick on the little cat icon on the bottom right\n\n. . .\n\n\n\n\n\n\nTip\n\n\n\nYou can ask questions anytime in class or via email!",
    "crumbs": [
      "06 Commitment",
      "Lecture"
    ]
  },
  {
    "objectID": "part-06/lecture-commitment.html#power-system-basic-models-unit-commitment",
    "href": "part-06/lecture-commitment.html#power-system-basic-models-unit-commitment",
    "title": "Lecture VI - Unit Commitment Problem",
    "section": "Power System Basic Models: Unit Commitment",
    "text": "Power System Basic Models: Unit Commitment\n\n\n\n\nPower system with generators and an aggregated demand\n\nGenerators can be switched on/off to meet the demand\nGenerators have different costs and operational constraints\nDecisions are made over multiple time steps",
    "crumbs": [
      "06 Commitment",
      "Lecture"
    ]
  },
  {
    "objectID": "part-06/lecture-commitment.html#unit-commitment-problem",
    "href": "part-06/lecture-commitment.html#unit-commitment-problem",
    "title": "Lecture VI - Unit Commitment Problem",
    "section": "Unit Commitment Problem",
    "text": "Unit Commitment Problem\n\nObjective: Minimize the total cost of producing electricity\nConstraints:\n\nDemand must be met\nGenerators have limits on their power output\nRenewable power injection\nGenerator on/off status\nMinimum up/down times\nRamp rate limits\n\nDecision variables:\n\nPower output of thermal generators\nPower output of renewables\nBinary variables for generator status",
    "crumbs": [
      "06 Commitment",
      "Lecture"
    ]
  },
  {
    "objectID": "part-06/lecture-commitment.html#section",
    "href": "part-06/lecture-commitment.html#section",
    "title": "Lecture VI - Unit Commitment Problem",
    "section": "",
    "text": "How does the mathematical model look like?",
    "crumbs": [
      "06 Commitment",
      "Lecture"
    ]
  },
  {
    "objectID": "part-06/lecture-commitment.html#available-sets",
    "href": "part-06/lecture-commitment.html#available-sets",
    "title": "Lecture VI - Unit Commitment Problem",
    "section": "Available Sets",
    "text": "Available Sets\nQuestion: What are the sets we need?\n. . .\n\n\\(\\mathcal{G}\\) - Set of thermal generators indexed by \\(g \\in \\{1,2,...,|\\mathcal{G}|\\}\\)\n\\(\\mathcal{W}\\) - Set of wind turbines indexed by \\(w \\in \\{1,2,...,|\\mathcal{W}|\\}\\)\n\\(\\mathcal{T}\\) - Set of time periods indexed by \\(t \\in \\{1,2,...,|\\mathcal{T}|\\}\\)",
    "crumbs": [
      "06 Commitment",
      "Lecture"
    ]
  },
  {
    "objectID": "part-06/lecture-commitment.html#available-parameters",
    "href": "part-06/lecture-commitment.html#available-parameters",
    "title": "Lecture VI - Unit Commitment Problem",
    "section": "Available Parameters",
    "text": "Available Parameters\nQuestion: What are possible parameters?\n. . .\n\n\\(C^{var}_g\\) - Variable cost of thermal generator \\(g\\in\\mathcal{G}\\) in [\\(EUR/\\text{MWh}\\)]\n\\(C^{fix}_g\\) - Fixed cost of thermal generator \\(g\\in\\mathcal{G}\\) in [\\(EUR\\)]\n\\(C^{var}_w\\) - Cost of wind turbine \\(w\\in\\mathcal{W}\\) in [\\(EUR/\\text{MWh}\\)]\n\\(P^{\\min}_g\\) - Minimum power output of thermal generator \\(g\\in\\mathcal{G}\\) in [MW]\n\\(P^{\\max}_g\\) - Maximum power output of thermal generator \\(g\\in\\mathcal{G}\\) in [MW]\n\\(P^{f}_{w,t}\\) - Forecasted power output of wind turbine \\(w\\in\\mathcal{W}\\) at time \\(t\\) in [MW]\n\\(D^f_t\\) - Forecasted demand at time \\(t\\) in [MW]\n\\(T^{up}_g\\) - Minimum up time of generator \\(g\\in\\mathcal{G}\\) in [h]\n\\(T^{down}_g\\) - Minimum down time of generator \\(g\\in\\mathcal{G}\\) in [h]\n\\(R^{up}_g\\) - Maximum ramp-up rate of generator \\(g\\in\\mathcal{G}\\) in [MW/h]\n\\(R^{down}_g\\) - Maximum ramp-down rate of generator \\(g\\in\\mathcal{G}\\) in [MW/h]",
    "crumbs": [
      "06 Commitment",
      "Lecture"
    ]
  },
  {
    "objectID": "part-06/lecture-commitment.html#decision-variables",
    "href": "part-06/lecture-commitment.html#decision-variables",
    "title": "Lecture VI - Unit Commitment Problem",
    "section": "Decision Variables",
    "text": "Decision Variables\n\n\\(p_{g,t}\\) - Power output of thermal generator \\(g\\in\\mathcal{G}\\) at time \\(t\\)\n\\(p_{w,t}\\) - Power injection of wind turbine \\(w\\in\\mathcal{W}\\) at time \\(t\\)\n\\(u_{g,t}\\) - Binary variable indicating if generator \\(g\\in\\mathcal{G}\\) is on at time \\(t\\)",
    "crumbs": [
      "06 Commitment",
      "Lecture"
    ]
  },
  {
    "objectID": "part-06/lecture-commitment.html#objective-function",
    "href": "part-06/lecture-commitment.html#objective-function",
    "title": "Lecture VI - Unit Commitment Problem",
    "section": "Objective Function",
    "text": "Objective Function\n\\(\\text{Minimize} \\quad \\sum_{t \\in \\mathcal{T}} \\left( \\sum_{g \\in \\mathcal{G}} (C^{var}_g p_{g,t} + C^{fix}_g u_{g,t}) + \\sum_{w \\in \\mathcal{W}} C^{var}_w p_{w,t} \\right)\\)\n\n\n\n\n\n\nThe objective includes:\n\n\n\n\nVariable costs for power generation (\\(C^{var}_g p_{g,t}\\)): Cost per hour of electricity produced\nFixed costs for keeping generators on (\\(C^{fix}_g u_{g,t}\\)): Cost of maintaining a generator in operation\nWind power costs (\\(C^{var}_w p_{w,t}\\)): Variable costs per hour for wind power production",
    "crumbs": [
      "06 Commitment",
      "Lecture"
    ]
  },
  {
    "objectID": "part-06/lecture-commitment.html#power-balance-constraints",
    "href": "part-06/lecture-commitment.html#power-balance-constraints",
    "title": "Lecture VI - Unit Commitment Problem",
    "section": "Power Balance Constraints",
    "text": "Power Balance Constraints\n\\(\\sum_{g \\in \\mathcal{G}} p_{g,t} + \\sum_{w \\in \\mathcal{W}} p_{w,t} = D^f_t \\quad \\forall t \\in \\mathcal{T}\\)\n\n\n\n\n\n\nTip\n\n\n\nThis constraint ensures that at each time step \\(t\\): - The sum of all thermal generator outputs (\\(\\sum_{g \\in \\mathcal{G}} p_{g,t}\\)) - Plus all wind power outputs (\\(\\sum_{w \\in \\mathcal{W}} p_{w,t}\\)) - Must exactly match the forecasted demand (\\(D^f_t\\))",
    "crumbs": [
      "06 Commitment",
      "Lecture"
    ]
  },
  {
    "objectID": "part-06/lecture-commitment.html#generator-limits-constraints",
    "href": "part-06/lecture-commitment.html#generator-limits-constraints",
    "title": "Lecture VI - Unit Commitment Problem",
    "section": "Generator Limits Constraints",
    "text": "Generator Limits Constraints\n\\(P^{\\min}_g u_{g,t} \\leq p_{g,t} \\leq P^{\\max}_g u_{g,t} \\quad \\forall g \\in \\mathcal{G}, t \\in \\mathcal{T}\\)\n\n\n\n\n\n\nTip\n\n\n\nFor each generator \\(g\\) at time \\(t\\): - If the generator is on (\\(u_{g,t} = 1\\)), its output must be between minimum (\\(P^{\\min}_g\\)) and maximum (\\(P^{\\max}_g\\)) power - If the generator is off (\\(u_{g,t} = 0\\)), its output must be zero - The binary variable \\(u_{g,t}\\) ensures these limits are enforced",
    "crumbs": [
      "06 Commitment",
      "Lecture"
    ]
  },
  {
    "objectID": "part-06/lecture-commitment.html#wind-power-injection-constraints",
    "href": "part-06/lecture-commitment.html#wind-power-injection-constraints",
    "title": "Lecture VI - Unit Commitment Problem",
    "section": "Wind Power Injection Constraints",
    "text": "Wind Power Injection Constraints\n\\(0 \\leq p_{w,t} \\leq P^f_{w,t} \\quad \\forall w \\in \\mathcal{W}, t \\in \\mathcal{T}\\)\n\n\n\n\n\n\nTip\n\n\n\nFor each wind turbine \\(w\\) at time \\(t\\): - Power output must be non-negative - Cannot exceed the forecasted available wind power (\\(P^f_{w,t}\\)) - Unlike thermal generators, wind turbines don’t have binary variables as the power injection is controllable between 0 and the forecasted available wind power",
    "crumbs": [
      "06 Commitment",
      "Lecture"
    ]
  },
  {
    "objectID": "part-06/lecture-commitment.html#minimum-updown-time-constraints",
    "href": "part-06/lecture-commitment.html#minimum-updown-time-constraints",
    "title": "Lecture VI - Unit Commitment Problem",
    "section": "Minimum Up/Down Time Constraints",
    "text": "Minimum Up/Down Time Constraints\n\\(u_{g,t} - u_{g,t-1} \\leq u_{g,\\tau} \\quad \\forall g \\in \\mathcal{G}, t \\in \\mathcal{T}, \\tau \\in [t+1, \\min(t+T^{up}_g-1,|\\mathcal{T}|)]\\)\n\\(u_{g,t-1} - u_{g,t} \\leq 1 - u_{g,\\tau} \\quad \\forall g \\in \\mathcal{G}, t \\in \\mathcal{T}, \\tau \\in [t+1, \\min(t+T^{down}_g-1,|\\mathcal{T}|)]\\)\n\n\n\n\n\n\nTip\n\n\n\nThese constraints enforce minimum operating times: - First equation: If a generator starts up at time \\(t\\), it must stay on for at least \\(T^{up}_g\\) time periods - Second equation: If a generator shuts down at time \\(t\\), it must stay off for at least \\(T^{down}_g\\) time periods - \\(\\tau\\) represents the time periods during which these constraints must be enforced",
    "crumbs": [
      "06 Commitment",
      "Lecture"
    ]
  },
  {
    "objectID": "part-06/lecture-commitment.html#ramp-rate-constraints",
    "href": "part-06/lecture-commitment.html#ramp-rate-constraints",
    "title": "Lecture VI - Unit Commitment Problem",
    "section": "Ramp Rate Constraints",
    "text": "Ramp Rate Constraints\n\\(p_{g,t} - p_{g,t-1} \\leq R^{up}_g \\quad \\forall g \\in \\mathcal{G}, t \\in \\mathcal{T}\\)\n\\(p_{g,t-1} - p_{g,t} \\leq R^{down}_g \\quad \\forall g \\in \\mathcal{G}, t \\in \\mathcal{T}\\)\n\n\n\n\n\n\nTip\n\n\n\nThese constraints limit how quickly generators can change their output: - First equation: Power increase between consecutive time steps cannot exceed ramp-up rate \\(R^{up}_g\\) - Second equation: Power decrease between consecutive time steps cannot exceed ramp-down rate \\(R^{down}_g\\) - Prevents sudden changes in generator output that could damage equipment",
    "crumbs": [
      "06 Commitment",
      "Lecture"
    ]
  },
  {
    "objectID": "part-06/lecture-commitment.html#complete-unit-commitment-model",
    "href": "part-06/lecture-commitment.html#complete-unit-commitment-model",
    "title": "Lecture VI - Unit Commitment Problem",
    "section": "Complete Unit Commitment Model",
    "text": "Complete Unit Commitment Model\n\\(\\text{Minimize} \\quad \\sum_{t \\in \\mathcal{T}} \\left( \\sum_{g \\in \\mathcal{G}} (C^{var}_g p_{g,t} + C^{fix}_g u_{g,t}) + \\sum_{w \\in \\mathcal{W}} C^{var}_w p_{w,t} \\right)\\)\nsubject to\n\\(\\sum_{g \\in \\mathcal{G}} p_{g,t} + \\sum_{w \\in \\mathcal{W}} p_{w,t} = D^f_t \\quad \\forall t \\in \\mathcal{T}\\)\n\\(P^{\\min}_g u_{g,t} \\leq p_{g,t} \\leq P^{\\max}_g u_{g,t} \\quad \\forall g \\in \\mathcal{G}, t \\in \\mathcal{T}\\)\n\\(0 \\leq p_{w,t} \\leq P^f_{w,t} \\quad \\forall w \\in \\mathcal{W}, t \\in \\mathcal{T}\\)\n\\(u_{g,t} - u_{g,t-1} \\leq u_{g,\\tau} \\quad \\forall g \\in \\mathcal{G}, t \\in \\mathcal{T}, \\tau \\in [t+1, \\min(t+T^{up}_g-1,|\\mathcal{T}|)]\\)\n\\(u_{g,t-1} - u_{g,t} \\leq 1 - u_{g,\\tau} \\quad \\forall g \\in \\mathcal{G}, t \\in \\mathcal{T}, \\tau \\in [t+1, \\min(t+T^{down}_g-1,|\\mathcal{T}|)]\\)\n\\(p_{g,t} - p_{g,t-1} \\leq R^{up}_g \\quad \\forall g \\in \\mathcal{G}, t \\in \\mathcal{T}\\)\n\\(p_{g,t-1} - p_{g,t} \\leq R^{down}_g \\quad \\forall g \\in \\mathcal{G}, t \\in \\mathcal{T}\\)\n\\(u_{g,t} \\in \\{0,1\\} \\quad \\forall g \\in \\mathcal{G}, t \\in \\mathcal{T}\\)",
    "crumbs": [
      "06 Commitment",
      "Lecture"
    ]
  },
  {
    "objectID": "part-06/lecture-commitment.html#model-type",
    "href": "part-06/lecture-commitment.html#model-type",
    "title": "Lecture VI - Unit Commitment Problem",
    "section": "Model Type",
    "text": "Model Type\nQuestion: What type of optimization problem is this?\n. . .\n\nMixed-Integer Linear Programming (MILP)\nBinary variables for generator status\nLinear constraints and objective\nTime-dependent decisions",
    "crumbs": [
      "06 Commitment",
      "Lecture"
    ]
  },
  {
    "objectID": "part-06/lecture-commitment.html#solution-methods",
    "href": "part-06/lecture-commitment.html#solution-methods",
    "title": "Lecture VI - Unit Commitment Problem",
    "section": "Solution Methods",
    "text": "Solution Methods\nQuestion: How can we solve this problem?\n. . .\n\nBranch and Bound algorithm\nCommercial solvers (Gurobi, CPLEX)\nOpen-source solvers (HiGHS)\nDecomposition methods for large problems",
    "crumbs": [
      "06 Commitment",
      "Lecture"
    ]
  },
  {
    "objectID": "part-06/lecture-commitment.html#computational-challenges",
    "href": "part-06/lecture-commitment.html#computational-challenges",
    "title": "Lecture VI - Unit Commitment Problem",
    "section": "Computational Challenges",
    "text": "Computational Challenges\nQuestion: What makes this problem challenging?\n. . .\n\nLarge number of binary variables\nTime-dependent inter-temporal constraints\nMinimum up/down time constraints\nRamp rate constraints\nMultiple time periods",
    "crumbs": [
      "06 Commitment",
      "Lecture"
    ]
  },
  {
    "objectID": "part-06/lecture-commitment.html#real-world-applications",
    "href": "part-06/lecture-commitment.html#real-world-applications",
    "title": "Lecture VI - Unit Commitment Problem",
    "section": "Real-World Applications",
    "text": "Real-World Applications\n\nGeneration scheduling\nDay-ahead market clearing\nAncillary services\nReserve capacity planning",
    "crumbs": [
      "06 Commitment",
      "Lecture"
    ]
  },
  {
    "objectID": "part-06/lecture-commitment.html#further-extensions",
    "href": "part-06/lecture-commitment.html#further-extensions",
    "title": "Lecture VI - Unit Commitment Problem",
    "section": "Further Extensions",
    "text": "Further Extensions\n\nBattery storage\nDemand response\nNetwork constraints\nReserve requirements\nMultiple fuel types\nEmission constraints\nUncertainty in forecasts\n\n\n\n\n\n\n\nAnd that’s it for today’s lecture!\n\n\n\nWe have covered the Unit Commitment problem and its mathematical formulation. The tutorial will help you implement and solve this problem using Julia and JuMP.",
    "crumbs": [
      "06 Commitment",
      "Lecture"
    ]
  },
  {
    "objectID": "part-06/lecture-commitment.html#section-1",
    "href": "part-06/lecture-commitment.html#section-1",
    "title": "Lecture VI - Unit Commitment Problem",
    "section": "",
    "text": "Questions?",
    "crumbs": [
      "06 Commitment",
      "Lecture"
    ]
  },
  {
    "objectID": "part-06/lecture-commitment.html#literature-i",
    "href": "part-06/lecture-commitment.html#literature-i",
    "title": "Lecture VI - Unit Commitment Problem",
    "section": "Literature I",
    "text": "Literature I\nFor more interesting literature to learn more about Julia, take a look at the literature list of this course.",
    "crumbs": [
      "06 Commitment",
      "Lecture"
    ]
  },
  {
    "objectID": "part-06/lecture-commitment.html#literature-ii",
    "href": "part-06/lecture-commitment.html#literature-ii",
    "title": "Lecture VI - Unit Commitment Problem",
    "section": "Literature II",
    "text": "Literature II\nFor a detailed mathematical formulation of the Unit Commitment problem, see Morales-Espana, Latorre, and Ramos (2013) and Zimmermann and Kather (2019).",
    "crumbs": [
      "06 Commitment",
      "Lecture"
    ]
  },
  {
    "objectID": "part-06/tutorial-commitment.html#now-lets-solve-the-model-for-all-scenarios-and-store-the-results",
    "href": "part-06/tutorial-commitment.html#now-lets-solve-the-model-for-all-scenarios-and-store-the-results",
    "title": "Tutorial VI - Unit Commitment Problem",
    "section": "Now, let’s solve the model for all scenarios and store the results:",
    "text": "Now, let’s solve the model for all scenarios and store the results:\n\n# Create a dataframe to store results\nresults_df = DataFrame(\n    scenario = String[],            # Scenario identifier\n    datetime = DateTime[],          # Timestamp\n    total_cost = Float64[],         # Total system cost\n    wind_curtailment = Float64[],   # Curtailed wind power\n    thermal_generation = Float64[], # Total thermal generation\n    wind_generation = Float64[]     # Total wind generation\n)\n\n# Loop over scenarios\nfor (scenario_name, scenario_data) in dictScenarios\n    solution = solve_unit_commitment(dictThermalGenerators, dictWindTurbines, scenario_data)\n    \n    # Store results for each time period\n    for t in 1:length(scenario_data.datetime)\n        push!(results_df, (\n            scenario_name,\n            scenario_data.datetime[t],\n            solution.total_cost,\n            sum(scenario_data.wind_forecast[t] - solution.p_w[w,t] for w in keys(dictWindTurbines)),\n            sum(solution.p_g[g,t] for g in keys(dictThermalGenerators)),\n            sum(solution.p_w[w,t] for w in keys(dictWindTurbines))\n        ))\n    end\nend",
    "crumbs": [
      "06 Commitment",
      "Tutorial"
    ]
  },
  {
    "objectID": "part-06/tutorial-commitment.html#finally-lets-plot-the-results",
    "href": "part-06/tutorial-commitment.html#finally-lets-plot-the-results",
    "title": "Tutorial VI - Unit Commitment Problem",
    "section": "Finally, let’s plot the results:",
    "text": "Finally, let’s plot the results:\nWe only have one scenario, so we can plot the results for that scenario like this:\n\n# Format datetime to show only hours\nhours = hour.(results_df.datetime)\n\n# Plot generation over time\nplot(hours, results_df.thermal_generation, \n    label=\"Thermal Generation\", xlabel=\"Time\", ylabel=\"Power [MW]\")\nplot!(hours, results_df.wind_generation, \n    label=\"Wind Generation\")\nplot!(hours, results_df.wind_curtailment, \n    label=\"Wind Curtailment\")\ntitle!(\"Generation Profile\")",
    "crumbs": [
      "06 Commitment",
      "Tutorial"
    ]
  },
  {
    "objectID": "part-06/tutorial-commitment.html#assert-the-correct-objective-value",
    "href": "part-06/tutorial-commitment.html#assert-the-correct-objective-value",
    "title": "Tutorial VI - Unit Commitment Problem",
    "section": "Assert the correct objective value",
    "text": "Assert the correct objective value\n\n\nCode\n# Test your answer\n# Assert the correct objective value\nresult_cost = results_df[results_df.scenario .== \"S1\", :total_cost][1]\n@assert isapprox(result_cost, 1.1446e6; atol=1e4) \"Objective value from results_df is not correct. Check your implementation.\"\nprintln(\"Test passed: The objective value from results_df is correct!\")",
    "crumbs": [
      "06 Commitment",
      "Tutorial"
    ]
  },
  {
    "objectID": "part-06/lecture-presentation.html#namedtuples-in-julia",
    "href": "part-06/lecture-presentation.html#namedtuples-in-julia",
    "title": "Lecture VI - Economic Dispatch Problem",
    "section": "NamedTuples in Julia",
    "text": "NamedTuples in Julia\n\nNamedTuples are immutable collections of key-value pairs\nThey provide a convenient way to group related data\nCan be created using a function that returns a tuple with named fields\n\n# Example: Creating a NamedTuple for a student\nfunction Student(name::String, age::Int, grade::Float64)\n    return (name = name, age = age, grade = grade)\nend\n\n# Create a dictionary of students\nstudents = Dict(\n    \"Alice\" =&gt; Student(\"Alice\", 20, 3.7),\n    \"Bob\" =&gt; Student(\"Bob\", 21, 3.5)\n)\n\n# Access data using dot notation\nprintln(students[\"Alice\"].grade)  # Output: 3.7"
  },
  {
    "objectID": "part-06/lecture-presentation.html#model-solving-function-pattern",
    "href": "part-06/lecture-presentation.html#model-solving-function-pattern",
    "title": "Lecture VI - Economic Dispatch Problem",
    "section": "Model-Solving Function Pattern",
    "text": "Model-Solving Function Pattern\n\nEncapsulate optimization models in functions for reusability\nReturn results as NamedTuples for easy access\nStore results in DataFrames for analysis\n\n# Example data for different scenarios\ndata = Dict(\n    \"base\" =&gt; Dict(\n        \"cost\" =&gt; 10.0,\n        \"limit\" =&gt; 100.0\n    ),\n    \"high_cost\" =&gt; Dict(\n        \"cost\" =&gt; 15.0,\n        \"limit\" =&gt; 100.0\n    ),\n    \"low_limit\" =&gt; Dict(\n        \"cost\" =&gt; 10.0,\n        \"limit\" =&gt; 50.0\n    )\n)\n\n# Example: Function to solve a simple optimization problem\nfunction solve_optimization(data::Dict)\n    model = Model(HiGHS.Optimizer)\n    set_silent(model)\n    \n    # Define variables and solve model\n    @variable(model, x &gt;= 0)\n    @objective(model, Min, data[\"cost\"] * x)\n    @constraint(model, x &lt;= data[\"limit\"])\n    optimize!(model)\n    \n    # Return results as NamedTuple\n    return (\n        solution = value(x),\n        objective = objective_value(model)\n    )\nend\n\n# Store results in DataFrame\nresults = DataFrame(\n    scenario = String[],\n    solution = Float64[],\n    objective = Float64[]\n)\n\n# Solve multiple scenarios\nfor (name, scenario_data) in data\n    solution = solve_optimization(scenario_data)\n    push!(results, (name, solution.solution, solution.objective))\nend"
  },
  {
    "objectID": "part-06/lecture-presentation.html#economic-dispatch-problem-recap",
    "href": "part-06/lecture-presentation.html#economic-dispatch-problem-recap",
    "title": "Lecture VI - Economic Dispatch Problem",
    "section": "Economic Dispatch Problem Recap",
    "text": "Economic Dispatch Problem Recap\n\nObjective: Minimize total generation cost\nDecision Variables:\n\nPower output of thermal generators (\\(p_g\\))\nPower output of wind turbines (\\(p_w\\))\n\nKey Constraints:\n\nPower balance: \\(\\sum_g p_g + \\sum_w p_w = d^f\\)\nGenerator limits: \\(p^{\\min}_g \\leq p_g \\leq p^{\\max}_g\\)\nWind limits: \\(0 \\leq p_w \\leq p^f_w\\)\n\n\n\n\n\n\n\n\nNote\n\n\nThe Economic Dispatch problem optimizes power generation for a single time step, assuming all generators are already committed to operation."
  },
  {
    "objectID": "part-06/lecture-presentation.html#from-economic-dispatch-to-unit-commitment",
    "href": "part-06/lecture-presentation.html#from-economic-dispatch-to-unit-commitment",
    "title": "Lecture VI - Economic Dispatch Problem",
    "section": "From Economic Dispatch to Unit Commitment",
    "text": "From Economic Dispatch to Unit Commitment\nLimitations of Economic Dispatch: - Assumes generators are already running - Ignores start-up and shut-down costs - Doesn’t consider minimum up/down times - Single time step optimization\nUnit Commitment Solution: - Adds binary variables for generator on/off status - Considers multiple time steps - Includes start-up/shut-down costs - Enforces minimum up/down time, ramping, etc. constraints - More realistic but computationally more complex\n\n\n\n\n\n\nTip\n\n\nUnit Commitment extends Economic Dispatch by adding operational constraints and time-dependent decisions."
  },
  {
    "objectID": "part-06/lecture-presentation.html#solutions-from-last-week",
    "href": "part-06/lecture-presentation.html#solutions-from-last-week",
    "title": "Lecture VI - Economic Dispatch Problem",
    "section": "Solutions from last Week",
    "text": "Solutions from last Week\n\nThe tutorials from last week will again be available on Friday\nYou can access them in the project folder on Github\nClick on the little cat icon on the bottom right\n\n\n\n\n\n\n\n\nTip\n\n\nYou can ask questions anytime in class or via email!"
  },
  {
    "objectID": "part-06/lecture-presentation.html#power-system-basic-models-unit-commitment",
    "href": "part-06/lecture-presentation.html#power-system-basic-models-unit-commitment",
    "title": "Lecture VI - Economic Dispatch Problem",
    "section": "Power System Basic Models: Unit Commitment",
    "text": "Power System Basic Models: Unit Commitment\n\n\n\n\nPower system with generators and an aggregated demand\n\nGenerators can be switched on/off to meet the demand\nGenerators have different costs and operational constraints\nDecisions are made over multiple time steps"
  },
  {
    "objectID": "part-06/lecture-presentation.html#unit-commitment-problem",
    "href": "part-06/lecture-presentation.html#unit-commitment-problem",
    "title": "Lecture VI - Economic Dispatch Problem",
    "section": "Unit Commitment Problem",
    "text": "Unit Commitment Problem\n\nObjective: Minimize the total cost of producing electricity\nConstraints:\n\nDemand must be met\nGenerators have limits on their power output\nRenewable power injection\nGenerator on/off status\nMinimum up/down times\nRamp rate limits\n\nDecision variables:\n\nPower output of thermal generators\nPower output of renewables\nBinary variables for generator status"
  },
  {
    "objectID": "part-06/lecture-presentation.html#section",
    "href": "part-06/lecture-presentation.html#section",
    "title": "Lecture VI - Economic Dispatch Problem",
    "section": "",
    "text": "How does the mathematical model look like?"
  },
  {
    "objectID": "part-06/lecture-presentation.html#available-sets",
    "href": "part-06/lecture-presentation.html#available-sets",
    "title": "Lecture VI - Economic Dispatch Problem",
    "section": "Available Sets",
    "text": "Available Sets\nQuestion: What are the sets we need?\n\n\n\\(\\mathcal{G}\\) - Set of thermal generators indexed by \\(g \\in \\{1,2,...,|\\mathcal{G}|\\}\\)\n\\(\\mathcal{W}\\) - Set of wind turbines indexed by \\(w \\in \\{1,2,...,|\\mathcal{W}|\\}\\)\n\\(\\mathcal{T}\\) - Set of time periods indexed by \\(t \\in \\{1,2,...,|\\mathcal{T}|\\}\\)"
  },
  {
    "objectID": "part-06/lecture-presentation.html#available-parameters",
    "href": "part-06/lecture-presentation.html#available-parameters",
    "title": "Lecture VI - Economic Dispatch Problem",
    "section": "Available Parameters",
    "text": "Available Parameters\nQuestion: What are possible parameters?\n\n\n\\(c^{var}_g\\) - Variable cost of thermal generator \\(g\\in\\mathcal{G}\\) in [\\(EUR/\\text{MWh}\\)]\n\\(c^{fix}_g\\) - Fixed cost of thermal generator \\(g\\in\\mathcal{G}\\) in [\\(EUR\\)]\n\\(c^{var}_w\\) - Cost of wind turbine \\(w\\in\\mathcal{W}\\) in [\\(EUR/\\text{MWh}\\)]\n\\(p^{\\min}_g\\) - Minimum power output of thermal generator \\(g\\in\\mathcal{G}\\) in [MW]\n\\(p^{\\max}_g\\) - Maximum power output of thermal generator \\(g\\in\\mathcal{G}\\) in [MW]\n\\(p^{f}_{w,t}\\) - Forecasted power output of wind turbine \\(w\\in\\mathcal{W}\\) at time \\(t\\) in [MW]\n\\(d^f_t\\) - Forecasted demand at time \\(t\\) in [MW]\n\\(T^{up}_g\\) - Minimum up time of generator \\(g\\in\\mathcal{G}\\) in [h]\n\\(T^{down}_g\\) - Minimum down time of generator \\(g\\in\\mathcal{G}\\) in [h]\n\\(R^{up}_g\\) - Maximum ramp-up rate of generator \\(g\\in\\mathcal{G}\\) in [MW/h]\n\\(R^{down}_g\\) - Maximum ramp-down rate of generator \\(g\\in\\mathcal{G}\\) in [MW/h]"
  },
  {
    "objectID": "part-06/lecture-presentation.html#decision-variables",
    "href": "part-06/lecture-presentation.html#decision-variables",
    "title": "Lecture VI - Economic Dispatch Problem",
    "section": "Decision Variables",
    "text": "Decision Variables\n\n\\(p_{g,t}\\) - Power output of thermal generator \\(g\\in\\mathcal{G}\\) at time \\(t\\)\n\\(p_{w,t}\\) - Power injection of wind turbine \\(w\\in\\mathcal{W}\\) at time \\(t\\)\n\\(u_{g,t}\\) - Binary variable indicating if generator \\(g\\in\\mathcal{G}\\) is on at time \\(t\\)"
  },
  {
    "objectID": "part-06/lecture-presentation.html#objective-function",
    "href": "part-06/lecture-presentation.html#objective-function",
    "title": "Lecture VI - Economic Dispatch Problem",
    "section": "Objective Function",
    "text": "Objective Function\n\\(\\text{Minimize} \\quad \\sum_{t \\in \\mathcal{T}} \\left( \\sum_{g \\in \\mathcal{G}} (c^{var}_g p_{g,t} + c^{fix}_g u_{g,t}) + \\sum_{w \\in \\mathcal{W}} c^{var}_w p_{w,t} \\right)\\)\n\n\n\n\n\n\nThe objective includes:\n\n\n\nVariable costs for power generation\nFixed costs for keeping generators on\nWind power costs"
  },
  {
    "objectID": "part-06/lecture-presentation.html#power-balance-constraints",
    "href": "part-06/lecture-presentation.html#power-balance-constraints",
    "title": "Lecture VI - Economic Dispatch Problem",
    "section": "Power Balance Constraints",
    "text": "Power Balance Constraints\n\\(\\sum_{g \\in \\mathcal{G}} p_{g,t} + \\sum_{w \\in \\mathcal{W}} p_{w,t} = d^f_t \\quad \\forall t \\in \\mathcal{T}\\)"
  },
  {
    "objectID": "part-06/lecture-presentation.html#generator-limits-constraints",
    "href": "part-06/lecture-presentation.html#generator-limits-constraints",
    "title": "Lecture VI - Economic Dispatch Problem",
    "section": "Generator Limits Constraints",
    "text": "Generator Limits Constraints\n\\(p^{\\min}_g u_{g,t} \\leq p_{g,t} \\leq p^{\\max}_g u_{g,t} \\quad \\forall g \\in \\mathcal{G}, t \\in \\mathcal{T}\\)"
  },
  {
    "objectID": "part-06/lecture-presentation.html#wind-power-injection-constraints",
    "href": "part-06/lecture-presentation.html#wind-power-injection-constraints",
    "title": "Lecture VI - Economic Dispatch Problem",
    "section": "Wind Power Injection Constraints",
    "text": "Wind Power Injection Constraints\n\\(0 \\leq p_{w,t} \\leq p^f_{w,t} \\quad \\forall w \\in \\mathcal{W}, t \\in \\mathcal{T}\\)"
  },
  {
    "objectID": "part-06/lecture-presentation.html#minimum-updown-time-constraints",
    "href": "part-06/lecture-presentation.html#minimum-updown-time-constraints",
    "title": "Lecture VI - Economic Dispatch Problem",
    "section": "Minimum Up/Down Time Constraints",
    "text": "Minimum Up/Down Time Constraints\n\\(u_{g,t} - u_{g,t-1} \\leq u_{g,\\tau} \\quad \\forall g \\in \\mathcal{G}, t \\in \\mathcal{T}, \\tau \\in [t+1, \\min(t+T^{up}_g-1,|\\mathcal{T}|)]\\)\n\\(u_{g,t-1} - u_{g,t} \\leq 1 - u_{g,\\tau} \\quad \\forall g \\in \\mathcal{G}, t \\in \\mathcal{T}, \\tau \\in [t+1, \\min(t+T^{down}_g-1,|\\mathcal{T}|)]\\)"
  },
  {
    "objectID": "part-06/lecture-presentation.html#ramp-rate-constraints",
    "href": "part-06/lecture-presentation.html#ramp-rate-constraints",
    "title": "Lecture VI - Economic Dispatch Problem",
    "section": "Ramp Rate Constraints",
    "text": "Ramp Rate Constraints\n\\(p_{g,t} - p_{g,t-1} \\leq R^{up}_g \\quad \\forall g \\in \\mathcal{G}, t \\in \\mathcal{T}\\)\n\\(p_{g,t-1} - p_{g,t} \\leq R^{down}_g \\quad \\forall g \\in \\mathcal{G}, t \\in \\mathcal{T}\\)"
  },
  {
    "objectID": "part-06/lecture-presentation.html#complete-unit-commitment-model",
    "href": "part-06/lecture-presentation.html#complete-unit-commitment-model",
    "title": "Lecture VI - Economic Dispatch Problem",
    "section": "Complete Unit Commitment Model",
    "text": "Complete Unit Commitment Model\n\\(\\text{Minimize} \\quad \\sum_{t \\in \\mathcal{T}} \\left( \\sum_{g \\in \\mathcal{G}} (c^{var}_g p_{g,t} + c^{fix}_g u_{g,t}) + \\sum_{w \\in \\mathcal{W}} c^{var}_w p_{w,t} \\right)\\)\nsubject to\n\\(\\sum_{g \\in \\mathcal{G}} p_{g,t} + \\sum_{w \\in \\mathcal{W}} p_{w,t} = d^f_t \\quad \\forall t \\in \\mathcal{T}\\)\n\\(p^{\\min}_g u_{g,t} \\leq p_{g,t} \\leq p^{\\max}_g u_{g,t} \\quad \\forall g \\in \\mathcal{G}, t \\in \\mathcal{T}\\)\n\\(0 \\leq p_{w,t} \\leq p^f_{w,t} \\quad \\forall w \\in \\mathcal{W}, t \\in \\mathcal{T}\\)\n\\(u_{g,t} - u_{g,t-1} \\leq u_{g,\\tau} \\quad \\forall g \\in \\mathcal{G}, t \\in \\mathcal{T}, \\tau \\in [t+1, \\min(t+T^{up}_g-1,|\\mathcal{T}|)]\\)\n\\(u_{g,t-1} - u_{g,t} \\leq 1 - u_{g,\\tau} \\quad \\forall g \\in \\mathcal{G}, t \\in \\mathcal{T}, \\tau \\in [t+1, \\min(t+T^{down}_g-1,|\\mathcal{T}|)]\\)\n\\(p_{g,t} - p_{g,t-1} \\leq R^{up}_g \\quad \\forall g \\in \\mathcal{G}, t \\in \\mathcal{T}\\)\n\\(p_{g,t-1} - p_{g,t} \\leq R^{down}_g \\quad \\forall g \\in \\mathcal{G}, t \\in \\mathcal{T}\\)\n\\(u_{g,t} \\in \\{0,1\\} \\quad \\forall g \\in \\mathcal{G}, t \\in \\mathcal{T}\\)"
  },
  {
    "objectID": "part-06/lecture-presentation.html#model-type",
    "href": "part-06/lecture-presentation.html#model-type",
    "title": "Lecture VI - Economic Dispatch Problem",
    "section": "Model Type",
    "text": "Model Type\nQuestion: What type of optimization problem is this?\n\n\nMixed-Integer Linear Programming (MILP)\nBinary variables for generator status\nLinear constraints and objective\nTime-dependent decisions"
  },
  {
    "objectID": "part-06/lecture-presentation.html#solution-methods",
    "href": "part-06/lecture-presentation.html#solution-methods",
    "title": "Lecture VI - Economic Dispatch Problem",
    "section": "Solution Methods",
    "text": "Solution Methods\nQuestion: How can we solve this problem?\n\n\nBranch and Bound algorithm\nCommercial solvers (Gurobi, CPLEX)\nOpen-source solvers (HiGHS)\nDecomposition methods for large problems"
  },
  {
    "objectID": "part-06/lecture-presentation.html#computational-challenges",
    "href": "part-06/lecture-presentation.html#computational-challenges",
    "title": "Lecture VI - Economic Dispatch Problem",
    "section": "Computational Challenges",
    "text": "Computational Challenges\nQuestion: What makes this problem challenging?\n\n\nLarge number of binary variables\nTime-dependent inter-temporal constraints\nMinimum up/down time constraints\nRamp rate constraints\nMultiple time periods"
  },
  {
    "objectID": "part-06/lecture-presentation.html#real-world-applications",
    "href": "part-06/lecture-presentation.html#real-world-applications",
    "title": "Lecture VI - Economic Dispatch Problem",
    "section": "Real-World Applications",
    "text": "Real-World Applications\n\nGeneration scheduling\nDay-ahead market clearing\nAncillary services\nReserve capacity planning"
  },
  {
    "objectID": "part-06/lecture-presentation.html#further-extensions",
    "href": "part-06/lecture-presentation.html#further-extensions",
    "title": "Lecture VI - Economic Dispatch Problem",
    "section": "Further Extensions",
    "text": "Further Extensions\n\nBattery storage\nDemand response\nNetwork constraints\nReserve requirements\nMultiple fuel types\nEmission constraints\nUncertainty in forecasts\n\n\n\n\n\n\n\nAnd that’s it for today’s lecture!\n\n\nWe have covered the Unit Commitment problem and its mathematical formulation. The tutorial will help you implement and solve this problem using Julia and JuMP."
  },
  {
    "objectID": "part-06/lecture-presentation.html#section-1",
    "href": "part-06/lecture-presentation.html#section-1",
    "title": "Lecture VI - Economic Dispatch Problem",
    "section": "",
    "text": "Questions?"
  },
  {
    "objectID": "part-06/lecture-presentation.html#literature-i",
    "href": "part-06/lecture-presentation.html#literature-i",
    "title": "Lecture VI - Economic Dispatch Problem",
    "section": "Literature I",
    "text": "Literature I\nFor more interesting literature to learn more about Julia, take a look at the literature list of this course."
  },
  {
    "objectID": "part-06/lecture-presentation.html#literature-ii",
    "href": "part-06/lecture-presentation.html#literature-ii",
    "title": "Lecture VI - Economic Dispatch Problem",
    "section": "Literature II",
    "text": "Literature II\nFor a detailed mathematical formulation of the Unit Commitment problem, see Morales-Espana, Latorre, and Ramos (2013) and Zimmermann and Kather (2019).\n\n\n\n\nMorales-Espana, G., J. M. Latorre, and A. Ramos. 2013. “Tight and Compact MILP Formulation for the Thermal Unit Commitment Problem.” IEEE Transactions on Power Systems 28 (4): 4897–4908.\n\n\nZimmermann, Cors, T., and A. Kather. 2019. “Increasing Tightness by Introduction of Intertemporal Constraints in MILP Unit Commitment.” In NEIS 2019; Conference on Sustainable Energy Supply and Energy Storage Systems, edited by Detlef Schulz, 209–14. VDE Verl."
  },
  {
    "objectID": "general/cheatsheet-julia.html#package-usage",
    "href": "general/cheatsheet-julia.html#package-usage",
    "title": "Julia Syntax Cheatsheet",
    "section": "Package Usage",
    "text": "Package Usage\n\n# Import packages\nimport DataFrames     # Access as DataFrames.function()\nusing DataFrames     # Import all exported names\n\n# Check installed packages\nPkg.status()         # List all installed packages",
    "crumbs": [
      "Cheatsheets",
      "Julia"
    ]
  },
  {
    "objectID": "general/cheatsheet-julia.html#environment-management",
    "href": "general/cheatsheet-julia.html#environment-management",
    "title": "Julia Syntax Cheatsheet",
    "section": "Environment Management",
    "text": "Environment Management\n\n# Environment operations\nPkg.activate(\"new_environment\")    # Create/activate environment\nPkg.activate()                     # Activate default environment\n\n# Project files\n# Project.toml    - Lists direct dependencies\n# Manifest.toml   - Complete dependency graph",
    "crumbs": [
      "Cheatsheets",
      "Julia"
    ]
  },
  {
    "objectID": "general/cheatsheet-julia.html#key-points-5",
    "href": "general/cheatsheet-julia.html#key-points-5",
    "title": "Julia Syntax Cheatsheet",
    "section": "Key Points",
    "text": "Key Points\n\nUse import for namespace control, using for direct access\nAlways update packages regularly with Pkg.update()\nCreate separate environments for different projects\nProject.toml and Manifest.toml track dependencies\nPackage manager commands typically run in REPL",
    "crumbs": [
      "Cheatsheets",
      "Julia"
    ]
  },
  {
    "objectID": "general/cheatsheet-julia.html#creating-dataframes",
    "href": "general/cheatsheet-julia.html#creating-dataframes",
    "title": "Julia Syntax Cheatsheet",
    "section": "Creating DataFrames",
    "text": "Creating DataFrames\n\nusing DataFrames\n\n# Basic DataFrame creation\ndf = DataFrame(\n    Name = [\"John\", \"Mike\", \"Frank\"],\n    Age = [28, 23, 37],\n    Salary = [50000, 62000, 90000]\n)\n\n# Empty DataFrame with specified columns\ndf_empty = DataFrame(\n    Name = String[],\n    Age = Int[]\n)",
    "crumbs": [
      "Cheatsheets",
      "Julia"
    ]
  },
  {
    "objectID": "general/cheatsheet-julia.html#accessing-and-modifying-data",
    "href": "general/cheatsheet-julia.html#accessing-and-modifying-data",
    "title": "Julia Syntax Cheatsheet",
    "section": "Accessing and Modifying Data",
    "text": "Accessing and Modifying Data\n\n# Access columns\nages = df.Age                # Get Age column\nfirst_name = df.Name[1]      # First name in Name column\n\n# Modify values\ndf.Salary[1] = 59000        # Update John's salary\ndf.NewColumn = zeros(3)     # Add new column\n\n# Access multiple columns\nsubset = df[:, [:Name, :Age]]  # Select specific columns\nrow = df[1, :]                 # Select first row",
    "crumbs": [
      "Cheatsheets",
      "Julia"
    ]
  },
  {
    "objectID": "general/cheatsheet-julia.html#filtering-data",
    "href": "general/cheatsheet-julia.html#filtering-data",
    "title": "Julia Syntax Cheatsheet",
    "section": "Filtering Data",
    "text": "Filtering Data\n\n# Filter with boolean indexing\nhigh_earners = df[df.Salary .&gt; 60000, :]\n\n# Using filter function\nhigh_earners = filter(row -&gt; row.Salary &gt; 60000, df)\n\n# Multiple conditions\nsenior_high_earners = df[(df.Age .&gt; 30) .& (df.Salary .&gt; 60000), :]",
    "crumbs": [
      "Cheatsheets",
      "Julia"
    ]
  },
  {
    "objectID": "general/cheatsheet-julia.html#data-manipulation",
    "href": "general/cheatsheet-julia.html#data-manipulation",
    "title": "Julia Syntax Cheatsheet",
    "section": "Data Manipulation",
    "text": "Data Manipulation\n\n# Sort DataFrame\nsorted_df = sort(df, :Age)               # Sort by Age\nsorted_df = sort(df, [:Age, :Salary])    # Sort by multiple columns\n\n# Add calculated column\ndf.Bonus = [row.Age &gt; 30 ? row.Salary * 0.1 : row.Salary * 0.05 for row in eachrow(df)]\n\n# Iterate over rows\nfor row in eachrow(df)\n    println(\"$(row.Name): $(row.Age) years old\")\nend",
    "crumbs": [
      "Cheatsheets",
      "Julia"
    ]
  },
  {
    "objectID": "general/cheatsheet-julia.html#key-functions",
    "href": "general/cheatsheet-julia.html#key-functions",
    "title": "Julia Syntax Cheatsheet",
    "section": "Key Functions",
    "text": "Key Functions\n\nnrow(df)              # Number of rows\nncol(df)              # Number of columns\nnames(df)             # Column names\ndescribe(df)          # Summary statistics\npush!(df, row)        # Add new row\nselect(df, :Name)     # Select columns",
    "crumbs": [
      "Cheatsheets",
      "Julia"
    ]
  },
  {
    "objectID": "general/cheatsheet-julia.html#key-points-6",
    "href": "general/cheatsheet-julia.html#key-points-6",
    "title": "Julia Syntax Cheatsheet",
    "section": "Key Points",
    "text": "Key Points\n\nColumn access with dot notation (df.column)\nUse eachrow() for row iteration\nBoolean indexing for filtering\npush! to add new rows\nBroadcasting with dot operators (.&gt;, .+, etc.)",
    "crumbs": [
      "Cheatsheets",
      "Julia"
    ]
  },
  {
    "objectID": "general/cheatsheet-julia.html#delimitedfiles-operations",
    "href": "general/cheatsheet-julia.html#delimitedfiles-operations",
    "title": "Julia Syntax Cheatsheet",
    "section": "DelimitedFiles Operations",
    "text": "DelimitedFiles Operations\n\nusing DelimitedFiles\n\n# Write matrix to CSV\ndata = [1 2 3; 4 5 6]\nwritedlm(\"data.csv\", data, ',')      # Write with comma delimiter\nwritedlm(\"data.txt\", data, '\\t')     # Write with tab delimiter\n\n# Read delimited files\nmatrix = readdlm(\"data.csv\", ',')    # Read CSV file\nmatrix = readdlm(\"data.txt\", '\\t')   # Read tab-delimited file",
    "crumbs": [
      "Cheatsheets",
      "Julia"
    ]
  },
  {
    "objectID": "general/cheatsheet-julia.html#csv-and-dataframe-operations",
    "href": "general/cheatsheet-julia.html#csv-and-dataframe-operations",
    "title": "Julia Syntax Cheatsheet",
    "section": "CSV and DataFrame Operations",
    "text": "CSV and DataFrame Operations\n\nusing CSV, DataFrames\n\n# Write DataFrame to CSV\ndf = DataFrame(\n    Name = [\"John\", \"Alice\"],\n    Age = [25, 30]\n)\nCSV.write(\"data.csv\", df)            # Basic write\nCSV.write(\"data.csv\", df,            # Write with options\n    delim = ';',                     # Custom delimiter\n    header = false                   # No header\n)\n\n# Read CSV to DataFrame\ndf = CSV.read(\"data.csv\", DataFrame)           # Basic read\ndf = CSV.read(\"data.csv\", DataFrame,           # Read with options\n    delim = ';',                               # Custom delimiter\n    header = [\"Col1\", \"Col2\"]                  # Custom headers\n)",
    "crumbs": [
      "Cheatsheets",
      "Julia"
    ]
  },
  {
    "objectID": "general/cheatsheet-julia.html#file-path-management",
    "href": "general/cheatsheet-julia.html#file-path-management",
    "title": "Julia Syntax Cheatsheet",
    "section": "File Path Management",
    "text": "File Path Management\n\n# Get current directory\n@__DIR__                             # Directory of current file\npwd()                                # Current working directory\n\n# Path operations\npath = joinpath(@__DIR__, \"data\")    # Join path components\nmkdir(path)                          # Create directory\nisfile(path)                         # Check if file exists",
    "crumbs": [
      "Cheatsheets",
      "Julia"
    ]
  },
  {
    "objectID": "general/cheatsheet-julia.html#key-points-7",
    "href": "general/cheatsheet-julia.html#key-points-7",
    "title": "Julia Syntax Cheatsheet",
    "section": "Key Points",
    "text": "Key Points\n\nUse DelimitedFiles for simple matrix I/O\nCSV package for advanced DataFrame I/O\nAlways use @__DIR__ for relative paths\nCheck file existence before operations\nConsider using try-catch for file operations",
    "crumbs": [
      "Cheatsheets",
      "Julia"
    ]
  },
  {
    "objectID": "general/cheatsheet-julia.html#basic-plots",
    "href": "general/cheatsheet-julia.html#basic-plots",
    "title": "Julia Syntax Cheatsheet",
    "section": "Basic Plots",
    "text": "Basic Plots\n\nusing Plots, StatsPlots\n\n# Line plot\nplot(x, y,\n    title=\"Line Plot\",\n    xlabel=\"X Label\",\n    ylabel=\"Y Label\",\n    legend=false\n)\n\n# Scatter plot\nscatter(x, y,\n    title=\"Scatter Plot\",\n    marker=(:circle, 8)\n)\n\n# Bar plot\nbar(categories, values,\n    title=\"Bar Plot\"\n)\n\n# Histogram\nhistogram(data,\n    bins=30,\n    title=\"Histogram\"\n)\n\n# Box plot\nboxplot(group, values,\n    title=\"Box Plot\"\n)",
    "crumbs": [
      "Cheatsheets",
      "Julia"
    ]
  },
  {
    "objectID": "general/cheatsheet-julia.html#plot-customization",
    "href": "general/cheatsheet-julia.html#plot-customization",
    "title": "Julia Syntax Cheatsheet",
    "section": "Plot Customization",
    "text": "Plot Customization\n\n# Customize plot appearance\nplot(x, y,\n    title=\"Custom Plot\",\n    line=(:dash, 2),      # Line style and width\n    color=:red,           # Line color\n    marker=(:circle, 8),  # Marker style and size\n    label=\"Data Series\"   # Legend label\n)\n\n# Multiple series\nplot(x, y1, label=\"Series 1\")\nplot!(x, y2, label=\"Series 2\")  # Add to existing plot",
    "crumbs": [
      "Cheatsheets",
      "Julia"
    ]
  },
  {
    "objectID": "general/cheatsheet-julia.html#saving-plots",
    "href": "general/cheatsheet-julia.html#saving-plots",
    "title": "Julia Syntax Cheatsheet",
    "section": "Saving Plots",
    "text": "Saving Plots\n\n# Save plot to file\nsavefig(plot_name, \"path/plot.png\")  # Save as PNG\nsavefig(plot_name, \"path/plot.pdf\")  # Save as PDF\nsavefig(plot_name, \"path/plot.svg\")  # Save as SVG",
    "crumbs": [
      "Cheatsheets",
      "Julia"
    ]
  },
  {
    "objectID": "general/cheatsheet-julia.html#common-options",
    "href": "general/cheatsheet-julia.html#common-options",
    "title": "Julia Syntax Cheatsheet",
    "section": "Common Options",
    "text": "Common Options\n\n# Plot options\nplot(\n    legend=true/false,    # Show/hide legend\n    grid=true/false,      # Show/hide grid\n    size=(width,height),  # Plot dimensions\n    dpi=300              # Resolution\n)\n\n# Line styles\n:solid, :dash, :dot\n\n# Colors\n:red, :blue, :green\n\n# Markers\n:circle, :square, :diamond",
    "crumbs": [
      "Cheatsheets",
      "Julia"
    ]
  },
  {
    "objectID": "general/cheatsheet-julia.html#key-points-8",
    "href": "general/cheatsheet-julia.html#key-points-8",
    "title": "Julia Syntax Cheatsheet",
    "section": "Key Points",
    "text": "Key Points\n\nUse plot() for new plots, plot!() to add to existing\nCustomize with named arguments\nSave plots in various formats\nStatsPlots extends plotting capabilities\nMultiple series can share one plot",
    "crumbs": [
      "Cheatsheets",
      "Julia"
    ]
  },
  {
    "objectID": "part-07/lecture-storage.html",
    "href": "part-07/lecture-storage.html",
    "title": "Lecture VII - Storage Modeling",
    "section": "",
    "text": "Objective: Minimize total generation cost over multiple time periods\nDecision Variables:\n\nPower output of thermal generators (\\(p_{g,t}\\))\nPower output of wind turbines (\\(p_{w,t}\\))\nBinary variables for generator status (\\(u_{g,t}\\))\nBinary variables for startup events (\\(v_{g,t}\\))\n\nKey Constraints:\n\nPower balance\nGenerator limits\nWind limits\nMinimum up/down times\nRamp rate limits\nStartup variable definition\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe Unit Commitment problem extends Economic Dispatch by adding operational constraints and time-dependent unit commitment decisions.\n\n\n\n\n\n\n\n\\(\\text{Minimize} \\quad \\sum_{t \\in \\mathcal{T}} \\left( \\sum_{g \\in \\mathcal{G}} (c^{var}_g p_{g,t} + c^{fix}_g u_{g,t} + c^{start}_g v_{g,t}) + \\sum_{w \\in \\mathcal{W}} c^{var}_w p_{w,t} \\right)\\)\n\n\n\n\nPower Balance:\n\n\\(\\sum_{g \\in \\mathcal{G}} p_{g,t} + \\sum_{w \\in \\mathcal{W}} p_{w,t} = d^f_t \\quad \\forall t \\in \\mathcal{T}\\)\n\nGenerator Limits:\n\n\\(p^{\\min}_g u_{g,t} \\leq p_{g,t} \\leq p^{\\max}_g u_{g,t} \\quad \\forall g \\in \\mathcal{G}, t \\in \\mathcal{T}\\)\n\nWind Power:\n\n\\(0 \\leq p_{w,t} \\leq p^f_{w,t} \\quad \\forall w \\in \\mathcal{W}, t \\in \\mathcal{T}\\)\n\nMinimum Up/Down Times:\n\n\\(u_{g,t} - u_{g,t-1} \\leq u_{g,\\tau} \\quad \\forall g \\in \\mathcal{G}, t \\in \\mathcal{T}, \\tau \\in [t+1, \\min(t+T^{up}_g-1,|\\mathcal{T}|)]\\) \\(u_{g,t-1} - u_{g,t} \\leq 1 - u_{g,\\tau} \\quad \\forall g \\in \\mathcal{G}, t \\in \\mathcal{T}, \\tau \\in [t+1, \\min(t+T^{down}_g-1,|\\mathcal{T}|)]\\)\n\nRamp Rate Limits:\n\n\\(p_{g,t} - p_{g,t-1} \\leq R^{up}_g \\quad \\forall g \\in \\mathcal{G}, t \\in \\mathcal{T}\\) \\(p_{g,t-1} - p_{g,t} \\leq R^{down}_g \\quad \\forall g \\in \\mathcal{G}, t \\in \\mathcal{T}\\)\n\nStartup Variable Definition:\n\n\\(v_{g,t} \\geq u_{g,t} - u_{g,t-1} \\quad \\forall g \\in \\mathcal{G}, t \\in \\mathcal{T}\\)\n\n\n\n\n\nMixed-Integer Linear Programming (MILP) problem\nBinary variables for generator status and startup events\nTime-dependent decisions\nComputationally challenging due to:\n\nLarge number of binary variables\nLarge number of time steps\nLarge number of constraints (Challenge: finding formulations that are both computationally efficient and mathematically accurate)\nNeed for tight and compact formulations:\n\nTight: Small gap between LP relaxation and integer solution\nCompact: Fewer variables and constraints while maintaining accuracy\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nThe Unit Commitment problem is fundamental for power system operation, providing a realistic model estimating generator operation over time.\n\n\n\n\n\n\nData structures use NamedTuples for efficient parameter storage\nResults are stored in DataFrames for easy analysis\nKey metrics tracked:\n\nTotal system cost\nWind curtailment\nThermal and wind generation\nGenerator status and startup events\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe tutorial demonstrated how to implement and solve the UC problem using Julia and JuMP, including simple visualization of results over time.\n\n\n\n\n\n\nThe tutorials from last week will again be available on Friday\nYou can access them in the project folder on Github\nClick on the little cat icon on the bottom right\n\n. . .\n\n\n\n\n\n\nTip\n\n\n\nYou can ask questions anytime in class or via email!",
    "crumbs": [
      "07 Storage",
      "Lecture"
    ]
  },
  {
    "objectID": "part-07/lecture-storage.html#unit-commitment-problem-overview",
    "href": "part-07/lecture-storage.html#unit-commitment-problem-overview",
    "title": "Lecture VII - Storage Modeling",
    "section": "",
    "text": "Objective: Minimize total generation cost over multiple time periods\nDecision Variables:\n\nPower output of thermal generators (\\(p_{g,t}\\))\nPower output of wind turbines (\\(p_{w,t}\\))\nBinary variables for generator status (\\(u_{g,t}\\))\nBinary variables for startup events (\\(v_{g,t}\\))\n\nKey Constraints:\n\nPower balance\nGenerator limits\nWind limits\nMinimum up/down times\nRamp rate limits\nStartup variable definition\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe Unit Commitment problem extends Economic Dispatch by adding operational constraints and time-dependent unit commitment decisions.",
    "crumbs": [
      "07 Storage",
      "Lecture"
    ]
  },
  {
    "objectID": "part-07/lecture-storage.html#mathematical-formulation",
    "href": "part-07/lecture-storage.html#mathematical-formulation",
    "title": "Lecture VII - Storage Modeling",
    "section": "",
    "text": "\\(\\text{Minimize} \\quad \\sum_{t \\in \\mathcal{T}} \\left( \\sum_{g \\in \\mathcal{G}} (c^{var}_g p_{g,t} + c^{fix}_g u_{g,t} + c^{start}_g v_{g,t}) + \\sum_{w \\in \\mathcal{W}} c^{var}_w p_{w,t} \\right)\\)\n\n\n\n\nPower Balance:\n\n\\(\\sum_{g \\in \\mathcal{G}} p_{g,t} + \\sum_{w \\in \\mathcal{W}} p_{w,t} = d^f_t \\quad \\forall t \\in \\mathcal{T}\\)\n\nGenerator Limits:\n\n\\(p^{\\min}_g u_{g,t} \\leq p_{g,t} \\leq p^{\\max}_g u_{g,t} \\quad \\forall g \\in \\mathcal{G}, t \\in \\mathcal{T}\\)\n\nWind Power:\n\n\\(0 \\leq p_{w,t} \\leq p^f_{w,t} \\quad \\forall w \\in \\mathcal{W}, t \\in \\mathcal{T}\\)\n\nMinimum Up/Down Times:\n\n\\(u_{g,t} - u_{g,t-1} \\leq u_{g,\\tau} \\quad \\forall g \\in \\mathcal{G}, t \\in \\mathcal{T}, \\tau \\in [t+1, \\min(t+T^{up}_g-1,|\\mathcal{T}|)]\\) \\(u_{g,t-1} - u_{g,t} \\leq 1 - u_{g,\\tau} \\quad \\forall g \\in \\mathcal{G}, t \\in \\mathcal{T}, \\tau \\in [t+1, \\min(t+T^{down}_g-1,|\\mathcal{T}|)]\\)\n\nRamp Rate Limits:\n\n\\(p_{g,t} - p_{g,t-1} \\leq R^{up}_g \\quad \\forall g \\in \\mathcal{G}, t \\in \\mathcal{T}\\) \\(p_{g,t-1} - p_{g,t} \\leq R^{down}_g \\quad \\forall g \\in \\mathcal{G}, t \\in \\mathcal{T}\\)\n\nStartup Variable Definition:\n\n\\(v_{g,t} \\geq u_{g,t} - u_{g,t-1} \\quad \\forall g \\in \\mathcal{G}, t \\in \\mathcal{T}\\)",
    "crumbs": [
      "07 Storage",
      "Lecture"
    ]
  },
  {
    "objectID": "part-07/lecture-storage.html#model-characteristics",
    "href": "part-07/lecture-storage.html#model-characteristics",
    "title": "Lecture VII - Storage Modeling",
    "section": "",
    "text": "Mixed-Integer Linear Programming (MILP) problem\nBinary variables for generator status and startup events\nTime-dependent decisions\nComputationally challenging due to:\n\nLarge number of binary variables\nLarge number of time steps\nLarge number of constraints (Challenge: finding formulations that are both computationally efficient and mathematically accurate)\nNeed for tight and compact formulations:\n\nTight: Small gap between LP relaxation and integer solution\nCompact: Fewer variables and constraints while maintaining accuracy\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nThe Unit Commitment problem is fundamental for power system operation, providing a realistic model estimating generator operation over time.",
    "crumbs": [
      "07 Storage",
      "Lecture"
    ]
  },
  {
    "objectID": "part-07/lecture-storage.html#implementation-insights",
    "href": "part-07/lecture-storage.html#implementation-insights",
    "title": "Lecture VII - Storage Modeling",
    "section": "",
    "text": "Data structures use NamedTuples for efficient parameter storage\nResults are stored in DataFrames for easy analysis\nKey metrics tracked:\n\nTotal system cost\nWind curtailment\nThermal and wind generation\nGenerator status and startup events\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe tutorial demonstrated how to implement and solve the UC problem using Julia and JuMP, including simple visualization of results over time.",
    "crumbs": [
      "07 Storage",
      "Lecture"
    ]
  },
  {
    "objectID": "part-07/lecture-storage.html#solutions-from-last-week",
    "href": "part-07/lecture-storage.html#solutions-from-last-week",
    "title": "Lecture VII - Storage Modeling",
    "section": "",
    "text": "The tutorials from last week will again be available on Friday\nYou can access them in the project folder on Github\nClick on the little cat icon on the bottom right\n\n. . .\n\n\n\n\n\n\nTip\n\n\n\nYou can ask questions anytime in class or via email!",
    "crumbs": [
      "07 Storage",
      "Lecture"
    ]
  },
  {
    "objectID": "part-07/lecture-storage.html#extending-the-unit-commitment-problem",
    "href": "part-07/lecture-storage.html#extending-the-unit-commitment-problem",
    "title": "Lecture VII - Storage Modeling",
    "section": "Extending the Unit Commitment Problem",
    "text": "Extending the Unit Commitment Problem\nIn this lecture, we will extend the Unit Commitment problem by adding:\n1. Generator efficiency modeling\n2. Storage system modeling\n3. Storage capacity optimization\nThese extensions make the model more realistic and allow for more sophisticated analysis of power systems.",
    "crumbs": [
      "07 Storage",
      "Lecture"
    ]
  },
  {
    "objectID": "part-07/lecture-storage.html#constant-efficiency",
    "href": "part-07/lecture-storage.html#constant-efficiency",
    "title": "Lecture VII - Storage Modeling",
    "section": "Constant Efficiency",
    "text": "Constant Efficiency\nThe simplest approach is to assume constant efficiency:\n\\(\\eta_g = \\text{constant} \\quad \\forall g \\in \\mathcal{G}\\)\n\nFuel consumption: \\(f_{g,t} = \\frac{p_{g,t}}{\\eta_g}\\)\nVariable cost: \\(c^{var}_g = c^{fuel}_g \\sum_{t \\in \\mathcal{T}} f_{g,t}\\)\n\n\n\n\n\n\n\nNote\n\n\n\nConstant efficiency is a simplification that works well for generators operating near their optimal point.",
    "crumbs": [
      "07 Storage",
      "Lecture"
    ]
  },
  {
    "objectID": "part-07/lecture-storage.html#linear-efficiency-function",
    "href": "part-07/lecture-storage.html#linear-efficiency-function",
    "title": "Lecture VII - Storage Modeling",
    "section": "Linear Efficiency Function",
    "text": "Linear Efficiency Function\nWhile efficiency can be modeled as a linear function of power output:\n\\(\\eta_g(p_{g,t}) = \\alpha_g + \\beta_g p_{g,t}\\)\nThis leads to a non-linear fuel consumption function:\n\\(f_{g,t} = \\frac{p_{g,t}}{\\alpha_g + \\beta_g p_{g,t}}\\)\n\n\n\n\n\n\nNote\n\n\n\nDirect linear approximation of efficiency is not possible in MILP because:\n\nFuel consumption \\(f_{g,t} = \\frac{p_{g,t}}{\\eta_g(p_{g,t})}\\) involves variable multiplication\nThis would make the problem non-linear\nInstead, we directly approximate the fuel consumption curve \\(f_{g,t}\\) as a linear function of power output \\(p_{g,t}\\)",
    "crumbs": [
      "07 Storage",
      "Lecture"
    ]
  },
  {
    "objectID": "part-07/lecture-storage.html#piecewise-linear-approximation",
    "href": "part-07/lecture-storage.html#piecewise-linear-approximation",
    "title": "Lecture VII - Storage Modeling",
    "section": "Piecewise Linear Approximation",
    "text": "Piecewise Linear Approximation\nFor non-linear fuel consumption curves, we use piecewise linear approximation:\n\nDivide the power range into segments\nApproximate each segment with a linear function\nUse binary variables to select the active segment\n\n\nMathematical Formulation\n\\(f_{g,t} = \\sum_{k \\in \\mathcal{K}} \\lambda_{g,t,k} F_{g,k}\\)\nwhere:\n\n\\(\\mathcal{K}\\) is the set of segments\n\\(\\lambda_{g,t,k}\\) are the weights for each segment\n\\(F_{g,k}\\) is the fuel consumption in segment \\(k\\)\n\n\n\nBinary Variables for Segment Selection\nTo ensure that only one segment is active at a time, we introduce binary variables \\(\\delta_{g,t,k}\\):\n\n\\(\\delta_{g,t,k} = 1\\) if segment \\(k\\) is active for generator \\(g\\) at time \\(t\\)\n\\(\\delta_{g,t,k} = 0\\) otherwise\n\nThese binary variables are used to:\n\nSelect which segment is active\nEnsure the weights \\(\\lambda_{g,t,k}\\) are only non-zero for the active segment\nMaintain the convexity of the piecewise linear approximation\n\n\n\nConstraints\nSegment Selection:\n\\(\\sum_{k \\in \\mathcal{K}} \\delta_{g,t,k} = 1 \\quad \\forall g \\in \\mathcal{G}, t \\in \\mathcal{T}\\)\nPower Output:\n\\(p_{g,t} = \\sum_{k \\in \\mathcal{K}} \\lambda_{g,t,k} P_{g,k} \\quad \\forall g \\in \\mathcal{G}, t \\in \\mathcal{T}\\)\nSegment Limits:\n\\(\\lambda_{g,t,k} \\leq \\delta_{g,t,k} \\quad \\forall g \\in \\mathcal{G}, t \\in \\mathcal{T}, k \\in \\mathcal{K}\\)\n\n\n\n\n\n\nNote\n\n\n\nThe binary variables \\(\\delta_{g,t,k}\\) ensure that only one segment is active at a time, while the weights \\(\\lambda_{g,t,k}\\) determine the exact position within that segment. This approach maintains linearity while accurately approximating non-linear efficiency curves.\n\n\n\n\nVisual Explanation\n\n    \n    \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n    \n    \n    \n    \n        \\(p_{g,t}\\)\n    \n    \n        \\(f_{g,t}\\)\n    \n    \n        \\(\\text{Original curve}\\)\n    \n    \n        \\(\\text{Piecewise linear}\\)\n    \n    \n    \n    \n        \\(\\delta_{g,t,1}=0\\)\n    \n    \n        \\(\\delta_{g,t,2}=1\\)\n    \n    \n        \\(\\delta_{g,t,3}=0\\)\n    \n    \n        \\(\\delta_{g,t,4}=0\\)\n    \n    \n    \n    \n        \\(\\lambda_{g,t,1}\\)\n    \n    \n        \\(\\lambda_{g,t,2}\\)\n    \n    \n    \n    \n        \\(F_{g,1}\\)\n    \n    \n        \\(F_{g,2}\\)\n    \n    \n        \\(F_{g,3}\\)\n    \n    \n        \\(F_{g,4}\\)\n    \n    \n    \n    \n        \\(\\text{Fuel Consumption }[MWh]\\)\n    \n    \n    \n    \n        \\(\\text{Power Output }[MW]\\)\n    \n\n\n\n\n\n\n\nDiagram Explanation\n\n\n\nThe diagram shows:\n\nOriginal convex fuel consumption curve (blue) and its piecewise linear approximation (red)\nExample point (green) at (\\(p_{g,t}\\), \\(f_{g,t}\\))\nWeights (\\(\\lambda\\)) determining position within segments\nBinary variables (\\(\\delta\\)) selecting active segment\n\nThe point lies in segment 2, with:\n\n\\(\\delta_{g,t,2}=1\\) selects this segment\n\\(\\lambda_{g,t,1}\\) and \\(\\lambda_{g,t,2}\\) determine the exact position within the segment\nOther segments are inactive (\\(\\delta_{g,t,k}=0\\) for \\(k \\neq 2\\))\n\n\n\n\n\nConvexity and Binary Variables\nThe piecewise linear approximation must be convex to ensure:\n\nThe fuel consumption curve is monotonically increasing\nThe optimization problem remains linear\nThe solution is unique and globally optimal\n\nThe binary variables \\(\\delta_{g,t,k}\\) enforce convexity by:\n\nEnsuring only one segment is active at a time\nPreventing interpolation between non-adjacent segments\nMaintaining the proper order of segments\n\nIn the example above:\n\nThe point (\\(p_{g,t}\\), \\(f_{g,t}\\)) lies in segment 2\n\\(\\delta_{g,t,2}=1\\) selects this segment\n\\(\\lambda_{g,t,1}\\) and \\(\\lambda_{g,t,2}\\) determine the exact position within the segment\nOther segments are inactive (\\(\\delta_{g,t,k}=0\\) for \\(k \\neq 2\\))\n\n\n\n\n\n\n\nTip\n\n\n\nWhile the efficiency curve of a thermal generator typically is concave, we model the fuel consumption curve (\\(f = p/\\eta\\)) which is convex. This allows us to use piecewise linear approximation in our MILP formulation while maintaining mathematical properties needed for optimization. The convexity of the fuel consumption curve allows us to use piecewise linear approximation in our MILP formulation while maintaining mathematical properties needed for optimization.",
    "crumbs": [
      "07 Storage",
      "Lecture"
    ]
  },
  {
    "objectID": "part-07/lecture-storage.html#battery-storage-system",
    "href": "part-07/lecture-storage.html#battery-storage-system",
    "title": "Lecture VII - Storage Modeling",
    "section": "Battery Storage System",
    "text": "Battery Storage System\nWe model a battery storage system with the following characteristics:\n\nEnergy capacity (MWh)\nPower capacity (MW)\nCharge/discharge efficiency\nSelf-discharge rate\nDepth of discharge limit",
    "crumbs": [
      "07 Storage",
      "Lecture"
    ]
  },
  {
    "objectID": "part-07/lecture-storage.html#sets-and-indices",
    "href": "part-07/lecture-storage.html#sets-and-indices",
    "title": "Lecture VII - Storage Modeling",
    "section": "Sets and Indices",
    "text": "Sets and Indices\n\n\\(\\mathcal{S}\\) - Set of storage units indexed by \\(s \\in \\{1,2,...,|\\mathcal{S}|\\}\\)\n\\(\\mathcal{T}\\) - Set of time periods indexed by \\(t \\in \\{1,2,...,|\\mathcal{T}|\\}\\)",
    "crumbs": [
      "07 Storage",
      "Lecture"
    ]
  },
  {
    "objectID": "part-07/lecture-storage.html#decision-variables",
    "href": "part-07/lecture-storage.html#decision-variables",
    "title": "Lecture VII - Storage Modeling",
    "section": "Decision Variables",
    "text": "Decision Variables\n\n\\(e_{s,t}\\) - Energy level of storage \\(s\\) at time \\(t\\) [MWh]\n\\(p^{ch}_{s,t}\\) - Charging power of storage \\(s\\) at time \\(t\\) [MW]\n\\(p^{dis}_{s,t}\\) - Discharging power of storage \\(s\\) at time \\(t\\) [MW]\n\\(u^{ch}_{s,t}\\) - Binary variable for charging status of storage \\(s\\) at time \\(t\\)\n\\(u^{dis}_{s,t}\\) - Binary variable for discharging status of storage \\(s\\) at time \\(t\\)",
    "crumbs": [
      "07 Storage",
      "Lecture"
    ]
  },
  {
    "objectID": "part-07/lecture-storage.html#parameters",
    "href": "part-07/lecture-storage.html#parameters",
    "title": "Lecture VII - Storage Modeling",
    "section": "Parameters",
    "text": "Parameters\n\n\\(E^{max}_s\\) - Maximum energy capacity of storage \\(s\\) [MWh]\n\\(E^{min}_s\\) - Minimum energy level of storage \\(s\\) [MWh]\n\\(P^{ch,max}_s\\) - Maximum charging power of storage \\(s\\) [MW]\n\\(P^{dis,max}_s\\) - Maximum discharging power of storage \\(s\\) [MW]\n\\(\\eta^{ch}_s\\) - Charging efficiency of storage \\(s\\)\n\\(\\eta^{dis}_s\\) - Discharging efficiency of storage \\(s\\)\n\\(sdr_s\\) - Self-discharge rate of storage \\(s\\) per time step\n\\(R^{ch}_s\\) - Maximum ramp-up rate for charging of storage \\(s\\) [MW/h]\n\\(R^{dis}_s\\) - Maximum ramp-up rate for discharging of storage \\(s\\) [MW/h]",
    "crumbs": [
      "07 Storage",
      "Lecture"
    ]
  },
  {
    "objectID": "part-07/lecture-storage.html#energy-balance-constraint",
    "href": "part-07/lecture-storage.html#energy-balance-constraint",
    "title": "Lecture VII - Storage Modeling",
    "section": "Energy Balance Constraint",
    "text": "Energy Balance Constraint\n\\(e_{s,t} = (1-sdr_s)e_{s,t-1} + \\eta^{ch}_s p^{ch}_{s,t} - \\frac{p^{dis}_{s,t}}{\\eta^{dis}_s} \\quad \\forall s \\in \\mathcal{S}, t \\in \\mathcal{T}\\)\n\n\n\n\n\n\nTip\n\n\n\nThis constraint ensures that the energy level at time \\(t\\) equals:\n\nPrevious energy level minus self-discharge\nPlus energy from charging (accounting for efficiency)\nMinus energy from discharging (accounting for efficiency)\n\nFor batteries the energy level is often referred to as state of charge (SOC).",
    "crumbs": [
      "07 Storage",
      "Lecture"
    ]
  },
  {
    "objectID": "part-07/lecture-storage.html#energy-limits-constraint",
    "href": "part-07/lecture-storage.html#energy-limits-constraint",
    "title": "Lecture VII - Storage Modeling",
    "section": "Energy Limits Constraint",
    "text": "Energy Limits Constraint\n\\(E^{min}_s \\leq e_{s,t} \\leq E^{max}_s \\quad \\forall s \\in \\mathcal{S}, t \\in \\mathcal{T}\\)\n\n\n\n\n\n\nTip\n\n\n\nThis constraint ensures that:\n\nThe energy level never falls below the minimum level (depth of discharge)\nThe energy level never exceeds the maximum capacity",
    "crumbs": [
      "07 Storage",
      "Lecture"
    ]
  },
  {
    "objectID": "part-07/lecture-storage.html#power-limits-and-mutual-exclusion",
    "href": "part-07/lecture-storage.html#power-limits-and-mutual-exclusion",
    "title": "Lecture VII - Storage Modeling",
    "section": "Power Limits and Mutual Exclusion",
    "text": "Power Limits and Mutual Exclusion\n\\(0 \\leq p^{ch}_{s,t} \\leq P^{ch,max}_s u^{ch}_{s,t} \\quad \\forall s \\in \\mathcal{S}, t \\in \\mathcal{T}\\)\n\\(0 \\leq p^{dis}_{s,t} \\leq P^{dis,max}_s u^{dis}_{s,t} \\quad \\forall s \\in \\mathcal{S}, t \\in \\mathcal{T}\\)\n\\(u^{ch}_{s,t} + u^{dis}_{s,t} \\leq 1 \\quad \\forall s \\in \\mathcal{S}, t \\in \\mathcal{T}\\)\n\n\n\n\n\n\nTip\n\n\n\nThese constraints ensure that:\n\nCharging power is between zero and maximum when charging is active\nDischarging power is between zero and maximum when discharging is active\nThe storage cannot charge and discharge simultaneously",
    "crumbs": [
      "07 Storage",
      "Lecture"
    ]
  },
  {
    "objectID": "part-07/lecture-storage.html#when-is-mutual-exclusion-required-technical",
    "href": "part-07/lecture-storage.html#when-is-mutual-exclusion-required-technical",
    "title": "Lecture VII - Storage Modeling",
    "section": "When is Mutual Exclusion Required? (Technical)",
    "text": "When is Mutual Exclusion Required? (Technical)\nQuestion: When do we need the mutual exclusion constraint from a technical perspective?\n. . .\n\nBattery Storage Systems:\n\nRequired due to physical limitations\nPrevents simultaneous charge/discharge\nProtects battery life and efficiency\nAvoids internal power circulation\n\nPumped Hydro Storage:\n\nNot required\nCan have separate pumps and turbines\nAllows simultaneous operation\nDifferent equipment for each direction\n\nThermal Storage:\n\nMay or may not be required\nDepends on system design\nConsider heat transfer limitations\nCan have separate charging/discharging circuits",
    "crumbs": [
      "07 Storage",
      "Lecture"
    ]
  },
  {
    "objectID": "part-07/lecture-storage.html#when-is-mutual-exclusion-required-economic",
    "href": "part-07/lecture-storage.html#when-is-mutual-exclusion-required-economic",
    "title": "Lecture VII - Storage Modeling",
    "section": "When is Mutual Exclusion Required? (Economic)",
    "text": "When is Mutual Exclusion Required? (Economic)\nQuestion: When do we need the mutual exclusion constraint from an economic perspective?\n. . .\n\nEfficiency Losses:\n\nCharging and discharging both have efficiency losses\nSimultaneous operation would create unnecessary losses\nRound-trip efficiency is typically 70-90%\n\nWear and Tear:\n\nEach charge/discharge cycle causes wear\nSimultaneous operation increases wear\nReduces system lifetime\nMaintenance costs increase\n\nEconomic Optimization:\n\nPrevents unnecessary cycling\nAvoids situations where:\n\nCost of efficiency losses &lt;= cost of increasing power consumption\nCost of efficiency losses &lt;= cost of curtailing power production\nwhile actual costs of the cycling are not included in the model\n\n\n\n\n\n\n\n\n\nSummary: Mutual Exclusion Decision\n\n\n\nThe mutual exclusion constraint should be included when:\n\nTechnically Required: Physical limitations prevent simultaneous operation\nEconomically Beneficial: Efficiency losses and wear costs exceed benefits but are not included in the model\nOperationally Sensible: System design favors separate charging/discharging\n\nThe decision depends on both the storage technology and the specific economic context of the application.",
    "crumbs": [
      "07 Storage",
      "Lecture"
    ]
  },
  {
    "objectID": "part-07/lecture-storage.html#ramp-rate-constraints",
    "href": "part-07/lecture-storage.html#ramp-rate-constraints",
    "title": "Lecture VII - Storage Modeling",
    "section": "Ramp Rate Constraints",
    "text": "Ramp Rate Constraints\n\\(p^{ch}_{s,t} - p^{ch}_{s,t-1} \\leq R^{ch}_s \\quad \\forall s \\in \\mathcal{S}, t \\in \\mathcal{T}\\) \\(p^{dis}_{s,t} - p^{dis}_{s,t-1} \\leq R^{dis}_s \\quad \\forall s \\in \\mathcal{S}, t \\in \\mathcal{T}\\)\n\n\n\n\n\n\nTip\n\n\n\nThese constraints limit how quickly the storage can change its charging or discharging power:\n\nPrevents sudden changes that could damage equipment\nAccounts for physical limitations of the storage system\nMay be different for charging and discharging",
    "crumbs": [
      "07 Storage",
      "Lecture"
    ]
  },
  {
    "objectID": "part-07/lecture-storage.html#extended-model",
    "href": "part-07/lecture-storage.html#extended-model",
    "title": "Lecture VII - Storage Modeling",
    "section": "Extended Model",
    "text": "Extended Model\nWe now optimize both energy and power capacity:\n\nAdditional Decision Variables\nNew Decision Variables:\n\n\\(e^{nom}_s\\) - Nominal energy capacity of storage \\(s\\) [MWh]\n\\(p^{ch,nom}_s\\) - Nominal charging power of storage \\(s\\) [MW]\n\\(p^{dis,nom}_s\\) - Nominal discharging power of storage \\(s\\) [MW]\n\nVariables (previously parameters):\n\n\\(e^{max}_s\\) - Maximum energy capacity of storage \\(s\\) [MWh]\n\\(e^{min}_s\\) - Minimum energy level of storage \\(s\\) [MWh]\n\\(p^{ch,max}_s\\) - Maximum charging power of storage \\(s\\) [MW]\n\\(p^{dis,max}_s\\) - Maximum discharging power of storage \\(s\\) [MW]\n\n\n\nAdditional Parameters\n\n\\(C^{E}_s\\) - Cost per MWh of energy capacity for storage \\(s\\) [EUR/MWh]\n\\(C^{P,ch}_s\\) - Cost per MW of charging power capacity for storage \\(s\\) [EUR/MW]\n\\(C^{P,dis}_s\\) - Cost per MW of discharging power capacity for storage \\(s\\) [EUR/MW]\n\\(DoD_s\\) - Depth of discharge limit for storage \\(s\\) [%]\n\\(F^{PVAF}\\) - Present value annuity factor for the investment costs\n\n\n\nModified Constraints\nEnergy Capacity:\n\\(e^{min}_s = DoD_s e^{nom}_s \\quad \\forall s \\in \\mathcal{S}\\)\n\\(e^{max}_s = e^{nom}_s \\quad \\forall s \\in \\mathcal{S}\\)\nPower Capacity:\n\\(p^{ch,max}_s = p^{ch,nom}_s \\quad \\forall s \\in \\mathcal{S}\\)\n\\(p^{dis,max}_s = p^{dis,nom}_s \\quad \\forall s \\in \\mathcal{S}\\)\n\n\nExtended Objective Function\nAdd to the original objective:\n\\(\\text{Minimize} \\quad ... + \\sum_{s \\in \\mathcal{S}} (C^{E}_s / F^{PVAF} e^{nom}_s + C^{P,ch}_s p^{ch,nom}_s + C^{P,dis}_s p^{dis,nom}_s)\\)\n\n\n\n\n\n\nNote\n\n\n\nThis extension allows us to find the optimal storage capacity that balances investment costs with operational benefits. The objective function includes both energy and power capacity costs.\nThe investment costs and operational costs need to be calculated on the same time basis to be comparable. While operational costs are calculated for a specific time horizon (e.g. one year), investment costs are typically one-time fixed costs. Therefore, the investment costs need to be converted to an equivalent annual cost using the present value annuity factor (PVAF). This ensures we compare annual operational benefits with annualized investment costs.",
    "crumbs": [
      "07 Storage",
      "Lecture"
    ]
  },
  {
    "objectID": "part-07/lecture-storage.html#key-insights",
    "href": "part-07/lecture-storage.html#key-insights",
    "title": "Lecture VII - Storage Modeling",
    "section": "Key Insights",
    "text": "Key Insights\n\nTrade-off Analysis:\n\nHigher capacity reduces operational costs\nHigher capacity increases investment costs\nOptimal capacity depends on usage patterns, technical and economic parameters\n\nEconomic Considerations:\n\nInvestment costs are fixed\nOperational benefits are time-dependent\nNeed to consider lifetime of the system\nSeparate costs for energy and power capacity\n\nTechnical Constraints:\n\nDepth of discharge affects usable capacity\nEfficiency losses impact economic viability\nPower capacity affects flexibility\nDifferent power ratings for charging and discharging\n\n\n\n\n\n\n\n\nTip\n\n\n\nThe optimal storage capacity depends on the specific use case, electricity prices, and technical parameters of the storage system. The model now accounts for separate costs and capacities for energy storage and power handling equipment (charging/discharging infrastructure that converts between electrical energy and the storage medium’s form of energy, such as chemical energy in batteries or potential energy in pumped hydro).",
    "crumbs": [
      "07 Storage",
      "Lecture"
    ]
  },
  {
    "objectID": "part-07/lecture-storage.html#real-world-applications",
    "href": "part-07/lecture-storage.html#real-world-applications",
    "title": "Lecture VII - Storage Modeling",
    "section": "Real-World Applications",
    "text": "Real-World Applications\n\nInvestment planning for new storage systems\nLocal energy system planning\nSystem operation planning",
    "crumbs": [
      "07 Storage",
      "Lecture"
    ]
  },
  {
    "objectID": "part-07/lecture-storage.html#further-extensions-for-battery-storage-use-cases",
    "href": "part-07/lecture-storage.html#further-extensions-for-battery-storage-use-cases",
    "title": "Lecture VII - Storage Modeling",
    "section": "Further Extensions for Battery Storage Use Cases",
    "text": "Further Extensions for Battery Storage Use Cases\n\nMulti-market trading and operation\n\nEnergy services: PPA, EPEX Day-ahead (XETRA), EPEX Intraday Continuous, EPEX Intraday Auction, etc.\nAncillary services: Primary Control Reserve (FCR), Secondary Control Reserve (aFRR), Minute Reserve (mFRR), Reactive Power, etc.\n\nEmission constraints\nUncertainty in forecasts",
    "crumbs": [
      "07 Storage",
      "Lecture"
    ]
  },
  {
    "objectID": "part-07/lecture-storage.html#section",
    "href": "part-07/lecture-storage.html#section",
    "title": "Lecture VII - Storage Modeling",
    "section": "",
    "text": "Questions?",
    "crumbs": [
      "07 Storage",
      "Lecture"
    ]
  },
  {
    "objectID": "part-07/lecture-storage.html#literature-i",
    "href": "part-07/lecture-storage.html#literature-i",
    "title": "Lecture VII - Storage Modeling",
    "section": "Literature I",
    "text": "Literature I\nFor more interesting literature to learn more about Julia, take a look at the literature list of this course.",
    "crumbs": [
      "07 Storage",
      "Lecture"
    ]
  },
  {
    "objectID": "part-07/lecture-storage.html#literature-ii",
    "href": "part-07/lecture-storage.html#literature-ii",
    "title": "Lecture VII - Storage Modeling",
    "section": "Literature II",
    "text": "Literature II\nFor a detailed mathematical formulation of the Unit Commitment problem, see Morales-Espana, Latorre, and Ramos (2013) and Zimmermann and Kather (2019).",
    "crumbs": [
      "07 Storage",
      "Lecture"
    ]
  },
  {
    "objectID": "part-07/lecture-presentation.html#unit-commitment-problem-overview",
    "href": "part-07/lecture-presentation.html#unit-commitment-problem-overview",
    "title": "Lecture VII - Storage Modeling",
    "section": "Unit Commitment Problem Overview",
    "text": "Unit Commitment Problem Overview\n\nObjective: Minimize total generation cost over multiple time periods\nDecision Variables:\n\nPower output of thermal generators (\\(p_{g,t}\\))\nPower output of wind turbines (\\(p_{w,t}\\))\nBinary variables for generator status (\\(u_{g,t}\\))\nBinary variables for startup events (\\(v_{g,t}\\))\n\nKey Constraints:\n\nPower balance\nGenerator limits\nWind limits\nMinimum up/down times\nRamp rate limits\nStartup variable definition\n\n\n\n\n\n\n\n\nNote\n\n\nThe Unit Commitment problem extends Economic Dispatch by adding operational constraints and time-dependent unit commitment decisions."
  },
  {
    "objectID": "part-07/lecture-presentation.html#mathematical-formulation",
    "href": "part-07/lecture-presentation.html#mathematical-formulation",
    "title": "Lecture VII - Storage Modeling",
    "section": "Mathematical Formulation",
    "text": "Mathematical Formulation\nObjective Function\n\\(\\text{Minimize} \\quad \\sum_{t \\in \\mathcal{T}} \\left( \\sum_{g \\in \\mathcal{G}} (c^{var}_g p_{g,t} + c^{fix}_g u_{g,t} + c^{start}_g v_{g,t}) + \\sum_{w \\in \\mathcal{W}} c^{var}_w p_{w,t} \\right)\\)\nKey Constraints\n\nPower Balance:\n\n\\(\\sum_{g \\in \\mathcal{G}} p_{g,t} + \\sum_{w \\in \\mathcal{W}} p_{w,t} = d^f_t \\quad \\forall t \\in \\mathcal{T}\\)\n\nGenerator Limits:\n\n\\(p^{\\min}_g u_{g,t} \\leq p_{g,t} \\leq p^{\\max}_g u_{g,t} \\quad \\forall g \\in \\mathcal{G}, t \\in \\mathcal{T}\\)\n\nWind Power:\n\n\\(0 \\leq p_{w,t} \\leq p^f_{w,t} \\quad \\forall w \\in \\mathcal{W}, t \\in \\mathcal{T}\\)\n\nMinimum Up/Down Times:\n\n\\(u_{g,t} - u_{g,t-1} \\leq u_{g,\\tau} \\quad \\forall g \\in \\mathcal{G}, t \\in \\mathcal{T}, \\tau \\in [t+1, \\min(t+T^{up}_g-1,|\\mathcal{T}|)]\\) \\(u_{g,t-1} - u_{g,t} \\leq 1 - u_{g,\\tau} \\quad \\forall g \\in \\mathcal{G}, t \\in \\mathcal{T}, \\tau \\in [t+1, \\min(t+T^{down}_g-1,|\\mathcal{T}|)]\\)\n\nRamp Rate Limits:\n\n\\(p_{g,t} - p_{g,t-1} \\leq R^{up}_g \\quad \\forall g \\in \\mathcal{G}, t \\in \\mathcal{T}\\) \\(p_{g,t-1} - p_{g,t} \\leq R^{down}_g \\quad \\forall g \\in \\mathcal{G}, t \\in \\mathcal{T}\\)\n\nStartup Variable Definition:\n\n\\(v_{g,t} \\geq u_{g,t} - u_{g,t-1} \\quad \\forall g \\in \\mathcal{G}, t \\in \\mathcal{T}\\)"
  },
  {
    "objectID": "part-07/lecture-presentation.html#model-characteristics",
    "href": "part-07/lecture-presentation.html#model-characteristics",
    "title": "Lecture VII - Storage Modeling",
    "section": "Model Characteristics",
    "text": "Model Characteristics\n\nMixed-Integer Linear Programming (MILP) problem\nBinary variables for generator status and startup events\nTime-dependent decisions\nComputationally challenging due to:\n\nLarge number of binary variables\nLarge number of time steps\nLarge number of constraints (Challenge: finding formulations that are both computationally efficient and mathematically accurate)\nNeed for tight and compact formulations:\n\nTight: Small gap between LP relaxation and integer solution\nCompact: Fewer variables and constraints while maintaining accuracy\n\n\n\n\n\n\n\n\n\nTip\n\n\nThe Unit Commitment problem is fundamental for power system operation, providing a realistic model estimating generator operation over time."
  },
  {
    "objectID": "part-07/lecture-presentation.html#implementation-insights",
    "href": "part-07/lecture-presentation.html#implementation-insights",
    "title": "Lecture VII - Storage Modeling",
    "section": "Implementation Insights",
    "text": "Implementation Insights\n\nData structures use NamedTuples for efficient parameter storage\nResults are stored in DataFrames for easy analysis\nKey metrics tracked:\n\nTotal system cost\nWind curtailment\nThermal and wind generation\nGenerator status and startup events\n\n\n\n\n\n\n\n\nNote\n\n\nThe tutorial demonstrated how to implement and solve the UC problem using Julia and JuMP, including simple visualization of results over time."
  },
  {
    "objectID": "part-07/lecture-presentation.html#solutions-from-last-week",
    "href": "part-07/lecture-presentation.html#solutions-from-last-week",
    "title": "Lecture VII - Storage Modeling",
    "section": "Solutions from last Week",
    "text": "Solutions from last Week\n\nThe tutorials from last week will again be available on Friday\nYou can access them in the project folder on Github\nClick on the little cat icon on the bottom right\n\n\n\n\n\n\n\n\nTip\n\n\nYou can ask questions anytime in class or via email!"
  },
  {
    "objectID": "part-07/lecture-presentation.html#extending-the-unit-commitment-problem",
    "href": "part-07/lecture-presentation.html#extending-the-unit-commitment-problem",
    "title": "Lecture VII - Storage Modeling",
    "section": "Extending the Unit Commitment Problem",
    "text": "Extending the Unit Commitment Problem\nIn this lecture, we will extend the Unit Commitment problem by adding:\n1. Generator efficiency modeling\n2. Storage system modeling\n3. Storage capacity optimization\nThese extensions make the model more realistic and allow for more sophisticated analysis of power systems."
  },
  {
    "objectID": "part-07/lecture-presentation.html#constant-efficiency",
    "href": "part-07/lecture-presentation.html#constant-efficiency",
    "title": "Lecture VII - Storage Modeling",
    "section": "Constant Efficiency",
    "text": "Constant Efficiency\nThe simplest approach is to assume constant efficiency:\n\\(\\eta_g = \\text{constant} \\quad \\forall g \\in \\mathcal{G}\\)\n\nFuel consumption: \\(f_{g,t} = \\frac{p_{g,t}}{\\eta_g}\\)\nVariable cost: \\(c^{var}_g = c^{fuel}_g \\sum_{t \\in \\mathcal{T}} f_{g,t}\\)\n\n\n\n\n\n\n\nNote\n\n\nConstant efficiency is a simplification that works well for generators operating near their optimal point."
  },
  {
    "objectID": "part-07/lecture-presentation.html#linear-efficiency-function",
    "href": "part-07/lecture-presentation.html#linear-efficiency-function",
    "title": "Lecture VII - Storage Modeling",
    "section": "Linear Efficiency Function",
    "text": "Linear Efficiency Function\nWhile efficiency can be modeled as a linear function of power output:\n\\(\\eta_g(p_{g,t}) = \\alpha_g + \\beta_g p_{g,t}\\)\nThis leads to a non-linear fuel consumption function:\n\\(f_{g,t} = \\frac{p_{g,t}}{\\alpha_g + \\beta_g p_{g,t}}\\)\n\n\n\n\n\n\nNote\n\n\nDirect linear approximation of efficiency is not possible in MILP because:\n\nFuel consumption \\(f_{g,t} = \\frac{p_{g,t}}{\\eta_g(p_{g,t})}\\) involves variable multiplication\nThis would make the problem non-linear\nInstead, we directly approximate the fuel consumption curve \\(f_{g,t}\\) as a linear function of power output \\(p_{g,t}\\)"
  },
  {
    "objectID": "part-07/lecture-presentation.html#piecewise-linear-approximation",
    "href": "part-07/lecture-presentation.html#piecewise-linear-approximation",
    "title": "Lecture VII - Storage Modeling",
    "section": "Piecewise Linear Approximation",
    "text": "Piecewise Linear Approximation\nFor non-linear fuel consumption curves, we use piecewise linear approximation:\n\nDivide the power range into segments\nApproximate each segment with a linear function\nUse binary variables to select the active segment\n\nMathematical Formulation\n\\(f_{g,t} = \\sum_{k \\in \\mathcal{K}} \\lambda_{g,t,k} F_{g,k}\\)\nwhere:\n\n\\(\\mathcal{K}\\) is the set of segments\n\\(\\lambda_{g,t,k}\\) are the weights for each segment\n\\(F_{g,k}\\) is the fuel consumption in segment \\(k\\)\n\nBinary Variables for Segment Selection\nTo ensure that only one segment is active at a time, we introduce binary variables \\(\\delta_{g,t,k}\\):\n\n\\(\\delta_{g,t,k} = 1\\) if segment \\(k\\) is active for generator \\(g\\) at time \\(t\\)\n\\(\\delta_{g,t,k} = 0\\) otherwise\n\nThese binary variables are used to:\n\nSelect which segment is active\nEnsure the weights \\(\\lambda_{g,t,k}\\) are only non-zero for the active segment\nMaintain the convexity of the piecewise linear approximation\n\nConstraints\nSegment Selection:\n\\(\\sum_{k \\in \\mathcal{K}} \\delta_{g,t,k} = 1 \\quad \\forall g \\in \\mathcal{G}, t \\in \\mathcal{T}\\)\nPower Output:\n\\(p_{g,t} = \\sum_{k \\in \\mathcal{K}} \\lambda_{g,t,k} P_{g,k} \\quad \\forall g \\in \\mathcal{G}, t \\in \\mathcal{T}\\)\nSegment Limits:\n\\(\\lambda_{g,t,k} \\leq \\delta_{g,t,k} \\quad \\forall g \\in \\mathcal{G}, t \\in \\mathcal{T}, k \\in \\mathcal{K}\\)\n\n\n\n\n\n\nNote\n\n\nThe binary variables \\(\\delta_{g,t,k}\\) ensure that only one segment is active at a time, while the weights \\(\\lambda_{g,t,k}\\) determine the exact position within that segment. This approach maintains linearity while accurately approximating non-linear efficiency curves.\n\n\n\nVisual Explanation\n\n    \n    \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n    \n    \n    \n    \n        \\(p_{g,t}\\)\n    \n    \n        \\(f_{g,t}\\)\n    \n    \n        \\(\\text{Original curve}\\)\n    \n    \n        \\(\\text{Piecewise linear}\\)\n    \n    \n    \n    \n        \\(\\delta_{g,t,1}=0\\)\n    \n    \n        \\(\\delta_{g,t,2}=1\\)\n    \n    \n        \\(\\delta_{g,t,3}=0\\)\n    \n    \n        \\(\\delta_{g,t,4}=0\\)\n    \n    \n    \n    \n        \\(\\lambda_{g,t,1}\\)\n    \n    \n        \\(\\lambda_{g,t,2}\\)\n    \n    \n    \n    \n        \\(F_{g,1}\\)\n    \n    \n        \\(F_{g,2}\\)\n    \n    \n        \\(F_{g,3}\\)\n    \n    \n        \\(F_{g,4}\\)\n    \n    \n    \n    \n        \\(\\text{Fuel Consumption }[MWh]\\)\n    \n    \n    \n    \n        \\(\\text{Power Output }[MW]\\)\n    \n\n\n\n\n\n\n\nDiagram Explanation\n\n\nThe diagram shows:\n\nOriginal convex fuel consumption curve (blue) and its piecewise linear approximation (red)\nExample point (green) at (\\(p_{g,t}\\), \\(f_{g,t}\\))\nWeights (\\(\\lambda\\)) determining position within segments\nBinary variables (\\(\\delta\\)) selecting active segment\n\nThe point lies in segment 2, with:\n\n\\(\\delta_{g,t,2}=1\\) selects this segment\n\\(\\lambda_{g,t,1}\\) and \\(\\lambda_{g,t,2}\\) determine the exact position within the segment\nOther segments are inactive (\\(\\delta_{g,t,k}=0\\) for \\(k \\neq 2\\))\n\n\n\n\nConvexity and Binary Variables\nThe piecewise linear approximation must be convex to ensure:\n\nThe fuel consumption curve is monotonically increasing\nThe optimization problem remains linear\nThe solution is unique and globally optimal\n\nThe binary variables \\(\\delta_{g,t,k}\\) enforce convexity by:\n\nEnsuring only one segment is active at a time\nPreventing interpolation between non-adjacent segments\nMaintaining the proper order of segments\n\nIn the example above:\n\nThe point (\\(p_{g,t}\\), \\(f_{g,t}\\)) lies in segment 2\n\\(\\delta_{g,t,2}=1\\) selects this segment\n\\(\\lambda_{g,t,1}\\) and \\(\\lambda_{g,t,2}\\) determine the exact position within the segment\nOther segments are inactive (\\(\\delta_{g,t,k}=0\\) for \\(k \\neq 2\\))\n\n\n\n\n\n\n\nTip\n\n\nWhile the efficiency curve of a thermal generator typically is concave, we model the fuel consumption curve (\\(f = p/\\eta\\)) which is convex. This allows us to use piecewise linear approximation in our MILP formulation while maintaining mathematical properties needed for optimization. The convexity of the fuel consumption curve allows us to use piecewise linear approximation in our MILP formulation while maintaining mathematical properties needed for optimization."
  },
  {
    "objectID": "part-07/lecture-presentation.html#battery-storage-system",
    "href": "part-07/lecture-presentation.html#battery-storage-system",
    "title": "Lecture VII - Storage Modeling",
    "section": "Battery Storage System",
    "text": "Battery Storage System\nWe model a battery storage system with the following characteristics:\n\nEnergy capacity (MWh)\nPower capacity (MW)\nCharge/discharge efficiency\nSelf-discharge rate\nDepth of discharge limit"
  },
  {
    "objectID": "part-07/lecture-presentation.html#sets-and-indices",
    "href": "part-07/lecture-presentation.html#sets-and-indices",
    "title": "Lecture VII - Storage Modeling",
    "section": "Sets and Indices",
    "text": "Sets and Indices\n\n\\(\\mathcal{S}\\) - Set of storage units indexed by \\(s \\in \\{1,2,...,|\\mathcal{S}|\\}\\)\n\\(\\mathcal{T}\\) - Set of time periods indexed by \\(t \\in \\{1,2,...,|\\mathcal{T}|\\}\\)"
  },
  {
    "objectID": "part-07/lecture-presentation.html#decision-variables",
    "href": "part-07/lecture-presentation.html#decision-variables",
    "title": "Lecture VII - Storage Modeling",
    "section": "Decision Variables",
    "text": "Decision Variables\n\n\\(e_{s,t}\\) - Energy level of storage \\(s\\) at time \\(t\\) [MWh]\n\\(p^{ch}_{s,t}\\) - Charging power of storage \\(s\\) at time \\(t\\) [MW]\n\\(p^{dis}_{s,t}\\) - Discharging power of storage \\(s\\) at time \\(t\\) [MW]\n\\(u^{ch}_{s,t}\\) - Binary variable for charging status of storage \\(s\\) at time \\(t\\)\n\\(u^{dis}_{s,t}\\) - Binary variable for discharging status of storage \\(s\\) at time \\(t\\)"
  },
  {
    "objectID": "part-07/lecture-presentation.html#parameters",
    "href": "part-07/lecture-presentation.html#parameters",
    "title": "Lecture VII - Storage Modeling",
    "section": "Parameters",
    "text": "Parameters\n\n\\(E^{max}_s\\) - Maximum energy capacity of storage \\(s\\) [MWh]\n\\(E^{min}_s\\) - Minimum energy level of storage \\(s\\) [MWh]\n\\(P^{ch,max}_s\\) - Maximum charging power of storage \\(s\\) [MW]\n\\(P^{dis,max}_s\\) - Maximum discharging power of storage \\(s\\) [MW]\n\\(\\eta^{ch}_s\\) - Charging efficiency of storage \\(s\\)\n\\(\\eta^{dis}_s\\) - Discharging efficiency of storage \\(s\\)\n\\(sdr_s\\) - Self-discharge rate of storage \\(s\\) per time step\n\\(R^{ch}_s\\) - Maximum ramp-up rate for charging of storage \\(s\\) [MW/h]\n\\(R^{dis}_s\\) - Maximum ramp-up rate for discharging of storage \\(s\\) [MW/h]"
  },
  {
    "objectID": "part-07/lecture-presentation.html#energy-balance-constraint",
    "href": "part-07/lecture-presentation.html#energy-balance-constraint",
    "title": "Lecture VII - Storage Modeling",
    "section": "Energy Balance Constraint",
    "text": "Energy Balance Constraint\n\\(e_{s,t} = (1-sdr_s)e_{s,t-1} + \\eta^{ch}_s p^{ch}_{s,t} - \\frac{p^{dis}_{s,t}}{\\eta^{dis}_s} \\quad \\forall s \\in \\mathcal{S}, t \\in \\mathcal{T}\\)\n\n\n\n\n\n\nTip\n\n\nThis constraint ensures that the energy level at time \\(t\\) equals:\n\nPrevious energy level minus self-discharge\nPlus energy from charging (accounting for efficiency)\nMinus energy from discharging (accounting for efficiency)\n\nFor batteries the energy level is often referred to as state of charge (SOC)."
  },
  {
    "objectID": "part-07/lecture-presentation.html#energy-limits-constraint",
    "href": "part-07/lecture-presentation.html#energy-limits-constraint",
    "title": "Lecture VII - Storage Modeling",
    "section": "Energy Limits Constraint",
    "text": "Energy Limits Constraint\n\\(E^{min}_s \\leq e_{s,t} \\leq E^{max}_s \\quad \\forall s \\in \\mathcal{S}, t \\in \\mathcal{T}\\)\n\n\n\n\n\n\nTip\n\n\nThis constraint ensures that:\n\nThe energy level never falls below the minimum level (depth of discharge)\nThe energy level never exceeds the maximum capacity"
  },
  {
    "objectID": "part-07/lecture-presentation.html#power-limits-and-mutual-exclusion",
    "href": "part-07/lecture-presentation.html#power-limits-and-mutual-exclusion",
    "title": "Lecture VII - Storage Modeling",
    "section": "Power Limits and Mutual Exclusion",
    "text": "Power Limits and Mutual Exclusion\n\\(0 \\leq p^{ch}_{s,t} \\leq P^{ch,max}_s u^{ch}_{s,t} \\quad \\forall s \\in \\mathcal{S}, t \\in \\mathcal{T}\\)\n\\(0 \\leq p^{dis}_{s,t} \\leq P^{dis,max}_s u^{dis}_{s,t} \\quad \\forall s \\in \\mathcal{S}, t \\in \\mathcal{T}\\)\n\\(u^{ch}_{s,t} + u^{dis}_{s,t} \\leq 1 \\quad \\forall s \\in \\mathcal{S}, t \\in \\mathcal{T}\\)\n\n\n\n\n\n\nTip\n\n\nThese constraints ensure that:\n\nCharging power is between zero and maximum when charging is active\nDischarging power is between zero and maximum when discharging is active\nThe storage cannot charge and discharge simultaneously"
  },
  {
    "objectID": "part-07/lecture-presentation.html#when-is-mutual-exclusion-required-technical",
    "href": "part-07/lecture-presentation.html#when-is-mutual-exclusion-required-technical",
    "title": "Lecture VII - Storage Modeling",
    "section": "When is Mutual Exclusion Required? (Technical)",
    "text": "When is Mutual Exclusion Required? (Technical)\nQuestion: When do we need the mutual exclusion constraint from a technical perspective?\n\n\nBattery Storage Systems:\n\nRequired due to physical limitations\nPrevents simultaneous charge/discharge\nProtects battery life and efficiency\nAvoids internal power circulation\n\nPumped Hydro Storage:\n\nNot required\nCan have separate pumps and turbines\nAllows simultaneous operation\nDifferent equipment for each direction\n\nThermal Storage:\n\nMay or may not be required\nDepends on system design\nConsider heat transfer limitations\nCan have separate charging/discharging circuits"
  },
  {
    "objectID": "part-07/lecture-presentation.html#when-is-mutual-exclusion-required-economic",
    "href": "part-07/lecture-presentation.html#when-is-mutual-exclusion-required-economic",
    "title": "Lecture VII - Storage Modeling",
    "section": "When is Mutual Exclusion Required? (Economic)",
    "text": "When is Mutual Exclusion Required? (Economic)\nQuestion: When do we need the mutual exclusion constraint from an economic perspective?\n\n\nEfficiency Losses:\n\nCharging and discharging both have efficiency losses\nSimultaneous operation would create unnecessary losses\nRound-trip efficiency is typically 70-90%\n\nWear and Tear:\n\nEach charge/discharge cycle causes wear\nSimultaneous operation increases wear\nReduces system lifetime\nMaintenance costs increase\n\nEconomic Optimization:\n\nPrevents unnecessary cycling\nAvoids situations where:\n\nCost of efficiency losses &lt;= cost of increasing power consumption\nCost of efficiency losses &lt;= cost of curtailing power production\nwhile actual costs of the cycling are not included in the model\n\n\n\n\n\n\n\n\n\nSummary: Mutual Exclusion Decision\n\n\nThe mutual exclusion constraint should be included when:\n\nTechnically Required: Physical limitations prevent simultaneous operation\nEconomically Beneficial: Efficiency losses and wear costs exceed benefits but are not included in the model\nOperationally Sensible: System design favors separate charging/discharging\n\nThe decision depends on both the storage technology and the specific economic context of the application."
  },
  {
    "objectID": "part-07/lecture-presentation.html#ramp-rate-constraints",
    "href": "part-07/lecture-presentation.html#ramp-rate-constraints",
    "title": "Lecture VII - Storage Modeling",
    "section": "Ramp Rate Constraints",
    "text": "Ramp Rate Constraints\n\\(p^{ch}_{s,t} - p^{ch}_{s,t-1} \\leq R^{ch}_s \\quad \\forall s \\in \\mathcal{S}, t \\in \\mathcal{T}\\) \\(p^{dis}_{s,t} - p^{dis}_{s,t-1} \\leq R^{dis}_s \\quad \\forall s \\in \\mathcal{S}, t \\in \\mathcal{T}\\)\n\n\n\n\n\n\nTip\n\n\nThese constraints limit how quickly the storage can change its charging or discharging power:\n\nPrevents sudden changes that could damage equipment\nAccounts for physical limitations of the storage system\nMay be different for charging and discharging"
  },
  {
    "objectID": "part-07/lecture-presentation.html#extended-model",
    "href": "part-07/lecture-presentation.html#extended-model",
    "title": "Lecture VII - Storage Modeling",
    "section": "Extended Model",
    "text": "Extended Model\nWe now optimize both energy and power capacity:\nAdditional Decision Variables\nNew Decision Variables:\n\n\\(e^{nom}_s\\) - Nominal energy capacity of storage \\(s\\) [MWh]\n\\(p^{ch,nom}_s\\) - Nominal charging power of storage \\(s\\) [MW]\n\\(p^{dis,nom}_s\\) - Nominal discharging power of storage \\(s\\) [MW]\n\nVariables (previously parameters):\n\n\\(e^{max}_s\\) - Maximum energy capacity of storage \\(s\\) [MWh]\n\\(e^{min}_s\\) - Minimum energy level of storage \\(s\\) [MWh]\n\\(p^{ch,max}_s\\) - Maximum charging power of storage \\(s\\) [MW]\n\\(p^{dis,max}_s\\) - Maximum discharging power of storage \\(s\\) [MW]\n\nAdditional Parameters\n\n\\(C^{E}_s\\) - Cost per MWh of energy capacity for storage \\(s\\) [EUR/MWh]\n\\(C^{P,ch}_s\\) - Cost per MW of charging power capacity for storage \\(s\\) [EUR/MW]\n\\(C^{P,dis}_s\\) - Cost per MW of discharging power capacity for storage \\(s\\) [EUR/MW]\n\\(DoD_s\\) - Depth of discharge limit for storage \\(s\\) [%]\n\\(F^{PVAF}\\) - Present value annuity factor for the investment costs\n\nModified Constraints\nEnergy Capacity:\n\\(e^{min}_s = DoD_s e^{nom}_s \\quad \\forall s \\in \\mathcal{S}\\)\n\\(e^{max}_s = e^{nom}_s \\quad \\forall s \\in \\mathcal{S}\\)\nPower Capacity:\n\\(p^{ch,max}_s = p^{ch,nom}_s \\quad \\forall s \\in \\mathcal{S}\\)\n\\(p^{dis,max}_s = p^{dis,nom}_s \\quad \\forall s \\in \\mathcal{S}\\)\nExtended Objective Function\nAdd to the original objective:\n\\(\\text{Minimize} \\quad ... + \\sum_{s \\in \\mathcal{S}} (C^{E}_s / F^{PVAF} e^{nom}_s + C^{P,ch}_s p^{ch,nom}_s + C^{P,dis}_s p^{dis,nom}_s)\\)\n\n\n\n\n\n\nNote\n\n\nThis extension allows us to find the optimal storage capacity that balances investment costs with operational benefits. The objective function includes both energy and power capacity costs.\nThe investment costs and operational costs need to be calculated on the same time basis to be comparable. While operational costs are calculated for a specific time horizon (e.g. one year), investment costs are typically one-time fixed costs. Therefore, the investment costs need to be converted to an equivalent annual cost using the present value annuity factor (PVAF). This ensures we compare annual operational benefits with annualized investment costs."
  },
  {
    "objectID": "part-07/lecture-presentation.html#key-insights",
    "href": "part-07/lecture-presentation.html#key-insights",
    "title": "Lecture VII - Storage Modeling",
    "section": "Key Insights",
    "text": "Key Insights\n\nTrade-off Analysis:\n\nHigher capacity reduces operational costs\nHigher capacity increases investment costs\nOptimal capacity depends on usage patterns, technical and economic parameters\n\nEconomic Considerations:\n\nInvestment costs are fixed\nOperational benefits are time-dependent\nNeed to consider lifetime of the system\nSeparate costs for energy and power capacity\n\nTechnical Constraints:\n\nDepth of discharge affects usable capacity\nEfficiency losses impact economic viability\nPower capacity affects flexibility\nDifferent power ratings for charging and discharging\n\n\n\n\n\n\n\n\nTip\n\n\nThe optimal storage capacity depends on the specific use case, electricity prices, and technical parameters of the storage system. The model now accounts for separate costs and capacities for energy storage and power handling equipment (charging/discharging infrastructure that converts between electrical energy and the storage medium’s form of energy, such as chemical energy in batteries or potential energy in pumped hydro)."
  },
  {
    "objectID": "part-07/lecture-presentation.html#real-world-applications",
    "href": "part-07/lecture-presentation.html#real-world-applications",
    "title": "Lecture VII - Storage Modeling",
    "section": "Real-World Applications",
    "text": "Real-World Applications\n\nInvestment planning for new storage systems\nLocal energy system planning\nSystem operation planning"
  },
  {
    "objectID": "part-07/lecture-presentation.html#further-extensions-for-battery-storage-use-cases",
    "href": "part-07/lecture-presentation.html#further-extensions-for-battery-storage-use-cases",
    "title": "Lecture VII - Storage Modeling",
    "section": "Further Extensions for Battery Storage Use Cases",
    "text": "Further Extensions for Battery Storage Use Cases\n\nMulti-market trading and operation\n\nEnergy services: PPA, EPEX Day-ahead (XETRA), EPEX Intraday Continuous, EPEX Intraday Auction, etc.\nAncillary services: Primary Control Reserve (FCR), Secondary Control Reserve (aFRR), Minute Reserve (mFRR), Reactive Power, etc.\n\nEmission constraints\nUncertainty in forecasts"
  },
  {
    "objectID": "part-07/lecture-presentation.html#section",
    "href": "part-07/lecture-presentation.html#section",
    "title": "Lecture VII - Storage Modeling",
    "section": "",
    "text": "Questions?"
  },
  {
    "objectID": "part-07/lecture-presentation.html#literature-i",
    "href": "part-07/lecture-presentation.html#literature-i",
    "title": "Lecture VII - Storage Modeling",
    "section": "Literature I",
    "text": "Literature I\nFor more interesting literature to learn more about Julia, take a look at the literature list of this course."
  },
  {
    "objectID": "part-07/lecture-presentation.html#literature-ii",
    "href": "part-07/lecture-presentation.html#literature-ii",
    "title": "Lecture VII - Storage Modeling",
    "section": "Literature II",
    "text": "Literature II\nFor a detailed mathematical formulation of the Unit Commitment problem, see Morales-Espana, Latorre, and Ramos (2013) and Zimmermann and Kather (2019).\n\n\n\n\nMorales-Espana, G., J. M. Latorre, and A. Ramos. 2013. “Tight and Compact MILP Formulation for the Thermal Unit Commitment Problem.” IEEE Transactions on Power Systems 28 (4): 4897–4908.\n\n\nZimmermann, Cors, T., and A. Kather. 2019. “Increasing Tightness by Introduction of Intertemporal Constraints in MILP Unit Commitment.” In NEIS 2019; Conference on Sustainable Energy Supply and Energy Storage Systems, edited by Detlef Schulz, 209–14. VDE Verl."
  },
  {
    "objectID": "part-07/lecture-storage.html#excursion-energy-markets-overview",
    "href": "part-07/lecture-storage.html#excursion-energy-markets-overview",
    "title": "Lecture VII - Storage Modeling",
    "section": "Excursion: Energy Markets Overview",
    "text": "Excursion: Energy Markets Overview\n\nPower Purchase Agreements (PPA):\n\nLong-term contracts (5-20 years)\nFixed or indexed prices\nBilateral agreements\nLow price volatility\nTypically monthly or quarterly settlements\nCan include minimum/maximum volume commitments\nOften includes price escalation clauses\n\n\n\nDay-ahead Market (XETRA):\n\nTrading for next day\nHourly products\nAuction-based\nModerate price volatility\nGate closure: 12:00 (noon) for next day\nResults published around 12:45\nMinimum bid size: 0.1 MW\nPrice range: -500 to 3000 EUR/MWh\n\n\n\nIntraday Continuous:\n\nTrading until 5 minutes before delivery\n15-minute products\nContinuous trading\nHigh price volatility\nMinimum bid size: 0.1 MW\nPrice range: -500 to 3000 EUR/MWh\nTrading hours: 24/7\nOrder book with best bid/ask prices\n\n\n\nIntraday Auction:\n\nAdditional trading opportunities\n15-minute products\nAuction-based\nHigh price volatility\nGate closure: 30 minutes before delivery\nMultiple auctions per day (e.g., 6:00, 12:00, 15:00, 18:00)\nMinimum bid size: 0.1 MW\nPrice range: -500 to 3000 EUR/MWh\n\n\n\nAncillary Services Markets\n\nPrimary Control Reserve (FCR):\n\nFastest response (30 seconds)\nSymmetric (up/down)\nWeekly auctions\nHigh capacity prices\nGate closure: Thursday 12:00\nDelivery period: Monday 00:00 to Sunday 23:59\nMinimum bid size: 1 MW\nMust be available 24/7\nEnergy prices when activated:\n\nUp-regulation: Price of last activated unit (marginal price)\nDown-regulation: Price of last activated unit (marginal price)\nTypically higher than day-ahead prices\n\n\n\n\nSecondary Control Reserve (aFRR):\n\nResponse within 5 minutes\nSymmetric (up/down)\nDaily auctions\nModerate capacity prices\nGate closure: 14:30 for next day\nDelivery period: 00:00 to 23:59\nMinimum bid size: 5 MW\nMust be available for full delivery period\nEnergy prices when activated:\n\nUp-regulation: Price of last activated unit (marginal price)\nDown-regulation: Price of last activated unit (marginal price)\nCan be significantly higher than day-ahead prices\nSeparate price zones for up/down regulation\n\n\n\n\nMinute Reserve (mFRR):\n\nResponse within 15 minutes\nAsymmetric (up/down)\nDaily auctions\nLower capacity prices\nGate closure: 14:30 for next day\nDelivery period: 00:00 to 23:59\nMinimum bid size: 5 MW\nSeparate auctions for up/down regulation\nEnergy prices when activated:\n\nUp-regulation: Price of last activated unit (marginal price)\nDown-regulation: Price of last activated unit (marginal price)\nHighest energy prices among ancillary services\nOften triggered during system stress\n\n\n\n\n\n\n\n\nEnergy Prices in Ancillary Services\n\n\n\nWhen ancillary services are activated:\n\nPrice Formation:\n\nBased on marginal pricing (price of last activated unit)\nCan be significantly higher than day-ahead prices\nSeparate prices for up/down regulation\n\nPrice Volatility:\n\nHighest for mFRR (emergency situations)\nModerate for aFRR (regular balancing)\nLowest for FCR (continuous small adjustments)\n\nRevenue Streams:\n\nCapacity payments (for being available)\nEnergy payments (when activated)\n\n\n\n\n\nReactive Power:\n\nVoltage control\nLocal markets\nContinuous operation\nVaries by region\nTypically monthly contracts\nBased on grid operator requirements\nCompensation for both capacity and energy\nLocation-specific pricing\n\n\n\n\n\n\n\n\nReactive Power and Battery Storage\n\n\n\nBattery storage systems with power electronic converters (inverters) can provide reactive power:\n\nCan provide reactive power independently of active power\nTypical capability: 0.9 leading to 0.9 lagging power factor\nNo additional hardware needed (uses existing inverter)\nCan provide reactive power even when battery is empty\nImportant for grid stability, especially in areas with high renewable penetration\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nStorage systems can participate in multiple markets simultaneously, but need to consider:\n\nTechnical requirements for each market\nMarket timing and deadlines\nCapacity allocation across markets\nPrice volatility and risk\nMinimum bid sizes and price ranges\nContract durations and settlement periods\n\n\n\n\n\n\n\n\n\nAnd that’s it for today’s lecture!\n\n\n\nWe have covered a extended version of the Unit Commitment problem with operation and sizing of storage systems and its mathematical formulation. The tutorial will help you implement and solve this problem using Julia and JuMP.",
    "crumbs": [
      "07 Storage",
      "Lecture"
    ]
  },
  {
    "objectID": "part-07/lecture-presentation.html#excursion-energy-markets-overview",
    "href": "part-07/lecture-presentation.html#excursion-energy-markets-overview",
    "title": "Lecture VII - Storage Modeling",
    "section": "Excursion: Energy Markets Overview",
    "text": "Excursion: Energy Markets Overview\nPower Purchase Agreements (PPA):\n\nLong-term contracts (5-20 years)\nFixed or indexed prices\nBilateral agreements\nLow price volatility\nTypically monthly or quarterly settlements\nCan include minimum/maximum volume commitments\nOften includes price escalation clauses\n\nDay-ahead Market (XETRA):\n\nTrading for next day\nHourly products\nAuction-based\nModerate price volatility\nGate closure: 12:00 (noon) for next day\nResults published around 12:45\nMinimum bid size: 0.1 MW\nPrice range: -500 to 3000 EUR/MWh\n\nIntraday Continuous:\n\nTrading until 5 minutes before delivery\n15-minute products\nContinuous trading\nHigh price volatility\nMinimum bid size: 0.1 MW\nPrice range: -500 to 3000 EUR/MWh\nTrading hours: 24/7\nOrder book with best bid/ask prices\n\nIntraday Auction:\n\nAdditional trading opportunities\n15-minute products\nAuction-based\nHigh price volatility\nGate closure: 30 minutes before delivery\nMultiple auctions per day (e.g., 6:00, 12:00, 15:00, 18:00)\nMinimum bid size: 0.1 MW\nPrice range: -500 to 3000 EUR/MWh\n\nAncillary Services Markets\nPrimary Control Reserve (FCR):\n\nFastest response (30 seconds)\nSymmetric (up/down)\nWeekly auctions\nHigh capacity prices\nGate closure: Thursday 12:00\nDelivery period: Monday 00:00 to Sunday 23:59\nMinimum bid size: 1 MW\nMust be available 24/7\nEnergy prices when activated:\n\nUp-regulation: Price of last activated unit (marginal price)\nDown-regulation: Price of last activated unit (marginal price)\nTypically higher than day-ahead prices\n\n\nSecondary Control Reserve (aFRR):\n\nResponse within 5 minutes\nSymmetric (up/down)\nDaily auctions\nModerate capacity prices\nGate closure: 14:30 for next day\nDelivery period: 00:00 to 23:59\nMinimum bid size: 5 MW\nMust be available for full delivery period\nEnergy prices when activated:\n\nUp-regulation: Price of last activated unit (marginal price)\nDown-regulation: Price of last activated unit (marginal price)\nCan be significantly higher than day-ahead prices\nSeparate price zones for up/down regulation\n\n\nMinute Reserve (mFRR):\n\nResponse within 15 minutes\nAsymmetric (up/down)\nDaily auctions\nLower capacity prices\nGate closure: 14:30 for next day\nDelivery period: 00:00 to 23:59\nMinimum bid size: 5 MW\nSeparate auctions for up/down regulation\nEnergy prices when activated:\n\nUp-regulation: Price of last activated unit (marginal price)\nDown-regulation: Price of last activated unit (marginal price)\nHighest energy prices among ancillary services\nOften triggered during system stress\n\n\n\n\n\n\n\n\nEnergy Prices in Ancillary Services\n\n\nWhen ancillary services are activated:\n\nPrice Formation:\n\nBased on marginal pricing (price of last activated unit)\nCan be significantly higher than day-ahead prices\nSeparate prices for up/down regulation\n\nPrice Volatility:\n\nHighest for mFRR (emergency situations)\nModerate for aFRR (regular balancing)\nLowest for FCR (continuous small adjustments)\n\nRevenue Streams:\n\nCapacity payments (for being available)\nEnergy payments (when activated)\n\n\n\n\n\n\nReactive Power:\n\nVoltage control\nLocal markets\nContinuous operation\nVaries by region\nTypically monthly contracts\nBased on grid operator requirements\nCompensation for both capacity and energy\nLocation-specific pricing\n\n\n\n\n\n\n\n\nReactive Power and Battery Storage\n\n\nBattery storage systems with power electronic converters (inverters) can provide reactive power:\n\nCan provide reactive power independently of active power\nTypical capability: 0.9 leading to 0.9 lagging power factor\nNo additional hardware needed (uses existing inverter)\nCan provide reactive power even when battery is empty\nImportant for grid stability, especially in areas with high renewable penetration\n\n\n\n\n\n\n\n\n\n\nTip\n\n\nStorage systems can participate in multiple markets simultaneously, but need to consider:\n\nTechnical requirements for each market\nMarket timing and deadlines\nCapacity allocation across markets\nPrice volatility and risk\nMinimum bid sizes and price ranges\nContract durations and settlement periods\n\n\n\n\n\n\n\n\n\n\nAnd that’s it for today’s lecture!\n\n\nWe have covered a extended version of the Unit Commitment problem with operation and sizing of storage systems and its mathematical formulation. The tutorial will help you implement and solve this problem using Julia and JuMP."
  },
  {
    "objectID": "part-07/tutorial-storage.html",
    "href": "part-07/tutorial-storage.html",
    "title": "Tutorial VII - Storage Modeling",
    "section": "",
    "text": "Implement the Unit Commitment problem with storage from the lecture in Julia. Before we start, let’s load the necessary packages and data.\n\nusing JuMP, HiGHS\nusing CSV\nusing DataFrames\nusing CairoMakie\nusing Dates\n\n# Set up CairoMakie\nset_theme!(theme_light())\n\n\n\nFirst, we load the data from the CSV files and process them into dictionaries for easy access.\n\n# Get the directory of the current file\nfile_directory = \"$(@__DIR__)/data\"\n\n# Load data\ndfGenerators = CSV.read(\"$file_directory/generator.csv\", DataFrame)\ndfStorages = CSV.read(\"$file_directory/storage.csv\", DataFrame)\ndfWindTurbines = CSV.read(\"$file_directory/windTurbine.csv\", DataFrame)\ndfScenarios = CSV.read(\"$file_directory/scenario.csv\", DataFrame)\n\n# Process generator data\ndictGenerators = Dict(\n    row.name =&gt; (\n        min_power = row.min_power,\n        max_power = row.max_power,\n        variable_cost = row.variable_cost,\n        fix_cost = row.fix_cost,\n        min_up_time = row.min_up_time,\n        min_down_time = row.min_down_time,\n        ramp_up = row.ramp_up,\n        ramp_down = row.ramp_down,\n        startup_cost = row.startup_cost,\n        efficiency = row.efficiency\n    ) for row in eachrow(dfGenerators)\n)\n\n# Process storage data\ndictStorages = Dict(\n    row.name =&gt; (\n        min_power = row.min_power,\n        max_power = row.max_power,\n        min_energy = row.min_energy,\n        max_energy = row.max_energy,\n        charge_efficiency = row.charge_efficiency,\n        discharge_efficiency = row.discharge_efficiency,\n        self_discharge_rate = row.self_discharge_rate,\n        ramp_up = row.ramp_up,\n        ramp_down = row.ramp_down\n    ) for row in eachrow(dfStorages)\n)\n\n# Process wind turbine data\ndictWindTurbines = Dict(\n    row.name =&gt; (\n        variable_cost = row.variable_cost,\n    ) for row in eachrow(dfWindTurbines)\n)\n\n# Process scenario data\ndate_format = dateformat\"yyyy-mm-dd HH:MM:SS\"\ndictScenarios = Dict()\nfor scenario in unique(dfScenarios.scenario)\n    scenario_data = dfScenarios[dfScenarios.scenario .== scenario, :]\n    dictScenarios[scenario] = (\n        datetime = DateTime.(scenario_data.datetime, date_format),\n        demand_forecast = scenario_data.demand_forecast,\n        wind_forecast = scenario_data.wind_forecast\n    )\nend\n\n\n\n\nNow, let’s implement the Unit Commitment model with storage. We’ll create a function that takes the data dictionaries as input and returns the model.\nTASK: Fill out the code below where you see ## YOUR CODE HERE to implement the storage in the model.\n\nfunction solve_unit_commitment(dictGenerators, dictStorages, dictWindTurbines, scenario)\n    # Create model\n    model = Model(HiGHS.Optimizer)\n    set_silent(model)\n\n    # Define the time periods and sets\n    T = 1:length(scenario.datetime)  # Time periods (hours)\n    G = keys(dictGenerators)  # Set of thermal generators\n    S = keys(dictStorages)    # Set of storage units\n    W = keys(dictWindTurbines) # Set of wind turbines\n\n    # Decision Variables\n    @variable(model, p[g in G, t in T] &gt;= 0)  # Power output of generator g at time t\n    @variable(model, u[g in G, t in T], Bin)  # Binary variable for generator status (1=on, 0=off)\n    @variable(model, v[g in G, t in T], Bin)  # Binary variable for startup (1=startup, 0=no startup)\n    @variable(model, p_w[w in W, t in T] &gt;= 0)  # Power output of wind at time t\n    @variable(model, p_fictive[t in T] &gt;= 0)  # Fictive power at time t -&gt; used to model a fictive production in power balance constraint and penalize it with a very high cost in the objective function in case the scenario is not feasible, i.e. not enough generation is available to cover the demand\n\n    # Storage variables\n    @variable(model, p_ch[s in S, t in T] &gt;= 0)     # Charging power of storage s at time t\n    @variable(model, p_dis[s in S, t in T] &gt;= 0)    # Discharging power of storage s at time t\n    @variable(model, e[s in S, t in T] &gt;= 0)        # Energy level of storage s at time t\n    @variable(model, u_ch[s in S, t in T], Bin)     # Binary variable for charging status (1=charging, 0=not charging)\n    @variable(model, u_dis[s in S, t in T], Bin)    # Binary variable for discharging status (1=discharging, 0=not discharging)\n\n    # Objective Function\n    @objective(model, Min, sum(\n        dictGenerators[g].variable_cost * p[g,t] +   # Variable cost of production\n        dictGenerators[g].fix_cost * u[g,t] +        # Fixed cost of running\n        dictGenerators[g].startup_cost * v[g,t]      # Startup cost of starting the generator\n        for g in G, t in T\n    ) + sum(\n        dictWindTurbines[w].variable_cost * p_w[w,t]    # Variable cost of wind production\n        for w in W, t in T\n    ) + sum(\n        1000 * p_fictive[t]    # Cost of fictive production\n        for t in T\n    ))\n\n    # Constraints\n    # Power balance constraint (including storage): Total generation must equal demand\n    ## YOUR CODE HERE\n\n\n    # Generator limits: Power output must be within min/max when running\n    @constraint(model, [g in G, t in T],\n        p[g,t] &lt;= dictGenerators[g].max_power * u[g,t] # Max power when running\n    )\n    @constraint(model, [g in G, t in T],\n        p[g,t] &gt;= dictGenerators[g].min_power * u[g,t] # Min power when running\n    )\n\n    # Wind limits: Wind power cannot exceed forecast\n    @constraint(model, [w in W, t in T],\n        p_w[w,t] &lt;= scenario.wind_forecast[t]\n    )\n\n    # Minimum up time: Generator must stay on for minimum duration after startup\n    @constraint(model, min_up[g in G, t in T],\n        sum(u[g,τ] for τ in max(1, t-dictGenerators[g].min_up_time+1):t) &gt;= \n        dictGenerators[g].min_up_time * v[g,t]\n    )\n    \n    # Minimum down time: Generator must stay off for minimum duration after shutdown\n    @constraint(model, min_down[g in G, t in T],\n        sum(1 - u[g,τ] for τ in max(1, t-dictGenerators[g].min_down_time+1):t) &gt;= \n        dictGenerators[g].min_down_time * (1 - u[g,t])\n    )\n\n    # Ramp rate limits: Power change between consecutive timesteps/hours is limited\n    @constraint(model, [g in G, t in 2:length(T)],\n        p[g,t] - p[g,t-1] &lt;= dictGenerators[g].ramp_up      # Max ramp up\n    )\n    @constraint(model, [g in G, t in 2:length(T)],\n        p[g,t-1] - p[g,t] &lt;= dictGenerators[g].ramp_down    # Max ramp down\n    )\n\n    # Startup variable definition: v_g[g,t] = 1 if generator g is started at time t\n    @constraint(model, [g in G, t in 2:length(T)],\n        v[g,t] &gt;= u[g,t] - u[g,t-1]     # v_g = 1 if u_g changes from 0 (t-1) to 1 (t)\n    )\n\n    # Storage constraints\n    # Energy balance (Tip: start at t=2)\n    ## YOUR CODE HERE\n\n\n    # Energy balance at t=1: Initial energy level (assume empty at start) (Tip: define the constraint for e[s,t] at t=1)\n    ## YOUR CODE HERE\n\n\n    # Energy limits: Energy level must be within min/max\n    ## YOUR CODE HERE\n\n\n    # Power limits and mutual exclusion: Storage power cannot exceed max power when charging/discharging and charging and discharging cannot happen at the same time\n    ## YOUR CODE HERE\n\n\n    # Storage ramp rate limits: Power change between consecutive timesteps/hours is limited (Tip: define the constraints starting at t=2)\n\n\n    # Solve the model\n    optimize!(model)\n\n    # Assert that the solution is feasible\n    if termination_status(model) != MOI.OPTIMAL\n        ts = termination_status(model)\n        @info \"Optimization finished. The model was not solved correctly. Termination Status: $ts\"\n        # Helpful resource: https://jump.dev/JuMP.jl/stable/manual/solutions/#Conflicts\n    end\n\n    # Return results\n    return (\n        p_g = value.(p),      # Generator power output\n        p_w = value.(p_w),    # Wind power output\n        u_g = value.(u),      # Generator status\n        v_g = value.(v),      # Startup events\n        p_ch = value.(p_ch),  # Storage charging power\n        p_dis = value.(p_dis),# Storage discharging power\n        e = value.(e),        # Storage energy level\n        total_cost = objective_value(model)\n    )\nend\n\n\n\n\nNow, let’s solve the model and analyze the results with simple plotting.\n\n# Create a dataframe to store results\nresults_df = DataFrame(\n    scenario = String[],        # Scenario identifier\n    datetime = DateTime[],      # Timestamp\n    total_cost = Float64[],     # Total system cost\n    wind_curtailment = Float64[], # Curtailed wind power\n    thermal_generation = Float64[], # Total thermal generation\n    wind_generation = Float64[],    # Total wind generation\n    storage_charge = Float64[],     # Storage charging power\n    storage_discharge = Float64[],  # Storage discharging power\n    storage_energy = Float64[]      # Storage energy level\n)\n\n# Loop over scenarios\nfor (scenario_name, scenario_data) in dictScenarios\n    solution = solve_unit_commitment(dictGenerators, dictStorages, dictWindTurbines, scenario_data)\n\n    # Store results for each time period\n    for t in 1:length(scenario_data.datetime)\n        push!(results_df, (\n            scenario_name,\n            scenario_data.datetime[t],\n            solution.total_cost,\n            sum(scenario_data.wind_forecast[t] - solution.p_w[w,t] for w in keys(dictWindTurbines)),\n            sum(solution.p_g[g,t] for g in keys(dictGenerators)),\n            sum(solution.p_w[w,t] for w in keys(dictWindTurbines)),\n            sum(solution.p_ch[s,t] for s in keys(dictStorages)),\n            sum(solution.p_dis[s,t] for s in keys(dictStorages)),\n            sum(solution.e[s,t] for s in keys(dictStorages))\n        ))\n    end\nend\n\n# Plot generation over time for each scenario\nfor (scenario_name, scenario_data) in dictScenarios\n    # Create figure with subplots\n    fig = Figure(size=(1000, 800))\n    \n    # Format datetime to show only hours\n    hours = hour.(results_df.datetime)\n    \n    # Generation profile\n    ax1 = Axis(fig[1, 1], xlabel=\"Hour of Day\", ylabel=\"Power [MW]\")\n    lines!(ax1, hours, results_df.thermal_generation, label=\"Thermal Generation\")\n    lines!(ax1, hours, results_df.wind_generation, label=\"Wind Generation\")\n    lines!(ax1, hours, results_df.wind_curtailment, label=\"Wind Curtailment\")\n    lines!(ax1, hours, scenario_data.wind_forecast, label=\"Wind Forecast\")\n    lines!(ax1, hours, scenario_data.demand_forecast, label=\"Demand\")\n    axislegend(ax1)\n    ax1.title = \"Generation Profile for Scenario $scenario_name\"\n    \n    # Storage energy level\n    ax2 = Axis(fig[1, 2], xlabel=\"Hour of Day\", ylabel=\"Energy [MWh]\")\n    lines!(ax2, hours, results_df.storage_energy, label=\"Energy Level\")\n    axislegend(ax2)\n    ax2.title = \"Storage Energy Level for Scenario $scenario_name\"\n    \n    # Storage power\n    ax3 = Axis(fig[2, 1], xlabel=\"Hour of Day\", ylabel=\"Power [MW]\")\n    lines!(ax3, hours, results_df.storage_charge, label=\"Charging\")\n    lines!(ax3, hours, results_df.storage_discharge, label=\"Discharging\")\n    axislegend(ax3)\n    ax3.title = \"Storage Power for Scenario $scenario_name\"\n    \n    # Display the figure\n    display(fig)\nend\n\n\n\n\n\n\nCode\n# Test your answer\n# Check objective value / total cost is in the correct range\n@assert isapprox(results_df.total_cost[1], 1.156e6, atol=1e4) \"The total cost for scenario S1 should be 1.156e6 but is $(results_df.total_cost[1])\"\nprintln(\"Excellent work! You've successfully implemented the storage model and solved the optimization problem.\")",
    "crumbs": [
      "07 Storage",
      "Tutorial"
    ]
  },
  {
    "objectID": "part-07/tutorial-storage.html#load-and-process-data",
    "href": "part-07/tutorial-storage.html#load-and-process-data",
    "title": "Tutorial VII - Storage Modeling",
    "section": "",
    "text": "First, we load the data from the CSV files and process them into dictionaries for easy access.\n\n# Get the directory of the current file\nfile_directory = \"$(@__DIR__)/data\"\n\n# Load data\ndfGenerators = CSV.read(\"$file_directory/generator.csv\", DataFrame)\ndfStorages = CSV.read(\"$file_directory/storage.csv\", DataFrame)\ndfWindTurbines = CSV.read(\"$file_directory/windTurbine.csv\", DataFrame)\ndfScenarios = CSV.read(\"$file_directory/scenario.csv\", DataFrame)\n\n# Process generator data\ndictGenerators = Dict(\n    row.name =&gt; (\n        min_power = row.min_power,\n        max_power = row.max_power,\n        variable_cost = row.variable_cost,\n        fix_cost = row.fix_cost,\n        min_up_time = row.min_up_time,\n        min_down_time = row.min_down_time,\n        ramp_up = row.ramp_up,\n        ramp_down = row.ramp_down,\n        startup_cost = row.startup_cost,\n        efficiency = row.efficiency\n    ) for row in eachrow(dfGenerators)\n)\n\n# Process storage data\ndictStorages = Dict(\n    row.name =&gt; (\n        min_power = row.min_power,\n        max_power = row.max_power,\n        min_energy = row.min_energy,\n        max_energy = row.max_energy,\n        charge_efficiency = row.charge_efficiency,\n        discharge_efficiency = row.discharge_efficiency,\n        self_discharge_rate = row.self_discharge_rate,\n        ramp_up = row.ramp_up,\n        ramp_down = row.ramp_down\n    ) for row in eachrow(dfStorages)\n)\n\n# Process wind turbine data\ndictWindTurbines = Dict(\n    row.name =&gt; (\n        variable_cost = row.variable_cost,\n    ) for row in eachrow(dfWindTurbines)\n)\n\n# Process scenario data\ndate_format = dateformat\"yyyy-mm-dd HH:MM:SS\"\ndictScenarios = Dict()\nfor scenario in unique(dfScenarios.scenario)\n    scenario_data = dfScenarios[dfScenarios.scenario .== scenario, :]\n    dictScenarios[scenario] = (\n        datetime = DateTime.(scenario_data.datetime, date_format),\n        demand_forecast = scenario_data.demand_forecast,\n        wind_forecast = scenario_data.wind_forecast\n    )\nend",
    "crumbs": [
      "07 Storage",
      "Tutorial"
    ]
  },
  {
    "objectID": "part-07/tutorial-storage.html#implement-the-unit-commitment-model-with-storage",
    "href": "part-07/tutorial-storage.html#implement-the-unit-commitment-model-with-storage",
    "title": "Tutorial VII - Storage Modeling",
    "section": "",
    "text": "Now, let’s implement the Unit Commitment model with storage. We’ll create a function that takes the data dictionaries as input and returns the model.\nTASK: Fill out the code below where you see ## YOUR CODE HERE to implement the storage in the model.\n\nfunction solve_unit_commitment(dictGenerators, dictStorages, dictWindTurbines, scenario)\n    # Create model\n    model = Model(HiGHS.Optimizer)\n    set_silent(model)\n\n    # Define the time periods and sets\n    T = 1:length(scenario.datetime)  # Time periods (hours)\n    G = keys(dictGenerators)  # Set of thermal generators\n    S = keys(dictStorages)    # Set of storage units\n    W = keys(dictWindTurbines) # Set of wind turbines\n\n    # Decision Variables\n    @variable(model, p[g in G, t in T] &gt;= 0)  # Power output of generator g at time t\n    @variable(model, u[g in G, t in T], Bin)  # Binary variable for generator status (1=on, 0=off)\n    @variable(model, v[g in G, t in T], Bin)  # Binary variable for startup (1=startup, 0=no startup)\n    @variable(model, p_w[w in W, t in T] &gt;= 0)  # Power output of wind at time t\n    @variable(model, p_fictive[t in T] &gt;= 0)  # Fictive power at time t -&gt; used to model a fictive production in power balance constraint and penalize it with a very high cost in the objective function in case the scenario is not feasible, i.e. not enough generation is available to cover the demand\n\n    # Storage variables\n    @variable(model, p_ch[s in S, t in T] &gt;= 0)     # Charging power of storage s at time t\n    @variable(model, p_dis[s in S, t in T] &gt;= 0)    # Discharging power of storage s at time t\n    @variable(model, e[s in S, t in T] &gt;= 0)        # Energy level of storage s at time t\n    @variable(model, u_ch[s in S, t in T], Bin)     # Binary variable for charging status (1=charging, 0=not charging)\n    @variable(model, u_dis[s in S, t in T], Bin)    # Binary variable for discharging status (1=discharging, 0=not discharging)\n\n    # Objective Function\n    @objective(model, Min, sum(\n        dictGenerators[g].variable_cost * p[g,t] +   # Variable cost of production\n        dictGenerators[g].fix_cost * u[g,t] +        # Fixed cost of running\n        dictGenerators[g].startup_cost * v[g,t]      # Startup cost of starting the generator\n        for g in G, t in T\n    ) + sum(\n        dictWindTurbines[w].variable_cost * p_w[w,t]    # Variable cost of wind production\n        for w in W, t in T\n    ) + sum(\n        1000 * p_fictive[t]    # Cost of fictive production\n        for t in T\n    ))\n\n    # Constraints\n    # Power balance constraint (including storage): Total generation must equal demand\n    ## YOUR CODE HERE\n\n\n    # Generator limits: Power output must be within min/max when running\n    @constraint(model, [g in G, t in T],\n        p[g,t] &lt;= dictGenerators[g].max_power * u[g,t] # Max power when running\n    )\n    @constraint(model, [g in G, t in T],\n        p[g,t] &gt;= dictGenerators[g].min_power * u[g,t] # Min power when running\n    )\n\n    # Wind limits: Wind power cannot exceed forecast\n    @constraint(model, [w in W, t in T],\n        p_w[w,t] &lt;= scenario.wind_forecast[t]\n    )\n\n    # Minimum up time: Generator must stay on for minimum duration after startup\n    @constraint(model, min_up[g in G, t in T],\n        sum(u[g,τ] for τ in max(1, t-dictGenerators[g].min_up_time+1):t) &gt;= \n        dictGenerators[g].min_up_time * v[g,t]\n    )\n    \n    # Minimum down time: Generator must stay off for minimum duration after shutdown\n    @constraint(model, min_down[g in G, t in T],\n        sum(1 - u[g,τ] for τ in max(1, t-dictGenerators[g].min_down_time+1):t) &gt;= \n        dictGenerators[g].min_down_time * (1 - u[g,t])\n    )\n\n    # Ramp rate limits: Power change between consecutive timesteps/hours is limited\n    @constraint(model, [g in G, t in 2:length(T)],\n        p[g,t] - p[g,t-1] &lt;= dictGenerators[g].ramp_up      # Max ramp up\n    )\n    @constraint(model, [g in G, t in 2:length(T)],\n        p[g,t-1] - p[g,t] &lt;= dictGenerators[g].ramp_down    # Max ramp down\n    )\n\n    # Startup variable definition: v_g[g,t] = 1 if generator g is started at time t\n    @constraint(model, [g in G, t in 2:length(T)],\n        v[g,t] &gt;= u[g,t] - u[g,t-1]     # v_g = 1 if u_g changes from 0 (t-1) to 1 (t)\n    )\n\n    # Storage constraints\n    # Energy balance (Tip: start at t=2)\n    ## YOUR CODE HERE\n\n\n    # Energy balance at t=1: Initial energy level (assume empty at start) (Tip: define the constraint for e[s,t] at t=1)\n    ## YOUR CODE HERE\n\n\n    # Energy limits: Energy level must be within min/max\n    ## YOUR CODE HERE\n\n\n    # Power limits and mutual exclusion: Storage power cannot exceed max power when charging/discharging and charging and discharging cannot happen at the same time\n    ## YOUR CODE HERE\n\n\n    # Storage ramp rate limits: Power change between consecutive timesteps/hours is limited (Tip: define the constraints starting at t=2)\n\n\n    # Solve the model\n    optimize!(model)\n\n    # Assert that the solution is feasible\n    if termination_status(model) != MOI.OPTIMAL\n        ts = termination_status(model)\n        @info \"Optimization finished. The model was not solved correctly. Termination Status: $ts\"\n        # Helpful resource: https://jump.dev/JuMP.jl/stable/manual/solutions/#Conflicts\n    end\n\n    # Return results\n    return (\n        p_g = value.(p),      # Generator power output\n        p_w = value.(p_w),    # Wind power output\n        u_g = value.(u),      # Generator status\n        v_g = value.(v),      # Startup events\n        p_ch = value.(p_ch),  # Storage charging power\n        p_dis = value.(p_dis),# Storage discharging power\n        e = value.(e),        # Storage energy level\n        total_cost = objective_value(model)\n    )\nend",
    "crumbs": [
      "07 Storage",
      "Tutorial"
    ]
  },
  {
    "objectID": "part-07/tutorial-storage.html#solve-and-analyze-results",
    "href": "part-07/tutorial-storage.html#solve-and-analyze-results",
    "title": "Tutorial VII - Storage Modeling",
    "section": "",
    "text": "Now, let’s solve the model and analyze the results with simple plotting.\n\n# Create a dataframe to store results\nresults_df = DataFrame(\n    scenario = String[],        # Scenario identifier\n    datetime = DateTime[],      # Timestamp\n    total_cost = Float64[],     # Total system cost\n    wind_curtailment = Float64[], # Curtailed wind power\n    thermal_generation = Float64[], # Total thermal generation\n    wind_generation = Float64[],    # Total wind generation\n    storage_charge = Float64[],     # Storage charging power\n    storage_discharge = Float64[],  # Storage discharging power\n    storage_energy = Float64[]      # Storage energy level\n)\n\n# Loop over scenarios\nfor (scenario_name, scenario_data) in dictScenarios\n    solution = solve_unit_commitment(dictGenerators, dictStorages, dictWindTurbines, scenario_data)\n\n    # Store results for each time period\n    for t in 1:length(scenario_data.datetime)\n        push!(results_df, (\n            scenario_name,\n            scenario_data.datetime[t],\n            solution.total_cost,\n            sum(scenario_data.wind_forecast[t] - solution.p_w[w,t] for w in keys(dictWindTurbines)),\n            sum(solution.p_g[g,t] for g in keys(dictGenerators)),\n            sum(solution.p_w[w,t] for w in keys(dictWindTurbines)),\n            sum(solution.p_ch[s,t] for s in keys(dictStorages)),\n            sum(solution.p_dis[s,t] for s in keys(dictStorages)),\n            sum(solution.e[s,t] for s in keys(dictStorages))\n        ))\n    end\nend\n\n# Plot generation over time for each scenario\nfor (scenario_name, scenario_data) in dictScenarios\n    # Create figure with subplots\n    fig = Figure(size=(1000, 800))\n    \n    # Format datetime to show only hours\n    hours = hour.(results_df.datetime)\n    \n    # Generation profile\n    ax1 = Axis(fig[1, 1], xlabel=\"Hour of Day\", ylabel=\"Power [MW]\")\n    lines!(ax1, hours, results_df.thermal_generation, label=\"Thermal Generation\")\n    lines!(ax1, hours, results_df.wind_generation, label=\"Wind Generation\")\n    lines!(ax1, hours, results_df.wind_curtailment, label=\"Wind Curtailment\")\n    lines!(ax1, hours, scenario_data.wind_forecast, label=\"Wind Forecast\")\n    lines!(ax1, hours, scenario_data.demand_forecast, label=\"Demand\")\n    axislegend(ax1)\n    ax1.title = \"Generation Profile for Scenario $scenario_name\"\n    \n    # Storage energy level\n    ax2 = Axis(fig[1, 2], xlabel=\"Hour of Day\", ylabel=\"Energy [MWh]\")\n    lines!(ax2, hours, results_df.storage_energy, label=\"Energy Level\")\n    axislegend(ax2)\n    ax2.title = \"Storage Energy Level for Scenario $scenario_name\"\n    \n    # Storage power\n    ax3 = Axis(fig[2, 1], xlabel=\"Hour of Day\", ylabel=\"Power [MW]\")\n    lines!(ax3, hours, results_df.storage_charge, label=\"Charging\")\n    lines!(ax3, hours, results_df.storage_discharge, label=\"Discharging\")\n    axislegend(ax3)\n    ax3.title = \"Storage Power for Scenario $scenario_name\"\n    \n    # Display the figure\n    display(fig)\nend",
    "crumbs": [
      "07 Storage",
      "Tutorial"
    ]
  },
  {
    "objectID": "part-07/tutorial-storage.html#verify-results",
    "href": "part-07/tutorial-storage.html#verify-results",
    "title": "Tutorial VII - Storage Modeling",
    "section": "",
    "text": "Code\n# Test your answer\n# Check objective value / total cost is in the correct range\n@assert isapprox(results_df.total_cost[1], 1.156e6, atol=1e4) \"The total cost for scenario S1 should be 1.156e6 but is $(results_df.total_cost[1])\"\nprintln(\"Excellent work! You've successfully implemented the storage model and solved the optimization problem.\")",
    "crumbs": [
      "07 Storage",
      "Tutorial"
    ]
  },
  {
    "objectID": "part-08/tutorial-design.html",
    "href": "part-08/tutorial-design.html",
    "title": "Tutorial VIII - Stochastic Energy System Design Problem",
    "section": "",
    "text": "The system design problem combines investment planning (sizing) and operational optimization to determine the optimal configuration of an energy system. This integrated approach allows us to:\n\nMake optimal investment decisions\nAccount for operational flexibility\nBalance investment and operational costs\nConsider system-wide interactions\n\n\n\n\n\n\n\nNote\n\n\n\nThe system design problem is a two-stage optimization problem:\n\nFirst stage: Investment decisions (sizing)\nSecond stage: Operational decisions (dispatch)\n\n\n\n\n\n\n\n\nComponent selection\nCapacity sizing\nTechnology mix\nInvestment costs\n\n\n\n\n\nPower generation\nStorage operation\nGrid interaction\nOperational costs\n\n\n\n\n\n\n\n\nFirst Stage (Here-and-Now):\n\nInvestment decisions\nComponent sizing\nFixed costs\n\nSecond Stage (Wait-and-See):\n\nOperational decisions\nPower dispatch\nVariable costs\n\n\n\n\n\n\\(\\text{Minimize} \\quad \\text{Investment Costs} + \\text{Expected Operational Costs}\\)\n\n\n\n\n\n\nNote\n\n\n\nThe objective function combines:\n\nOne-time investment costs (annualized)\nExpected operational costs over the system lifetime\n\n\n\n\n\n\n\n\n\n\nSingle scenario\nPerfect foresight\nSimplified uncertainty handling\n\n\n\n\n\nMultiple scenarios\nProbability-weighted costs\nRobust investment decisions\n\n\n\n\n\n\n\n\nMicrogrid design\nIndustrial energy systems\nResidential energy systems\n\n\n\n\n\nRenewable energy integration\nStorage deployment\nGrid capacity planning\n\n\n\n\n\nMulti-market optimization\nPrice arbitrage\nAncillary services\n\n\n\n\n\n\n\nNote\n\n\n\nThe system design problem provides a comprehensive framework for:\n\nOptimal investment decisions\nEfficient system operation\nCost-effective energy supply\nSustainable energy systems\n\n\n\n\n\n\n\n\nThe stochastic system design problem extends the deterministic model by considering multiple scenarios. This allows us to:\n\nAccount for uncertainty in renewable generation\nConsider different demand patterns\nHandle price variations\nMake robust investment decisions\n\n\n\n\n\n\\(\\mathcal{T}\\) - Set of time periods indexed by \\(t \\in \\{1,2,...,|\\mathcal{T}|\\}\\)\n\\(\\mathcal{S}\\) - Set of storage systems indexed by \\(s \\in \\{1,2,...,|\\mathcal{S}|\\}\\)\n\\(\\mathcal{W}\\) - Set of wind parks indexed by \\(w \\in \\{1,2,...,|\\mathcal{W}|\\}\\)\n\\(\\mathcal{V}\\) - Set of PV parks indexed by \\(v \\in \\{1,2,...,|\\mathcal{V}|\\}\\)\n\\(\\Omega\\) - Set of scenarios indexed by \\(\\omega \\in \\{1,2,...,|\\Omega|\\}\\)\n\n\n\n\n\n\n\n\\(e^{nom}_s\\) - Nominal energy capacity of storage \\(s\\) [MWh]\n\\(p^{ch,nom}_s\\) - Nominal charging power of storage \\(s\\) [MW]\n\\(p^{dis,nom}_s\\) - Nominal discharging power of storage \\(s\\) [MW]\n\\(p^{nom}_w\\) - Nominal power of wind park \\(w\\) [MW]\n\\(p^{nom}_v\\) - Nominal power of PV park \\(v\\) [MW]\n\n\n\n\n\n\\(p_{w,t,\\omega}\\) - Power output of wind park \\(w\\) at time \\(t\\) in scenario \\(\\omega\\) [MW]\n\\(p_{v,t,\\omega}\\) - Power output of PV park \\(v\\) at time \\(t\\) in scenario \\(\\omega\\) [MW]\n\\(p^{in}_{t,\\omega}\\) - Power inflow through market at time \\(t\\) in scenario \\(\\omega\\) [MW]\n\\(p^{out}_{t,\\omega}\\) - Power outflow through market at time \\(t\\) in scenario \\(\\omega\\) [MW]\n\\(p^{ch}_{s,t,\\omega}\\) - Charging power of storage \\(s\\) at time \\(t\\) in scenario \\(\\omega\\) [MW]\n\\(p^{dis}_{s,t,\\omega}\\) - Discharging power of storage \\(s\\) at time \\(t\\) in scenario \\(\\omega\\) [MW]\n\\(e_{s,t,\\omega}\\) - Energy level of storage \\(s\\) at time \\(t\\) in scenario \\(\\omega\\) [MWh]\n\n\n\n\n\n\\(AC^{inv}_s\\) - Annual investment cost for storage \\(s\\) [EUR/year]\n\\(AC^{inv}_w\\) - Annual investment cost for wind park \\(w\\) [EUR/year]\n\\(AC^{inv}_v\\) - Annual investment cost for PV park \\(v\\) [EUR/year]\n\\(AC^{grid,imp}_{\\omega}\\) - Annual grid electricity import cost in scenario \\(\\omega\\) [EUR/year]\n\\(AR^{grid,exp}_{\\omega}\\) - Annual grid electricity export revenue in scenario \\(\\omega\\) [EUR/year]\n\n\n\n\n\n\n\n\n\\(C^{E}_s\\) - Cost per MWh of energy capacity for storage \\(s\\) [EUR/MWh]\n\\(C^{P,ch}_s\\) - Cost per MW of charging power capacity for storage \\(s\\) [EUR/MW]\n\\(C^{P,dis}_s\\) - Cost per MW of discharging power capacity for storage \\(s\\) [EUR/MW]\n\\(C^{W}_w\\) - Cost per MW of wind park \\(w\\) [EUR/MW]\n\\(C^{PV}_v\\) - Cost per MW of PV park \\(v\\) [EUR/MW]\n\\(F^{PVAF}\\) - Present value annuity factor for investment costs\n\\(B^{max}\\) - Maximum investment budget [EUR]\n\n\n\n\n\n\\(\\eta^{ch}_s\\) - Charging efficiency of storage \\(s\\)\n\\(\\eta^{dis}_s\\) - Discharging efficiency of storage \\(s\\)\n\\(sdr_s\\) - Self-discharge rate of storage \\(s\\) per time step\n\\(DoD_s\\) - Depth of discharge limit for storage \\(s\\) [%]\n\\(f_{w,t,\\omega}\\) - Wind capacity factor at time \\(t\\) in scenario \\(\\omega\\) for wind park \\(w\\)\n\\(f_{v,t,\\omega}\\) - Solar capacity factor at time \\(t\\) in scenario \\(\\omega\\) for PV park \\(v\\)\n\\(d_{t,\\omega}\\) - Electric demand at time \\(t\\) in scenario \\(\\omega\\) [MW]\n\\(c^{MP}_{t,\\omega}\\) - Grid electricity market price at time \\(t\\) in scenario \\(\\omega\\) [EUR/MWh]\n\\(c^{TaL}\\) - Grid electricity taxes and levies (including Netzentgelt) [EUR/MWh]\n\\(\\pi_{\\omega}\\) - Probability of scenario \\(\\omega\\)\n\n\n\n\n\n\\(\\text{Minimize} \\quad \\sum_{s \\in \\mathcal{S}} AC^{inv}_s + \\sum_{w \\in \\mathcal{W}} AC^{inv}_w + \\sum_{v \\in \\mathcal{V}} AC^{inv}_v + \\sum_{\\omega \\in \\Omega} \\pi_{\\omega} (AC^{grid,imp}_{\\omega} - AR^{grid,exp}_{\\omega})\\)\n\n\n\n\n\n\nNote\n\n\n\nThe objective function minimizes: 1. First-stage costs (deterministic): - Investment costs for all components 2. Second-stage costs (stochastic): - Expected grid electricity costs/revenues - Weighted by scenario probabilities\n\n\n\n\n\n\n\n\\(AC^{inv}_s = \\frac{C^{E}_s}{F^{PVAF}} e^{nom}_s + C^{P,ch}_s p^{ch,nom}_s + C^{P,dis}_s p^{dis,nom}_s \\quad \\forall s \\in \\mathcal{S}\\) \\(AC^{inv}_w = \\frac{C^{W}_w}{F^{PVAF}} p^{nom}_w \\quad \\forall w \\in \\mathcal{W}\\) \\(AC^{inv}_v = \\frac{C^{PV}_v}{F^{PVAF}} p^{nom}_v \\quad \\forall v \\in \\mathcal{V}\\)\n\n\n\n\\(\\sum_{s \\in \\mathcal{S}} (C^{E}_s e^{nom}_s + C^{P,ch}_s p^{ch,nom}_s + C^{P,dis}_s p^{dis,nom}_s) + \\sum_{w \\in \\mathcal{W}} C^{W}_w p^{nom}_w + \\sum_{v \\in \\mathcal{V}} C^{PV}_v p^{nom}_v \\leq B^{max}\\)\n\n\n\n\n\n\nNote\n\n\n\nThe investment budget constraint ensures that: 1. Total investment costs do not exceed the maximum budget 2. Includes all component investments: - Storage systems (energy and power capacity) - Wind parks - PV parks 3. Applies to first-stage decisions only\n\n\n\n\n\n\\(AC^{grid,imp}_{\\omega} = \\sum_{t \\in \\mathcal{T}} (c^{MP}_{t,\\omega} + c^{TaL}) p^{in}_{t,\\omega} \\quad \\forall \\omega \\in \\Omega\\) \\(AR^{grid,exp}_{\\omega} = \\sum_{t \\in \\mathcal{T}} c^{MP}_{t,\\omega} p^{out}_{t,\\omega} \\quad \\forall \\omega \\in \\Omega\\)\n\n\n\n\n\n\n\\(\\sum_{w \\in \\mathcal{W}} p_{w,t,\\omega} + \\sum_{v \\in \\mathcal{V}} p_{v,t,\\omega} + (p^{in}_{t,\\omega} - p^{out}_{t,\\omega}) + \\sum_{s \\in \\mathcal{S}} (p^{dis}_{s,t,\\omega} - p^{ch}_{s,t,\\omega}) = d_{t,\\omega} \\quad \\forall t \\in \\mathcal{T}, \\omega \\in \\Omega\\)\n\n\n\n\n\n\\(0 \\leq p_{w,t,\\omega} \\leq f_{w,t,\\omega} p^{nom}_w \\quad \\forall w \\in \\mathcal{W}, t \\in \\mathcal{T}, \\omega \\in \\Omega\\)\n\n\n\n\\(0 \\leq p_{v,t,\\omega} \\leq f_{v,t,\\omega} p^{nom}_v \\quad \\forall v \\in \\mathcal{V}, t \\in \\mathcal{T}, \\omega \\in \\Omega\\)\n\n\n\n\\(0 \\leq p^{ch}_{s,t,\\omega} \\leq p^{ch,nom}_s \\quad \\forall s \\in \\mathcal{S}, t \\in \\mathcal{T}, \\omega \\in \\Omega\\) \\(0 \\leq p^{dis}_{s,t,\\omega} \\leq p^{dis,nom}_s \\quad \\forall s \\in \\mathcal{S}, t \\in \\mathcal{T}, \\omega \\in \\Omega\\) \\(DoD_s e^{nom}_s \\leq e_{s,t,\\omega} \\leq e^{nom}_s \\quad \\forall s \\in \\mathcal{S}, t \\in \\mathcal{T}, \\omega \\in \\Omega\\)\n\n\n\n\n\\(e_{s,t,\\omega} = (1-sdr_s)e_{s,t-1,\\omega} + \\eta^{ch}_s p^{ch}_{s,t,\\omega} - \\frac{p^{dis}_{s,t,\\omega}}{\\eta^{dis}_s} \\quad \\forall s \\in \\mathcal{S}, t \\in \\mathcal{T}, \\omega \\in \\Omega\\)\n\n\n\n\n\n\nNote\n\n\n\nThe stochastic formulation: 1. First-stage decisions (here-and-now): - Component sizing - Investment costs 2. Second-stage decisions (wait-and-see): - Operational decisions - Scenario-dependent costs 3. Key differences from deterministic model: - Time-dependent parameters become scenario-dependent - Operational variables become scenario-dependent - Objective includes expected costs",
    "crumbs": [
      "08 Design",
      "Tutorial"
    ]
  },
  {
    "objectID": "part-08/tutorial-design.html#system-design-problem",
    "href": "part-08/tutorial-design.html#system-design-problem",
    "title": "Tutorial VIII - Stochastic Energy System Design Problem",
    "section": "",
    "text": "The system design problem combines investment planning (sizing) and operational optimization to determine the optimal configuration of an energy system. This integrated approach allows us to:\n\nMake optimal investment decisions\nAccount for operational flexibility\nBalance investment and operational costs\nConsider system-wide interactions\n\n\n\n\n\n\n\nNote\n\n\n\nThe system design problem is a two-stage optimization problem:\n\nFirst stage: Investment decisions (sizing)\nSecond stage: Operational decisions (dispatch)\n\n\n\n\n\n\n\n\nComponent selection\nCapacity sizing\nTechnology mix\nInvestment costs\n\n\n\n\n\nPower generation\nStorage operation\nGrid interaction\nOperational costs\n\n\n\n\n\n\n\n\nFirst Stage (Here-and-Now):\n\nInvestment decisions\nComponent sizing\nFixed costs\n\nSecond Stage (Wait-and-See):\n\nOperational decisions\nPower dispatch\nVariable costs\n\n\n\n\n\n\\(\\text{Minimize} \\quad \\text{Investment Costs} + \\text{Expected Operational Costs}\\)\n\n\n\n\n\n\nNote\n\n\n\nThe objective function combines:\n\nOne-time investment costs (annualized)\nExpected operational costs over the system lifetime\n\n\n\n\n\n\n\n\n\n\nSingle scenario\nPerfect foresight\nSimplified uncertainty handling\n\n\n\n\n\nMultiple scenarios\nProbability-weighted costs\nRobust investment decisions\n\n\n\n\n\n\n\n\nMicrogrid design\nIndustrial energy systems\nResidential energy systems\n\n\n\n\n\nRenewable energy integration\nStorage deployment\nGrid capacity planning\n\n\n\n\n\nMulti-market optimization\nPrice arbitrage\nAncillary services\n\n\n\n\n\n\n\nNote\n\n\n\nThe system design problem provides a comprehensive framework for:\n\nOptimal investment decisions\nEfficient system operation\nCost-effective energy supply\nSustainable energy systems",
    "crumbs": [
      "08 Design",
      "Tutorial"
    ]
  },
  {
    "objectID": "part-08/tutorial-design.html#stochastic-formulation",
    "href": "part-08/tutorial-design.html#stochastic-formulation",
    "title": "Tutorial VIII - Stochastic Energy System Design Problem",
    "section": "",
    "text": "The stochastic system design problem extends the deterministic model by considering multiple scenarios. This allows us to:\n\nAccount for uncertainty in renewable generation\nConsider different demand patterns\nHandle price variations\nMake robust investment decisions",
    "crumbs": [
      "08 Design",
      "Tutorial"
    ]
  },
  {
    "objectID": "part-08/tutorial-design.html#sets",
    "href": "part-08/tutorial-design.html#sets",
    "title": "Tutorial VIII - Stochastic Energy System Design Problem",
    "section": "",
    "text": "\\(\\mathcal{T}\\) - Set of time periods indexed by \\(t \\in \\{1,2,...,|\\mathcal{T}|\\}\\)\n\\(\\mathcal{S}\\) - Set of storage systems indexed by \\(s \\in \\{1,2,...,|\\mathcal{S}|\\}\\)\n\\(\\mathcal{W}\\) - Set of wind parks indexed by \\(w \\in \\{1,2,...,|\\mathcal{W}|\\}\\)\n\\(\\mathcal{V}\\) - Set of PV parks indexed by \\(v \\in \\{1,2,...,|\\mathcal{V}|\\}\\)\n\\(\\Omega\\) - Set of scenarios indexed by \\(\\omega \\in \\{1,2,...,|\\Omega|\\}\\)",
    "crumbs": [
      "08 Design",
      "Tutorial"
    ]
  },
  {
    "objectID": "part-08/tutorial-design.html#decision-variables",
    "href": "part-08/tutorial-design.html#decision-variables",
    "title": "Tutorial VIII - Stochastic Energy System Design Problem",
    "section": "",
    "text": "\\(e^{nom}_s\\) - Nominal energy capacity of storage \\(s\\) [MWh]\n\\(p^{ch,nom}_s\\) - Nominal charging power of storage \\(s\\) [MW]\n\\(p^{dis,nom}_s\\) - Nominal discharging power of storage \\(s\\) [MW]\n\\(p^{nom}_w\\) - Nominal power of wind park \\(w\\) [MW]\n\\(p^{nom}_v\\) - Nominal power of PV park \\(v\\) [MW]\n\n\n\n\n\n\\(p_{w,t,\\omega}\\) - Power output of wind park \\(w\\) at time \\(t\\) in scenario \\(\\omega\\) [MW]\n\\(p_{v,t,\\omega}\\) - Power output of PV park \\(v\\) at time \\(t\\) in scenario \\(\\omega\\) [MW]\n\\(p^{in}_{t,\\omega}\\) - Power inflow through market at time \\(t\\) in scenario \\(\\omega\\) [MW]\n\\(p^{out}_{t,\\omega}\\) - Power outflow through market at time \\(t\\) in scenario \\(\\omega\\) [MW]\n\\(p^{ch}_{s,t,\\omega}\\) - Charging power of storage \\(s\\) at time \\(t\\) in scenario \\(\\omega\\) [MW]\n\\(p^{dis}_{s,t,\\omega}\\) - Discharging power of storage \\(s\\) at time \\(t\\) in scenario \\(\\omega\\) [MW]\n\\(e_{s,t,\\omega}\\) - Energy level of storage \\(s\\) at time \\(t\\) in scenario \\(\\omega\\) [MWh]\n\n\n\n\n\n\\(AC^{inv}_s\\) - Annual investment cost for storage \\(s\\) [EUR/year]\n\\(AC^{inv}_w\\) - Annual investment cost for wind park \\(w\\) [EUR/year]\n\\(AC^{inv}_v\\) - Annual investment cost for PV park \\(v\\) [EUR/year]\n\\(AC^{grid,imp}_{\\omega}\\) - Annual grid electricity import cost in scenario \\(\\omega\\) [EUR/year]\n\\(AR^{grid,exp}_{\\omega}\\) - Annual grid electricity export revenue in scenario \\(\\omega\\) [EUR/year]",
    "crumbs": [
      "08 Design",
      "Tutorial"
    ]
  },
  {
    "objectID": "part-08/tutorial-design.html#parameters",
    "href": "part-08/tutorial-design.html#parameters",
    "title": "Tutorial VIII - Stochastic Energy System Design Problem",
    "section": "",
    "text": "\\(C^{E}_s\\) - Cost per MWh of energy capacity for storage \\(s\\) [EUR/MWh]\n\\(C^{P,ch}_s\\) - Cost per MW of charging power capacity for storage \\(s\\) [EUR/MW]\n\\(C^{P,dis}_s\\) - Cost per MW of discharging power capacity for storage \\(s\\) [EUR/MW]\n\\(C^{W}_w\\) - Cost per MW of wind park \\(w\\) [EUR/MW]\n\\(C^{PV}_v\\) - Cost per MW of PV park \\(v\\) [EUR/MW]\n\\(F^{PVAF}\\) - Present value annuity factor for investment costs\n\\(B^{max}\\) - Maximum investment budget [EUR]\n\n\n\n\n\n\\(\\eta^{ch}_s\\) - Charging efficiency of storage \\(s\\)\n\\(\\eta^{dis}_s\\) - Discharging efficiency of storage \\(s\\)\n\\(sdr_s\\) - Self-discharge rate of storage \\(s\\) per time step\n\\(DoD_s\\) - Depth of discharge limit for storage \\(s\\) [%]\n\\(f_{w,t,\\omega}\\) - Wind capacity factor at time \\(t\\) in scenario \\(\\omega\\) for wind park \\(w\\)\n\\(f_{v,t,\\omega}\\) - Solar capacity factor at time \\(t\\) in scenario \\(\\omega\\) for PV park \\(v\\)\n\\(d_{t,\\omega}\\) - Electric demand at time \\(t\\) in scenario \\(\\omega\\) [MW]\n\\(c^{MP}_{t,\\omega}\\) - Grid electricity market price at time \\(t\\) in scenario \\(\\omega\\) [EUR/MWh]\n\\(c^{TaL}\\) - Grid electricity taxes and levies (including Netzentgelt) [EUR/MWh]\n\\(\\pi_{\\omega}\\) - Probability of scenario \\(\\omega\\)",
    "crumbs": [
      "08 Design",
      "Tutorial"
    ]
  },
  {
    "objectID": "part-08/tutorial-design.html#objective-function-1",
    "href": "part-08/tutorial-design.html#objective-function-1",
    "title": "Tutorial VIII - Stochastic Energy System Design Problem",
    "section": "",
    "text": "\\(\\text{Minimize} \\quad \\sum_{s \\in \\mathcal{S}} AC^{inv}_s + \\sum_{w \\in \\mathcal{W}} AC^{inv}_w + \\sum_{v \\in \\mathcal{V}} AC^{inv}_v + \\sum_{\\omega \\in \\Omega} \\pi_{\\omega} (AC^{grid,imp}_{\\omega} - AR^{grid,exp}_{\\omega})\\)\n\n\n\n\n\n\nNote\n\n\n\nThe objective function minimizes: 1. First-stage costs (deterministic): - Investment costs for all components 2. Second-stage costs (stochastic): - Expected grid electricity costs/revenues - Weighted by scenario probabilities",
    "crumbs": [
      "08 Design",
      "Tutorial"
    ]
  },
  {
    "objectID": "part-08/tutorial-design.html#annual-cost-constraints",
    "href": "part-08/tutorial-design.html#annual-cost-constraints",
    "title": "Tutorial VIII - Stochastic Energy System Design Problem",
    "section": "",
    "text": "\\(AC^{inv}_s = \\frac{C^{E}_s}{F^{PVAF}} e^{nom}_s + C^{P,ch}_s p^{ch,nom}_s + C^{P,dis}_s p^{dis,nom}_s \\quad \\forall s \\in \\mathcal{S}\\) \\(AC^{inv}_w = \\frac{C^{W}_w}{F^{PVAF}} p^{nom}_w \\quad \\forall w \\in \\mathcal{W}\\) \\(AC^{inv}_v = \\frac{C^{PV}_v}{F^{PVAF}} p^{nom}_v \\quad \\forall v \\in \\mathcal{V}\\)\n\n\n\n\\(\\sum_{s \\in \\mathcal{S}} (C^{E}_s e^{nom}_s + C^{P,ch}_s p^{ch,nom}_s + C^{P,dis}_s p^{dis,nom}_s) + \\sum_{w \\in \\mathcal{W}} C^{W}_w p^{nom}_w + \\sum_{v \\in \\mathcal{V}} C^{PV}_v p^{nom}_v \\leq B^{max}\\)\n\n\n\n\n\n\nNote\n\n\n\nThe investment budget constraint ensures that: 1. Total investment costs do not exceed the maximum budget 2. Includes all component investments: - Storage systems (energy and power capacity) - Wind parks - PV parks 3. Applies to first-stage decisions only\n\n\n\n\n\n\\(AC^{grid,imp}_{\\omega} = \\sum_{t \\in \\mathcal{T}} (c^{MP}_{t,\\omega} + c^{TaL}) p^{in}_{t,\\omega} \\quad \\forall \\omega \\in \\Omega\\) \\(AR^{grid,exp}_{\\omega} = \\sum_{t \\in \\mathcal{T}} c^{MP}_{t,\\omega} p^{out}_{t,\\omega} \\quad \\forall \\omega \\in \\Omega\\)",
    "crumbs": [
      "08 Design",
      "Tutorial"
    ]
  },
  {
    "objectID": "part-08/tutorial-design.html#constraints",
    "href": "part-08/tutorial-design.html#constraints",
    "title": "Tutorial VIII - Stochastic Energy System Design Problem",
    "section": "",
    "text": "\\(\\sum_{w \\in \\mathcal{W}} p_{w,t,\\omega} + \\sum_{v \\in \\mathcal{V}} p_{v,t,\\omega} + (p^{in}_{t,\\omega} - p^{out}_{t,\\omega}) + \\sum_{s \\in \\mathcal{S}} (p^{dis}_{s,t,\\omega} - p^{ch}_{s,t,\\omega}) = d_{t,\\omega} \\quad \\forall t \\in \\mathcal{T}, \\omega \\in \\Omega\\)\n\n\n\n\n\n\\(0 \\leq p_{w,t,\\omega} \\leq f_{w,t,\\omega} p^{nom}_w \\quad \\forall w \\in \\mathcal{W}, t \\in \\mathcal{T}, \\omega \\in \\Omega\\)\n\n\n\n\\(0 \\leq p_{v,t,\\omega} \\leq f_{v,t,\\omega} p^{nom}_v \\quad \\forall v \\in \\mathcal{V}, t \\in \\mathcal{T}, \\omega \\in \\Omega\\)\n\n\n\n\\(0 \\leq p^{ch}_{s,t,\\omega} \\leq p^{ch,nom}_s \\quad \\forall s \\in \\mathcal{S}, t \\in \\mathcal{T}, \\omega \\in \\Omega\\) \\(0 \\leq p^{dis}_{s,t,\\omega} \\leq p^{dis,nom}_s \\quad \\forall s \\in \\mathcal{S}, t \\in \\mathcal{T}, \\omega \\in \\Omega\\) \\(DoD_s e^{nom}_s \\leq e_{s,t,\\omega} \\leq e^{nom}_s \\quad \\forall s \\in \\mathcal{S}, t \\in \\mathcal{T}, \\omega \\in \\Omega\\)\n\n\n\n\n\\(e_{s,t,\\omega} = (1-sdr_s)e_{s,t-1,\\omega} + \\eta^{ch}_s p^{ch}_{s,t,\\omega} - \\frac{p^{dis}_{s,t,\\omega}}{\\eta^{dis}_s} \\quad \\forall s \\in \\mathcal{S}, t \\in \\mathcal{T}, \\omega \\in \\Omega\\)\n\n\n\n\n\n\nNote\n\n\n\nThe stochastic formulation: 1. First-stage decisions (here-and-now): - Component sizing - Investment costs 2. Second-stage decisions (wait-and-see): - Operational decisions - Scenario-dependent costs 3. Key differences from deterministic model: - Time-dependent parameters become scenario-dependent - Operational variables become scenario-dependent - Objective includes expected costs",
    "crumbs": [
      "08 Design",
      "Tutorial"
    ]
  },
  {
    "objectID": "part-08/tutorial-design.html#load-packages",
    "href": "part-08/tutorial-design.html#load-packages",
    "title": "Tutorial VIII - Stochastic Energy System Design Problem",
    "section": "1. Load Packages",
    "text": "1. Load Packages\n\nusing Pkg\nPkg.add(\"JuMP\")\nPkg.add(\"HiGHS\")\nPkg.add(\"CSV\")\nPkg.add(\"DataFrames\")\nPkg.add(\"CairoMakie\")\nPkg.add(\"Dates\")\n\n# Required packages\nusing Random\nusing Statistics\nusing DataFrames\nusing CSV\nusing Dates\nusing JuMP\nusing HiGHS\nusing CairoMakie\n\n# Set up CairoMakie\nset_theme!(theme_light())",
    "crumbs": [
      "08 Design",
      "Tutorial"
    ]
  },
  {
    "objectID": "part-08/tutorial-design.html#data-generation",
    "href": "part-08/tutorial-design.html#data-generation",
    "title": "Tutorial VIII - Stochastic Energy System Design Problem",
    "section": "2. Data Generation",
    "text": "2. Data Generation\n\n# Set random seed for reproducibility\nRandom.seed!(42)\n\n# Get the directory of the current file\nfile_directory = \"$(@__DIR__)/data\"\n\n# Number of scenarios and time periods\nn_scenarios = 5\nn_hours = 168  # One week\n\n# Generate scenario data\nscenario_data = DataFrame(\n    scenario = String[],\n    datetime = DateTime[],\n    demand = Float64[],\n    wind_cf = Float64[],\n    pv_cf = Float64[],\n    market_price = Float64[],\n    probability = Float64[]\n)\n\n# Base datetime\nbase_datetime = DateTime(2024, 1, 1)\n\n# Generate data for each scenario\nfor s in 1:n_scenarios\n    # Generate base demand profile (daily pattern)\n    base_demand = 60 .+ 40 .* sin.(2π .* (0:n_hours-1) ./ 24)\n    \n    # Add random variations for each scenario\n    demand = base_demand .+ randn(n_hours) .* 10\n    demand = max.(20, min.(100, demand))  # Clamp between 20 and 100 MW\n    \n    # Generate wind capacity factors\n    wind_cf = rand(n_hours)  # Random between 0 and 1\n    \n    # Generate PV capacity factors (daily pattern)\n    hour_of_day = mod.(0:n_hours-1, 24)\n    pv_cf = max.(0, sin.(π .* hour_of_day ./ 12)) .+ randn(n_hours) .* 0.1\n    pv_cf = max.(0, min.(1, pv_cf))  # Clamp between 0 and 1\n    \n    # Generate market prices\n    base_price = 200 .+ 100 .* sin.(2π .* (0:n_hours-1) ./ 24)\n    market_price = base_price .+ randn(n_hours) .* 100\n    market_price = max.(-500, min.(1000, market_price))  # Clamp between -500 and 1000\n    \n    # Add data to DataFrame\n    for h in 1:n_hours\n        push!(scenario_data, (\n            \"S$s\",\n            base_datetime + Hour(h-1),\n            demand[h],\n            wind_cf[h],\n            pv_cf[h],\n            market_price[h],\n            1/n_scenarios  # Equal probability for each scenario\n        ))\n    end\nend\n\n# Save scenario data\nCSV.write(\"$file_directory/scenario.csv\", scenario_data)\n\n# Create grid data\ngrid_data = DataFrame(\n    name = [\"grid\"],\n    taxes_levies = [50.0]  # 50 EUR/MWh for taxes and levies\n)\n\n# Save grid data\nCSV.write(\"$file_directory/grid.csv\", grid_data)\n\n# Create storage data\nstorage_data = DataFrame(\n    name = [\"storage\"],\n    energy_cost = [100000.0],  # 100,000 EUR/MWh\n    power_cost = [50000.0],    # 50,000 EUR/MW\n    lifetime = [10],           # 10 years\n    discount_rate = [0.05],    # 5% discount rate\n    charge_efficiency = [0.95],\n    discharge_efficiency = [0.95],\n    self_discharge_rate = [0.001]  # 0.1% per hour\n)\n\n# Save storage data\nCSV.write(\"$file_directory/storage.csv\", storage_data)\n\n# Create wind turbine data\nwind_data = DataFrame(\n    name = [\"wind\"],\n    power_cost = [1000000.0],  # 1,000,000 EUR/MW\n    lifetime = [20],           # 20 years\n    discount_rate = [0.05]     # 5% discount rate\n)\n\n# Save wind data\nCSV.write(\"$file_directory/windTurbine.csv\", wind_data)\n\n# Create PV data\npv_data = DataFrame(\n    name = [\"pv\"],\n    power_cost = [500000.0],   # 500,000 EUR/MW\n    lifetime = [25],           # 25 years\n    discount_rate = [0.05]     # 5% discount rate\n)\n\n# Save PV data\nCSV.write(\"$file_directory/pv.csv\", pv_data)",
    "crumbs": [
      "08 Design",
      "Tutorial"
    ]
  },
  {
    "objectID": "part-08/tutorial-design.html#load-and-process-data",
    "href": "part-08/tutorial-design.html#load-and-process-data",
    "title": "Tutorial VIII - Stochastic Energy System Design Problem",
    "section": "3. Load and Process Data",
    "text": "3. Load and Process Data\n\n# Load and process data into dictionaries\ndfStorage = CSV.read(\"$file_directory/storage.csv\", DataFrame)\ndfWindTurbines = CSV.read(\"$file_directory/windTurbine.csv\", DataFrame)\ndfPV = CSV.read(\"$file_directory/pv.csv\", DataFrame)\ndfScenarios = CSV.read(\"$file_directory/scenario.csv\", DataFrame)\ndfGrid = CSV.read(\"$file_directory/grid.csv\", DataFrame)\n\n# Process storage data\ndictStorage = Dict(\n    row.name =&gt; (\n        energy_cost = row.energy_cost,\n        power_cost = row.power_cost,\n        lifetime = row.lifetime,\n        discount_rate = row.discount_rate,\n        charge_efficiency = row.charge_efficiency,\n        discharge_efficiency = row.discharge_efficiency,\n        self_discharge_rate = row.self_discharge_rate\n    ) for row in eachrow(dfStorage)\n)\n\n# Process wind turbine data\ndictWindTurbines = Dict(\n    row.name =&gt; (\n        power_cost = row.power_cost,\n        lifetime = row.lifetime,\n        discount_rate = row.discount_rate\n    ) for row in eachrow(dfWindTurbines)\n)\n\n# Process PV data\ndictPV = Dict(\n    row.name =&gt; (\n        power_cost = row.power_cost,\n        lifetime = row.lifetime,\n        discount_rate = row.discount_rate\n    ) for row in eachrow(dfPV)\n)\n\n# Process scenario data\ndictScenarios = Dict()\nfor scenario in unique(dfScenarios.scenario)\n    scenario_data = dfScenarios[dfScenarios.scenario .== scenario, :]\n    dictScenarios[scenario] = (\n        datetime = scenario_data.datetime,\n        demand = scenario_data.demand,\n        wind_cf = scenario_data.wind_cf,\n        pv_cf = scenario_data.pv_cf,\n        market_price = scenario_data.market_price,\n        probability = scenario_data.probability[1]\n    )\nend\n\n# Process grid data\ndictGrid = Dict(\n    row.name =&gt; (\n        taxes_levies = row.taxes_levies,\n    ) for row in eachrow(dfGrid)\n)",
    "crumbs": [
      "08 Design",
      "Tutorial"
    ]
  },
  {
    "objectID": "part-08/tutorial-design.html#model-implementation",
    "href": "part-08/tutorial-design.html#model-implementation",
    "title": "Tutorial VIII - Stochastic Energy System Design Problem",
    "section": "4. Model Implementation",
    "text": "4. Model Implementation\nNow, let’s implement the Stochastic System Design model using the dictionary format:\n\nfunction solve_stochastic_design(dictStorage, dictWindTurbines, dictPV, dictScenarios, dictGrid, max_budget)\n    # Create model\n    model = Model(HiGHS.Optimizer)\n    set_silent(model)\n    \n    # Define sets\n    T = 1:168  # Time periods (hours)\n    S = keys(dictStorage)  # Set of storage systems\n    W = keys(dictWindTurbines)  # Set of wind parks\n    V = keys(dictPV)  # Set of PV parks\n    Ω = keys(dictScenarios)  # Set of scenarios\n    \n    # Calculate PVAF for each component type\n    pvaf = Dict(\n        \"storage\" =&gt; (1 + dictStorage[\"storage\"].discount_rate)^dictStorage[\"storage\"].lifetime / \n                    (dictStorage[\"storage\"].discount_rate * (1 + dictStorage[\"storage\"].discount_rate)^dictStorage[\"storage\"].lifetime),\n        \"wind\" =&gt; (1 + dictWindTurbines[\"wind\"].discount_rate)^dictWindTurbines[\"wind\"].lifetime / \n                 (dictWindTurbines[\"wind\"].discount_rate * (1 + dictWindTurbines[\"wind\"].discount_rate)^dictWindTurbines[\"wind\"].lifetime),\n        \"pv\" =&gt; (1 + dictPV[\"pv\"].discount_rate)^dictPV[\"pv\"].lifetime / \n               (dictPV[\"pv\"].discount_rate * (1 + dictPV[\"pv\"].discount_rate)^dictPV[\"pv\"].lifetime)\n    )\n    \n    # Decision Variables\n    # First stage (investment)\n    @variable(model, e_nom[s in S] &gt;= 0)  # Nominal energy capacity\n    @variable(model, p_ch_nom[s in S] &gt;= 0)  # Nominal charging power\n    @variable(model, p_dis_nom[s in S] &gt;= 0)  # Nominal discharging power\n    @variable(model, p_w_nom[w in W] &gt;= 0)  # Nominal wind power\n    @variable(model, p_v_nom[v in V] &gt;= 0)  # Nominal PV power\n    \n    # Second stage (operation)\n    @variable(model, p_w[w in W, t in T, ω in Ω] &gt;= 0)  # Wind power output\n    @variable(model, p_v[v in V, t in T, ω in Ω] &gt;= 0)  # PV power output\n    @variable(model, p_in[t in T, ω in Ω] &gt;= 0)  # Grid import\n    @variable(model, p_out[t in T, ω in Ω] &gt;= 0)  # Grid export\n    @variable(model, p_ch[s in S, t in T, ω in Ω] &gt;= 0)  # Storage charging\n    @variable(model, p_dis[s in S, t in T, ω in Ω] &gt;= 0)  # Storage discharging\n    @variable(model, e[s in S, t in T, ω in Ω] &gt;= 0)  # Storage energy level\n    \n    # Annual cost variables\n    @variable(model, AC_inv_s[s in S] &gt;= 0)  # Annual storage investment cost\n    @variable(model, AC_inv_w[w in W] &gt;= 0)  # Annual wind investment cost\n    @variable(model, AC_inv_v[v in V] &gt;= 0)  # Annual PV investment cost\n    @variable(model, AC_grid_imp[ω in Ω] &gt;= 0)  # Annual grid import cost\n    @variable(model, AR_grid_exp[ω in Ω] &gt;= 0)  # Annual grid export revenue\n    \n    # Objective Function\n    @objective(model, Min, \n        sum(AC_inv_s[s] for s in S) +\n        sum(AC_inv_w[w] for w in W) +\n        sum(AC_inv_v[v] for v in V) +\n        sum(dictScenarios[ω].probability * (AC_grid_imp[ω] - AR_grid_exp[ω]) for ω in Ω) * 52.1429\n    )\n    \n    # Investment cost constraints\n    @constraint(model, [s in S],\n        AC_inv_s[s] == dictStorage[s].energy_cost/pvaf[\"storage\"] * e_nom[s] +\n                      dictStorage[s].power_cost/pvaf[\"storage\"] * (p_ch_nom[s] + p_dis_nom[s])\n    )\n    \n    @constraint(model, [w in W],\n        AC_inv_w[w] == dictWindTurbines[w].power_cost/pvaf[\"wind\"] * p_w_nom[w]\n    )\n    \n    @constraint(model, [v in V],\n        AC_inv_v[v] == dictPV[v].power_cost/pvaf[\"pv\"] * p_v_nom[v]\n    )\n    \n    # Investment budget constraint\n    @constraint(model,\n        sum(dictStorage[s].energy_cost * e_nom[s] +\n            dictStorage[s].power_cost * (p_ch_nom[s] + p_dis_nom[s]) for s in S) +\n        sum(dictWindTurbines[w].power_cost * p_w_nom[w] for w in W) +\n        sum(dictPV[v].power_cost * p_v_nom[v] for v in V) &lt;= max_budget\n    )\n    \n    # Grid electricity costs\n    @constraint(model, [ω in Ω],\n        AC_grid_imp[ω] == sum(\n            (dictScenarios[ω].market_price[t] + dictGrid[\"grid\"].taxes_levies) * p_in[t,ω]\n            for t in T\n        )\n    )\n    \n    @constraint(model, [ω in Ω],\n        AR_grid_exp[ω] == sum(\n            dictScenarios[ω].market_price[t] * p_out[t,ω]\n            for t in T\n        )\n    )\n    \n    # Power balance\n    @constraint(model, [t in T, ω in Ω],\n        sum(p_w[w,t,ω] for w in W) +\n        sum(p_v[v,t,ω] for v in V) +\n        (p_in[t,ω] - p_out[t,ω]) +\n        sum(p_dis[s,t,ω] - p_ch[s,t,ω] for s in S) ==\n        dictScenarios[ω].demand[t]\n    )\n    \n    # Component limits\n    @constraint(model, [w in W, t in T, ω in Ω],\n        p_w[w,t,ω] &lt;= dictScenarios[ω].wind_cf[t] * p_w_nom[w]\n    )\n    \n    @constraint(model, [v in V, t in T, ω in Ω],\n        p_v[v,t,ω] &lt;= dictScenarios[ω].pv_cf[t] * p_v_nom[v]\n    )\n    \n    @constraint(model, [s in S, t in T, ω in Ω],\n        p_ch[s,t,ω] &lt;= p_ch_nom[s]\n    )\n    \n    @constraint(model, [s in S, t in T, ω in Ω],\n        p_dis[s,t,ω] &lt;= p_dis_nom[s]\n    )\n    \n    @constraint(model, [s in S, t in T, ω in Ω],\n        e[s,t,ω] &lt;= e_nom[s]\n    )\n    \n    # Storage energy balance\n    @constraint(model, [s in S, t in 2:length(T), ω in Ω],\n        e[s,t,ω] == (1 - dictStorage[s].self_discharge_rate) * e[s,t-1,ω] +\n                    dictStorage[s].charge_efficiency * p_ch[s,t,ω] -\n                    p_dis[s,t,ω] / dictStorage[s].discharge_efficiency\n    )\n    \n    @constraint(model, [s in S, ω in Ω],\n        e[s,1,ω] == dictStorage[s].charge_efficiency * p_ch[s,1,ω] -\n                    p_dis[s,1,ω] / dictStorage[s].discharge_efficiency\n    )\n    \n    # Solve the model\n    optimize!(model)\n\n    # Assert that the solution is feasible\n    if termination_status(model) != MOI.OPTIMAL\n        ts = termination_status(model)\n        @info \"Optimization finished. The model was not solved correctly. Termination Status: $ts\"\n        # Helpful resource: https://jump.dev/JuMP.jl/stable/manual/solutions/#Conflicts\n    end\n\n    # Return results\n    return (\n        e_nom = value.(e_nom),\n        p_ch_nom = value.(p_ch_nom),\n        p_dis_nom = value.(p_dis_nom),\n        p_w_nom = value.(p_w_nom),\n        p_v_nom = value.(p_v_nom),\n        total_cost = objective_value(model),\n        investment_costs = Dict(\n            \"storage\" =&gt; value.(AC_inv_s[\"storage\"]),\n            \"wind\" =&gt; value.(AC_inv_w[\"wind\"]),\n            \"pv\" =&gt; value.(AC_inv_v[\"pv\"])\n        ),\n        operational_costs = Dict(\n            \"grid_import\" =&gt; sum(dictScenarios[ω].probability * value.(AC_grid_imp[ω]) for ω in Ω) * 52.1429,\n            \"grid_export\" =&gt; sum(dictScenarios[ω].probability * value.(AR_grid_exp[ω]) for ω in Ω) * 52.1429\n        ),\n        operational_variables = Dict(\n            \"storage_energy\" =&gt; value.(e),\n            \"storage_charge\" =&gt; value.(p_ch),\n            \"storage_discharge\" =&gt; value.(p_dis),\n            \"wind_power\" =&gt; value.(p_w),\n            \"pv_power\" =&gt; value.(p_v),\n            \"grid_import\" =&gt; value.(p_in),\n            \"grid_export\" =&gt; value.(p_out)\n        )\n    )\nend",
    "crumbs": [
      "08 Design",
      "Tutorial"
    ]
  },
  {
    "objectID": "part-08/tutorial-design.html#solve-and-analyze-results",
    "href": "part-08/tutorial-design.html#solve-and-analyze-results",
    "title": "Tutorial VIII - Stochastic Energy System Design Problem",
    "section": "5. Solve and Analyze Results",
    "text": "5. Solve and Analyze Results\nLet’s solve the model with a maximum budget of 50 million EUR:\n\n# Solve model\nmax_budget = 50_000_000  # 50 million EUR\nresults = solve_stochastic_design(dictStorage, dictWindTurbines, dictPV, dictScenarios, dictGrid, max_budget)\n\n# Create results DataFrame\nresults_df = DataFrame(\n    component = String[],\n    capacity = Float64[],\n    investment_cost = Float64[]\n)\n\n# Add storage results\npush!(results_df, (\"Storage\", results.e_nom[\"storage\"], results.investment_costs[\"storage\"]))\n\n# Add wind results\npush!(results_df, (\"Wind\", results.p_w_nom[\"wind\"], results.investment_costs[\"wind\"]))\n\n# Add PV results\npush!(results_df, (\"PV\", results.p_v_nom[\"pv\"], results.investment_costs[\"pv\"]))\n\n# Calculate total costs\ntotal_investment_cost = sum(values(results.investment_costs))\ntotal_operational_cost = results.operational_costs[\"grid_import\"] - results.operational_costs[\"grid_export\"]\ntotal_cost = total_investment_cost + total_operational_cost\n\n# Print results\nprintln(\"Optimal System Design:\")\nprintln(\"Storage Energy Capacity: $(round(results.e_nom[\"storage\"], digits=2)) MWh\")\nprintln(\"Storage Charging Power: $(round(results.p_ch_nom[\"storage\"], digits=2)) MW\")\nprintln(\"Storage Discharging Power: $(round(results.p_dis_nom[\"storage\"], digits=2)) MW\")\nprintln(\"Wind Power Capacity: $(round(results.p_w_nom[\"wind\"], digits=2)) MW\")\nprintln(\"PV Power Capacity: $(round(results.p_v_nom[\"pv\"], digits=2)) MW\")\nprintln(\"\\nCosts:\")\nprintln(\"Total Annual Cost: $(round(total_cost, digits=2)) EUR/year\")\nprintln(\"Annual Investment Cost: $(round(total_investment_cost, digits=2)) EUR/year\")\nprintln(\"Annual Operational Cost: $(round(total_operational_cost, digits=2)) EUR/year\")\nprintln(\"\\nInvestment Costs by Component:\")\nprintln(\"Storage: $(round(results.investment_costs[\"storage\"], digits=2)) EUR/year\")\nprintln(\"Wind: $(round(results.investment_costs[\"wind\"], digits=2)) EUR/year\")\nprintln(\"PV: $(round(results.investment_costs[\"pv\"], digits=2)) EUR/year\")\nprintln(\"\\nOperational Costs:\")\nprintln(\"Grid Import: $(round(results.operational_costs[\"grid_import\"], digits=2)) EUR/year\")\nprintln(\"Grid Export Revenue: $(round(results.operational_costs[\"grid_export\"], digits=2)) EUR/year\")\n\n# Create operational results DataFrame\noperational_df = DataFrame(\n    scenario = String[],\n    hour = Int[],\n    storage_energy = Float64[],\n    storage_charge = Float64[],\n    storage_discharge = Float64[],\n    wind_power = Float64[],\n    pv_power = Float64[],\n    grid_import = Float64[],\n    grid_export = Float64[],\n    demand = Float64[]\n)\n\n# Add operational data for each scenario\nfor ω in keys(dictScenarios)\n    for t in 1:168\n        push!(operational_df, (\n            ω,\n            t,\n            results.operational_variables[\"storage_energy\"][\"storage\", t, ω],\n            results.operational_variables[\"storage_charge\"][\"storage\", t, ω],\n            results.operational_variables[\"storage_discharge\"][\"storage\", t, ω],\n            results.operational_variables[\"wind_power\"][\"wind\", t, ω],\n            results.operational_variables[\"pv_power\"][\"pv\", t, ω],\n            results.operational_variables[\"grid_import\"][t, ω],\n            results.operational_variables[\"grid_export\"][t, ω],\n            dictScenarios[ω].demand[t]\n        ))\n    end\nend",
    "crumbs": [
      "08 Design",
      "Tutorial"
    ]
  },
  {
    "objectID": "part-08/tutorial-design.html#create-figures",
    "href": "part-08/tutorial-design.html#create-figures",
    "title": "Tutorial VIII - Stochastic Energy System Design Problem",
    "section": "6. Create Figures",
    "text": "6. Create Figures\n\n# Create figure for component sizes and costs\nfig1 = Figure(size=(800, 800))\n\n# Component sizes\nax1 = Axis(fig1[1, 1], title=\"Optimal Component Sizes\")\nx_pos = 1:length(results_df.component)\nbarplot!(ax1, x_pos, results_df.capacity)\nax1.xticks = (x_pos, results_df.component)\nax1.xticklabelrotation = π/4\nax1.ylabel = \"Capacity [MWh/MW]\"\n\n# Cost breakdown\nax2 = Axis(fig1[1, 2], title=\"Annual Cost Breakdown\", aspect=1)  # Force square aspect ratio\nhidespines!(ax2)  # Hide the axis spines\nhidedecorations!(ax2)  # Hide all decorations (ticks, labels, etc.)\ncosts = [results.investment_costs[\"storage\"], results.investment_costs[\"wind\"], results.investment_costs[\"pv\"]]\ncolors = [:blue, :green, :orange]\nlabels = [\"Storage\", \"Wind\", \"PV\"]\n\n# Create pie chart\npie!(ax2, costs, color=colors, radius=0.8)\n\n# Create legend below the pie chart\nLegend(fig1[2, 2], [PolyElement(color=c) for c in colors], labels, \"Components\", \n    orientation=:horizontal)\n\n# Display figure\ndisplay(fig1)\n\n# Create operational plots\nfig2 = Figure(size=(1200, 1600))\n\n# Storage operation\nax1 = Axis(fig2[1, 1], title=\"Storage Energy Level\")\nfor ω in keys(dictScenarios)\n    lines!(ax1, operational_df[operational_df.scenario .== ω, :].hour,\n           operational_df[operational_df.scenario .== ω, :].storage_energy,\n           label=ω)\nend\nax1.xlabel = \"Hour\"\nax1.ylabel = \"Energy [MWh]\"\naxislegend(ax1)\n\n# Storage power\nax2 = Axis(fig2[1, 2], title=\"Storage Power\")\nfor ω in keys(dictScenarios)\n    lines!(ax2, operational_df[operational_df.scenario .== ω, :].hour,\n           operational_df[operational_df.scenario .== ω, :].storage_charge,\n           label=\"Charge - $ω\")\n    lines!(ax2, operational_df[operational_df.scenario .== ω, :].hour,\n           operational_df[operational_df.scenario .== ω, :].storage_discharge,\n           label=\"Discharge - $ω\")\nend\nax2.xlabel = \"Hour\"\nax2.ylabel = \"Power [MW]\"\naxislegend(ax2)\n\n# Wind power\nax3 = Axis(fig2[2, 1], title=\"Wind Power Generation\")\nfor ω in keys(dictScenarios)\n    lines!(ax3, operational_df[operational_df.scenario .== ω, :].hour,\n           operational_df[operational_df.scenario .== ω, :].wind_power,\n           label=ω)\nend\nax3.xlabel = \"Hour\"\nax3.ylabel = \"Power [MW]\"\naxislegend(ax3)\n\n# PV power\nax4 = Axis(fig2[2, 2], title=\"PV Power Generation\")\nfor ω in keys(dictScenarios)\n    lines!(ax4, operational_df[operational_df.scenario .== ω, :].hour,\n           operational_df[operational_df.scenario .== ω, :].pv_power,\n           label=ω)\nend\nax4.xlabel = \"Hour\"\nax4.ylabel = \"Power [MW]\"\naxislegend(ax4)\n\n# Grid interaction\nax5 = Axis(fig2[3, 1], title=\"Grid Import\")\nfor ω in keys(dictScenarios)\n    lines!(ax5, operational_df[operational_df.scenario .== ω, :].hour,\n           operational_df[operational_df.scenario .== ω, :].grid_import,\n           label=ω)\nend\nax5.xlabel = \"Hour\"\nax5.ylabel = \"Power [MW]\"\naxislegend(ax5)\n\nax6 = Axis(fig2[3, 2], title=\"Grid Export\")\nfor ω in keys(dictScenarios)\n    lines!(ax6, operational_df[operational_df.scenario .== ω, :].hour,\n           operational_df[operational_df.scenario .== ω, :].grid_export,\n           label=ω)\nend\nax6.xlabel = \"Hour\"\nax6.ylabel = \"Power [MW]\"\naxislegend(ax6)\n\n# Demand\nax7 = Axis(fig2[4, 1:2], title=\"System Demand\")\nfor ω in keys(dictScenarios)\n    lines!(ax7, operational_df[operational_df.scenario .== ω, :].hour,\n           operational_df[operational_df.scenario .== ω, :].demand,\n           label=ω)\nend\nax7.xlabel = \"Hour\"\nax7.ylabel = \"Power [MW]\"\naxislegend(ax7)\n\n# Display figure\ndisplay(fig2)",
    "crumbs": [
      "08 Design",
      "Tutorial"
    ]
  },
  {
    "objectID": "part-08/tutorial-design.html#sensitivity-analysis-example",
    "href": "part-08/tutorial-design.html#sensitivity-analysis-example",
    "title": "Tutorial VIII - Stochastic Energy System Design Problem",
    "section": "7. Sensitivity Analysis Example",
    "text": "7. Sensitivity Analysis Example\nLet’s analyze how the optimal solution changes with different maximum budgets:\n\n# Test different budgets\nbudgets = [25_000_000, 50_000_000, 75_000_000, 100_000_000]\nresults_by_budget = Dict()\n\nfor budget in budgets\n    results_by_budget[budget] = solve_stochastic_design(dictStorage, dictWindTurbines, dictPV, dictScenarios, dictGrid, budget)\nend\n\n# Create figure\nfig3 = Figure(size=(1200, 800))\n\n# Sort budgets and get corresponding results\nsorted_budgets = sort(budgets)\nsorted_results = [results_by_budget[b] for b in sorted_budgets]\n\n# Component sizes vs budget\nax1 = Axis(fig3[1, 1], title=\"Component Sizes vs Budget\")\nlines!(ax1, sorted_budgets, [r.e_nom[\"storage\"] for r in sorted_results], label=\"Storage Energy\")\nlines!(ax1, sorted_budgets, [r.p_w_nom[\"wind\"] for r in sorted_results], label=\"Wind\")\nlines!(ax1, sorted_budgets, [r.p_v_nom[\"pv\"] for r in sorted_results], label=\"PV\")\nax1.xlabel = \"Maximum Budget [EUR]\"\nax1.ylabel = \"Capacity [MWh or MW]\"\naxislegend(ax1)\n\n# Costs vs budget\nax2 = Axis(fig3[1, 2], title=\"Costs vs Budget\")\nlines!(ax2, sorted_budgets, [r.total_cost for r in sorted_results], label=\"Total Annual Cost\")\nlines!(ax2, sorted_budgets, [r.investment_costs[\"storage\"] for r in sorted_results], label=\"Storage\")\nlines!(ax2, sorted_budgets, [r.investment_costs[\"wind\"] for r in sorted_results], label=\"Wind\")\nlines!(ax2, sorted_budgets, [r.investment_costs[\"pv\"] for r in sorted_results], label=\"PV\")\n\n# Add initial investment cost line\ninitial_investment = [sum([\n    dictStorage[\"storage\"].energy_cost * r.e_nom[\"storage\"] +\n    dictStorage[\"storage\"].power_cost * (r.p_ch_nom[\"storage\"] + r.p_dis_nom[\"storage\"]) +\n    dictWindTurbines[\"wind\"].power_cost * r.p_w_nom[\"wind\"] +\n    dictPV[\"pv\"].power_cost * r.p_v_nom[\"pv\"]\n]) for r in sorted_results]\nlines!(ax2, sorted_budgets, initial_investment, label=\"Initial Investment\", linestyle=:dash)\n\n# Add budget line for reference\nlines!(ax2, sorted_budgets, sorted_budgets, label=\"Maximum Budget\", linestyle=:dot, color=:black)\n\nax2.xlabel = \"Maximum Budget [EUR]\"\nax2.ylabel = \"Annual Cost [EUR/year]\"\naxislegend(ax2)\n\n# Display figure\ndisplay(fig3)",
    "crumbs": [
      "08 Design",
      "Tutorial"
    ]
  },
  {
    "objectID": "part-08/tutorial-design.html#sensitivity-analysis-of-the-electricity-price",
    "href": "part-08/tutorial-design.html#sensitivity-analysis-of-the-electricity-price",
    "title": "Tutorial VIII - Stochastic Energy System Design Problem",
    "section": "8. Sensitivity Analysis of the Electricity Price",
    "text": "8. Sensitivity Analysis of the Electricity Price\nTASK: Watch for ##YOUR CODE HERE and implement the missing code.\n\nImplement a sensitivity analysis of the electricity price.\nPlot the results in a figure.\nInterpret the results and make a recommendation in section 9.\n\n\n# Test different price scaling factors\nprice_scales = 1.0:0.1:2.0  # From 100% to 200% in 10% steps\nresults_by_price = Dict()\n\n# Create a copy of the original scenarios to modify\nmodified_scenarios = deepcopy(dictScenarios)\n\n\nfor scale in price_scales\n    # HINT: Scale the market prices in each scenario. Use the modified_scenarios dictionary.\n    ## YOUR CODE HERE\n\n    # Solve the model with modified prices\n    ## YOUR CODE HERE\nend\n\n# Create figure\nfig4 = Figure(size=(1200, 800))\n\n# Sort price scales and get corresponding results\nsorted_scales = sort(collect(keys(results_by_price)))\nsorted_results = [results_by_price[s] for s in sorted_scales]\n\n# Calculate initial investment costs\ninitial_investment = [sum([\n    dictStorage[\"storage\"].energy_cost * r.e_nom[\"storage\"] +\n    dictStorage[\"storage\"].power_cost * (r.p_ch_nom[\"storage\"] + r.p_dis_nom[\"storage\"]) +\n    dictWindTurbines[\"wind\"].power_cost * r.p_w_nom[\"wind\"] +\n    dictPV[\"pv\"].power_cost * r.p_v_nom[\"pv\"]\n]) for r in sorted_results]\n\n# Component sizes vs price scale\nax1 = Axis(fig4[1, 1], title=\"Component Sizes vs Electricity Price\")\nlines!(ax1, sorted_scales, [r.e_nom[\"storage\"] for r in sorted_results], label=\"Storage Energy\")\nlines!(ax1, sorted_scales, [r.p_w_nom[\"wind\"] for r in sorted_results], label=\"Wind\")\nlines!(ax1, sorted_scales, [r.p_v_nom[\"pv\"] for r in sorted_results], label=\"PV\")\nax1.xlabel = \"Price Scale Factor\"\nax1.ylabel = \"Capacity [MWh or MW]\"\naxislegend(ax1)\n\n# Costs vs price scale\nax2 = Axis(fig4[1, 2], title=\"Costs vs Electricity Price\")\nlines!(ax2, sorted_scales, [r.total_cost for r in sorted_results], label=\"Total Annual Cost\")\nlines!(ax2, sorted_scales, [r.investment_costs[\"storage\"] for r in sorted_results], label=\"Storage\")\nlines!(ax2, sorted_scales, [r.investment_costs[\"wind\"] for r in sorted_results], label=\"Wind\")\nlines!(ax2, sorted_scales, [r.investment_costs[\"pv\"] for r in sorted_results], label=\"PV\")\n\n# Add operational costs\noperational_costs = [r.operational_costs[\"grid_import\"] - r.operational_costs[\"grid_export\"] for r in sorted_results]\nlines!(ax2, sorted_scales, operational_costs, label=\"Operational Cost\", linestyle=:dash)\n\nax2.xlabel = \"Price Scale Factor\"\nax2.ylabel = \"Annual Cost [EUR/year]\"\naxislegend(ax2)\n\n# Display figure\ndisplay(fig4)\n\n# Print key findings\nprintln(\"\\nKey Findings from Price Sensitivity Analysis:\")\nprintln(\"1. Impact on Component Sizes:\")\nprintln(\"   - Storage capacity changes from $(round(sorted_results[1].e_nom[\"storage\"], digits=2)) to $(round(sorted_results[end].e_nom[\"storage\"], digits=2)) MWh\")\nprintln(\"   - Wind capacity changes from $(round(sorted_results[1].p_w_nom[\"wind\"], digits=2)) to $(round(sorted_results[end].p_w_nom[\"wind\"], digits=2)) MW\")\nprintln(\"   - PV capacity changes from $(round(sorted_results[1].p_v_nom[\"pv\"], digits=2)) to $(round(sorted_results[end].p_v_nom[\"pv\"], digits=2)) MW\")\n\nprintln(\"\\n2. Impact on Costs:\")\nprintln(\"   - Total cost changes from $(round(sorted_results[1].total_cost, digits=2)) to $(round(sorted_results[end].total_cost, digits=2)) EUR/year\")\nprintln(\"   - Operational cost changes from $(round(operational_costs[1], digits=2)) to $(round(operational_costs[end], digits=2)) EUR/year\")\nprintln(\"   - Investment cost changes from $(round(sorted_results[1].total_cost - operational_costs[1], digits=2)) to $(round(sorted_results[end].total_cost - operational_costs[end], digits=2)) EUR/year\")",
    "crumbs": [
      "08 Design",
      "Tutorial"
    ]
  },
  {
    "objectID": "part-08/tutorial-design.html#recommendations-for-hamburg-chempark-gmbh",
    "href": "part-08/tutorial-design.html#recommendations-for-hamburg-chempark-gmbh",
    "title": "Tutorial VIII - Stochastic Energy System Design Problem",
    "section": "9. Recommendations for Hamburg ChemPark GmbH",
    "text": "9. Recommendations for Hamburg ChemPark GmbH\nTASK: Place your recommendations here: X, Y, Z, W, A, B, C, D, E, F, G.\nBased on our analysis, we can provide the following recommendations for Hamburg ChemPark GmbH for the expected case of a price scaled by 200%:\n\nOptimal System Configuration:\n\n\n   - Storage system with [X] MWh energy capacity and [Y] MW power capacity\n   - Wind park with [Z] MW capacity\n   - PV system with [W] MW capacity\n\n\nEconomic Performance:\n\n\n   - Total annual cost: [A] EUR/year\n   - Investment cost: [B] EUR/year\n   - Operational cost: [C] EUR/year\n\n\nFindings:\n\n\n    - Significant storage capacity is added at an electricity price scaled by [D]% of the base case.\n    - The annual investment cost increases from base case to 200% case from [E] EUR/year to [F] EUR/year, because the [G] for storage is much lower than for PV.\n\nIn a comprehensive sensitivity analysis, the following aspects should be considered:\n\nThe solution is most sensitive to [parameter]\nKey uncertainties include [uncertainty]\nRobustness can be improved by [action]\n\n\n\n\n\n\n\nNote\n\n\n\nThe model provides a foundation for decision-making, but additional factors should be considered:\n\nSite-specific constraints\nGrid connection capacity\nEnvironmental ambitions\nMaintenance requirements and costs\nFuture expansion possibilities",
    "crumbs": [
      "08 Design",
      "Tutorial"
    ]
  },
  {
    "objectID": "part-08/lecture-design.html",
    "href": "part-08/lecture-design.html",
    "title": "Lecture VIII - Energy System Design Problem",
    "section": "",
    "text": "Objective: Minimize total generation and storage costs over multiple time periods\nDecision Variables:\n\nPower output of thermal generators (\\(p_{g,t}\\))\nPower output of wind turbines (\\(p_{w,t}\\))\nBinary variables for generator status (\\(u_{g,t}\\))\nBinary variables for startup events (\\(v_{g,t}\\))\nStorage energy level (\\(e_{s,t}\\))\nStorage charging power (\\(p^{ch}_{s,t}\\))\nStorage discharging power (\\(p^{dis}_{s,t}\\))\nBinary variables for storage charging status (\\(u^{ch}_{s,t}\\))\nBinary variables for storage discharging status (\\(u^{dis}_{s,t}\\))\n\nKey Constraints:\n\nPower balance (including storage)\nGenerator limits\nWind limits\nMinimum up/down times\nRamp rate limits\nStartup variable definition\nStorage energy balance\nStorage energy limits\nStorage power limits and mutual exclusion\nStorage ramp rate limits\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe Unit Commitment problem with storage extends the basic UC problem by adding storage system modeling and operation constraints.\n\n\n\n\n\n\n\n\\(\\text{Minimize} \\quad \\sum_{t \\in \\mathcal{T}} \\left( \\sum_{g \\in \\mathcal{G}} (c^{var}_g p_{g,t} + c^{fix}_g u_{g,t} + c^{start}_g v_{g,t}) + \\sum_{w \\in \\mathcal{W}} c^{var}_w p_{w,t} \\right)\\)\n\n\n\n\nPower Balance:\n\n\\(\\sum_{g \\in \\mathcal{G}} p_{g,t} + \\sum_{w \\in \\mathcal{W}} p_{w,t} + \\sum_{s \\in \\mathcal{S}} (p^{dis}_{s,t} - p^{ch}_{s,t}) = d^f_t \\quad \\forall t \\in \\mathcal{T}\\)\n\nGenerator Limits:\n\n\\(p^{\\min}_g u_{g,t} \\leq p_{g,t} \\leq p^{\\max}_g u_{g,t} \\quad \\forall g \\in \\mathcal{G}, t \\in \\mathcal{T}\\)\n\nWind Power:\n\n\\(0 \\leq p_{w,t} \\leq p^f_{w,t} \\quad \\forall w \\in \\mathcal{W}, t \\in \\mathcal{T}\\)\n\nStorage Energy Balance:\n\n\\(e_{s,t} = (1-sdr_s)e_{s,t-1} + \\eta^{ch}_s p^{ch}_{s,t} - \\frac{p^{dis}_{s,t}}{\\eta^{dis}_s} \\quad \\forall s \\in \\mathcal{S}, t \\in \\mathcal{T}\\)\n\nStorage Energy Limits:\n\n\\(E^{min}_s \\leq e_{s,t} \\leq E^{max}_s \\quad \\forall s \\in \\mathcal{S}, t \\in \\mathcal{T}\\)\n\nStorage Power Limits and Mutual Exclusion:\n\n\\(0 \\leq p^{ch}_{s,t} \\leq P^{ch,max}_s u^{ch}_{s,t} \\quad \\forall s \\in \\mathcal{S}, t \\in \\mathcal{T}\\) \\(0 \\leq p^{dis}_{s,t} \\leq P^{dis,max}_s u^{dis}_{s,t} \\quad \\forall s \\in \\mathcal{S}, t \\in \\mathcal{T}\\) \\(u^{ch}_{s,t} + u^{dis}_{s,t} \\leq 1 \\quad \\forall s \\in \\mathcal{S}, t \\in \\mathcal{T}\\)\n\nStorage Ramp Rate Limits:\n\n\\(p^{ch}_{s,t} - p^{ch}_{s,t-1} \\leq R^{ch}_s \\quad \\forall s \\in \\mathcal{S}, t \\in \\mathcal{T}\\) \\(p^{dis}_{s,t} - p^{dis}_{s,t-1} \\leq R^{dis}_s \\quad \\forall s \\in \\mathcal{S}, t \\in \\mathcal{T}\\)\n\n\n\n\n\nMixed-Integer Linear Programming (MILP) problem\nBinary variables for generator status, startup events, and storage operation\nTime-dependent decisions for both generation and storage\nComputationally challenging due to:\n\nLarge number of binary variables\nLarge number of time steps\nLarge number of constraints\n\n\n\n\n\n\n\n\nTip\n\n\n\nThe Unit Commitment problem with storage provides a comprehensive model for power system operation, including both generation and storage resources.\n\n\n\n\n\n\nData structures use NamedTuples for efficient parameter storage\nResults are stored in DataFrames for easy analysis\nKey metrics tracked:\n\nTotal system cost\nWind curtailment\nThermal and wind generation\nGenerator status and startup events\nStorage energy levels\nStorage charging/discharging power\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe tutorial demonstrated how to implement and solve the UC problem with storage using Julia and JuMP, including visualization of generation and storage operation over time.\n\n\n\n\n\n\nThe tutorials from last week will again be available on Friday\nYou can access them in the project folder on Github\nClick on the little cat icon on the bottom right\n\n. . .\n\n\n\n\n\n\nTip\n\n\n\nYou can ask questions anytime in class or via email!",
    "crumbs": [
      "08 Design",
      "Lecture"
    ]
  },
  {
    "objectID": "part-08/lecture-design.html#unit-commitment-problem-with-storage-overview",
    "href": "part-08/lecture-design.html#unit-commitment-problem-with-storage-overview",
    "title": "Lecture VIII - Energy System Design Problem",
    "section": "",
    "text": "Objective: Minimize total generation and storage costs over multiple time periods\nDecision Variables:\n\nPower output of thermal generators (\\(p_{g,t}\\))\nPower output of wind turbines (\\(p_{w,t}\\))\nBinary variables for generator status (\\(u_{g,t}\\))\nBinary variables for startup events (\\(v_{g,t}\\))\nStorage energy level (\\(e_{s,t}\\))\nStorage charging power (\\(p^{ch}_{s,t}\\))\nStorage discharging power (\\(p^{dis}_{s,t}\\))\nBinary variables for storage charging status (\\(u^{ch}_{s,t}\\))\nBinary variables for storage discharging status (\\(u^{dis}_{s,t}\\))\n\nKey Constraints:\n\nPower balance (including storage)\nGenerator limits\nWind limits\nMinimum up/down times\nRamp rate limits\nStartup variable definition\nStorage energy balance\nStorage energy limits\nStorage power limits and mutual exclusion\nStorage ramp rate limits\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe Unit Commitment problem with storage extends the basic UC problem by adding storage system modeling and operation constraints.",
    "crumbs": [
      "08 Design",
      "Lecture"
    ]
  },
  {
    "objectID": "part-08/lecture-design.html#mathematical-formulation",
    "href": "part-08/lecture-design.html#mathematical-formulation",
    "title": "Lecture VIII - Energy System Design Problem",
    "section": "",
    "text": "\\(\\text{Minimize} \\quad \\sum_{t \\in \\mathcal{T}} \\left( \\sum_{g \\in \\mathcal{G}} (c^{var}_g p_{g,t} + c^{fix}_g u_{g,t} + c^{start}_g v_{g,t}) + \\sum_{w \\in \\mathcal{W}} c^{var}_w p_{w,t} \\right)\\)\n\n\n\n\nPower Balance:\n\n\\(\\sum_{g \\in \\mathcal{G}} p_{g,t} + \\sum_{w \\in \\mathcal{W}} p_{w,t} + \\sum_{s \\in \\mathcal{S}} (p^{dis}_{s,t} - p^{ch}_{s,t}) = d^f_t \\quad \\forall t \\in \\mathcal{T}\\)\n\nGenerator Limits:\n\n\\(p^{\\min}_g u_{g,t} \\leq p_{g,t} \\leq p^{\\max}_g u_{g,t} \\quad \\forall g \\in \\mathcal{G}, t \\in \\mathcal{T}\\)\n\nWind Power:\n\n\\(0 \\leq p_{w,t} \\leq p^f_{w,t} \\quad \\forall w \\in \\mathcal{W}, t \\in \\mathcal{T}\\)\n\nStorage Energy Balance:\n\n\\(e_{s,t} = (1-sdr_s)e_{s,t-1} + \\eta^{ch}_s p^{ch}_{s,t} - \\frac{p^{dis}_{s,t}}{\\eta^{dis}_s} \\quad \\forall s \\in \\mathcal{S}, t \\in \\mathcal{T}\\)\n\nStorage Energy Limits:\n\n\\(E^{min}_s \\leq e_{s,t} \\leq E^{max}_s \\quad \\forall s \\in \\mathcal{S}, t \\in \\mathcal{T}\\)\n\nStorage Power Limits and Mutual Exclusion:\n\n\\(0 \\leq p^{ch}_{s,t} \\leq P^{ch,max}_s u^{ch}_{s,t} \\quad \\forall s \\in \\mathcal{S}, t \\in \\mathcal{T}\\) \\(0 \\leq p^{dis}_{s,t} \\leq P^{dis,max}_s u^{dis}_{s,t} \\quad \\forall s \\in \\mathcal{S}, t \\in \\mathcal{T}\\) \\(u^{ch}_{s,t} + u^{dis}_{s,t} \\leq 1 \\quad \\forall s \\in \\mathcal{S}, t \\in \\mathcal{T}\\)\n\nStorage Ramp Rate Limits:\n\n\\(p^{ch}_{s,t} - p^{ch}_{s,t-1} \\leq R^{ch}_s \\quad \\forall s \\in \\mathcal{S}, t \\in \\mathcal{T}\\) \\(p^{dis}_{s,t} - p^{dis}_{s,t-1} \\leq R^{dis}_s \\quad \\forall s \\in \\mathcal{S}, t \\in \\mathcal{T}\\)",
    "crumbs": [
      "08 Design",
      "Lecture"
    ]
  },
  {
    "objectID": "part-08/lecture-design.html#model-characteristics",
    "href": "part-08/lecture-design.html#model-characteristics",
    "title": "Lecture VIII - Energy System Design Problem",
    "section": "",
    "text": "Mixed-Integer Linear Programming (MILP) problem\nBinary variables for generator status, startup events, and storage operation\nTime-dependent decisions for both generation and storage\nComputationally challenging due to:\n\nLarge number of binary variables\nLarge number of time steps\nLarge number of constraints\n\n\n\n\n\n\n\n\nTip\n\n\n\nThe Unit Commitment problem with storage provides a comprehensive model for power system operation, including both generation and storage resources.",
    "crumbs": [
      "08 Design",
      "Lecture"
    ]
  },
  {
    "objectID": "part-08/lecture-design.html#implementation-insights",
    "href": "part-08/lecture-design.html#implementation-insights",
    "title": "Lecture VIII - Energy System Design Problem",
    "section": "",
    "text": "Data structures use NamedTuples for efficient parameter storage\nResults are stored in DataFrames for easy analysis\nKey metrics tracked:\n\nTotal system cost\nWind curtailment\nThermal and wind generation\nGenerator status and startup events\nStorage energy levels\nStorage charging/discharging power\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe tutorial demonstrated how to implement and solve the UC problem with storage using Julia and JuMP, including visualization of generation and storage operation over time.",
    "crumbs": [
      "08 Design",
      "Lecture"
    ]
  },
  {
    "objectID": "part-08/lecture-design.html#solutions-from-last-week",
    "href": "part-08/lecture-design.html#solutions-from-last-week",
    "title": "Lecture VIII - Energy System Design Problem",
    "section": "",
    "text": "The tutorials from last week will again be available on Friday\nYou can access them in the project folder on Github\nClick on the little cat icon on the bottom right\n\n. . .\n\n\n\n\n\n\nTip\n\n\n\nYou can ask questions anytime in class or via email!",
    "crumbs": [
      "08 Design",
      "Lecture"
    ]
  },
  {
    "objectID": "part-08/lecture-design.html#what-are-tight-and-compact-formulations",
    "href": "part-08/lecture-design.html#what-are-tight-and-compact-formulations",
    "title": "Lecture VIII - Energy System Design Problem",
    "section": "What are Tight and Compact Formulations?",
    "text": "What are Tight and Compact Formulations?\nIn mathematical optimization, particularly for Mixed-Integer Linear Programming (MILP) problems like the Unit Commitment problem, the concepts of “tight” and “compact” formulations are crucial for efficient problem solving.\n\nTight Formulations\nA formulation is considered “tight” when there is a small gap between the optimal solution of the linear programming (LP) relaxation and the integer solution. This is important because:\n\nIt helps solvers find optimal solutions faster\nIt provides better lower bounds for branch-and-bound algorithms\nIt reduces the search space for integer solutions\n\n\n\nCompact Formulations\nA formulation is considered “compact” when it uses fewer variables and constraints while maintaining accuracy. This is important because:\n\nIt reduces computational complexity\nIt decreases memory requirements\nIt can speed up solution times\nIt makes the model easier to understand and maintain",
    "crumbs": [
      "08 Design",
      "Lecture"
    ]
  },
  {
    "objectID": "part-08/lecture-design.html#examples-in-uc-with-storage",
    "href": "part-08/lecture-design.html#examples-in-uc-with-storage",
    "title": "Lecture VIII - Energy System Design Problem",
    "section": "Examples in UC with Storage",
    "text": "Examples in UC with Storage\n\n1. Tight Formulations\n\nExample 1 - Generator Commitment:\n# Less tight formulation\np_{g,t} ≤ P^{max}_g u_{g,t}  # Only upper bound\n\n# Tighter formulation\nP^{min}_g u_{g,t} ≤ p_{g,t} ≤ P^{max}_g u_{g,t}  # Both bounds\n\nThe second formulation is tighter because it includes both minimum and maximum power constraints\nThis reduces the feasible region of the LP relaxation\nMakes it easier for the solver to find integer solutions\n\n\n\nExample 2 - Storage Operation:\n# Less tight formulation\ne_{s,t} = e_{s,t-1} + p^{ch}_{s,t} - p^{dis}_{s,t}  # Without efficiency\n\n# Tighter formulation\ne_{s,t} = (1-sdr_s)e_{s,t-1} + η^{ch}_s p^{ch}_{s,t} - p^{dis}_{s,t}/η^{dis}_s  # With efficiency\n\nThe second formulation is tighter because it accounts for efficiency losses\nThis better represents the physical reality of storage operation\nHelps the solver find more realistic solutions\n\n\n\n\n2. Compact Formulations\n\nExample 1 - Minimum Up/Down Times:\n# Less compact formulation\nu_{g,t} - u_{g,t-1} ≤ u_{g,τ}  ∀τ ∈ [t+1, t+T^{up}_g-1]\nu_{g,t-1} - u_{g,t} ≤ 1 - u_{g,τ}  ∀τ ∈ [t+1, t+T^{down}_g-1]\n\n# More compact formulation\n∑_{τ=t}^{t+T^{up}_g-1} u_{g,τ} ≥ T^{up}_g (u_{g,t} - u_{g,t-1})\n∑_{τ=t}^{t+T^{down}_g-1} (1-u_{g,τ}) ≥ T^{down}_g (u_{g,t-1} - u_{g,t})\n\nThe second formulation uses fewer constraints\nAchieves the same result with less computational overhead\nMakes the model more efficient to solve\n\n\n\nExample 2 - Storage Mutual Exclusion:\n# Less compact formulation\np^{ch}_{s,t} ≤ P^{ch,max}_s u^{ch}_{s,t}\np^{dis}_{s,t} ≤ P^{dis,max}_s u^{dis}_{s,t}\nu^{ch}_{s,t} + u^{dis}_{s,t} ≤ 1\n\n# More compact formulation\np^{ch}_{s,t}/P^{ch,max}_s + p^{dis}_{s,t}/P^{dis,max}_s ≤ 1\n\nThe second formulation combines three constraints into one\nReduces the number of binary variables needed\nSimplifies the model while maintaining accuracy",
    "crumbs": [
      "08 Design",
      "Lecture"
    ]
  },
  {
    "objectID": "part-08/lecture-design.html#why-these-concepts-matter",
    "href": "part-08/lecture-design.html#why-these-concepts-matter",
    "title": "Lecture VIII - Energy System Design Problem",
    "section": "Why These Concepts Matter",
    "text": "Why These Concepts Matter\n\nComputational Efficiency\n\nTighter formulations reduce the search space\nCompact formulations reduce the problem size\nBoth lead to faster solution times\n\n\n\nSolution Quality\n\nTighter formulations provide better bounds\nHelp find optimal solutions more reliably\nReduce the gap between LP relaxation and integer solution\n\n\n\nPractical Implementation\n\nMore efficient use of computational resources\nBetter handling of large-scale problems\nMore reliable results for real-world applications",
    "crumbs": [
      "08 Design",
      "Lecture"
    ]
  },
  {
    "objectID": "part-08/lecture-design.html#trade-offs-to-consider",
    "href": "part-08/lecture-design.html#trade-offs-to-consider",
    "title": "Lecture VIII - Energy System Design Problem",
    "section": "Trade-offs to Consider",
    "text": "Trade-offs to Consider\n\nTightness vs. Compactness\n\nSometimes making a formulation tighter makes it less compact\nNeed to balance between tightness and problem size\nChoose based on specific problem characteristics\n\n\n\nModel Complexity\n\nMore complex formulations might be tighter but harder to understand\nSimpler formulations might be more compact but less accurate\nNeed to find the right balance for your specific use case\n\n\n\n\n\n\n\nNote\n\n\n\nThese concepts are particularly important in the Unit Commitment problem with storage and approximations of part-load efficiencies because:\n\nThe problem is already complex with many variables and constraints\nStorage adds additional complexity with its operational constraints\nReal-world applications need efficient solutions\nThe problem size can grow quickly with more time periods or storage units",
    "crumbs": [
      "08 Design",
      "Lecture"
    ]
  },
  {
    "objectID": "part-08/lecture-design.html#energy-system-design-problem",
    "href": "part-08/lecture-design.html#energy-system-design-problem",
    "title": "Lecture VIII - Energy System Design Problem",
    "section": "Energy System Design Problem",
    "text": "Energy System Design Problem\nIn this lecture, we extend the Unit Commitment problem to include investment decisions for energy system components. This allows us to:\n\nOptimize technology selection\nDetermine optimal component sizes\nBalance investment and operational costs\nPlan local energy systems holistically\n\n\n\n\n\n\n\nNote\n\n\n\nThe design problem combines investment planning (sizing) with operational optimization, enabling comprehensive energy system design.",
    "crumbs": [
      "08 Design",
      "Lecture"
    ]
  },
  {
    "objectID": "part-08/lecture-design.html#key-components",
    "href": "part-08/lecture-design.html#key-components",
    "title": "Lecture VIII - Energy System Design Problem",
    "section": "Key Components",
    "text": "Key Components\nWe will focus on optimizing:\n\nStorage systems\nWind parks\nPV parks\nElectric market participation\n\n… while fullfilling a fixed electric demand. Additionally, we consider a maximum investment budget.\nAll nominal sizes will be decision variables in our optimization model.",
    "crumbs": [
      "08 Design",
      "Lecture"
    ]
  },
  {
    "objectID": "part-08/lecture-design.html#sets",
    "href": "part-08/lecture-design.html#sets",
    "title": "Lecture VIII - Energy System Design Problem",
    "section": "Sets",
    "text": "Sets\n\n\\(\\mathcal{T}\\) - Set of time periods indexed by \\(t \\in \\{1,2,...,|\\mathcal{T}|\\}\\)\n\\(\\mathcal{S}\\) - Set of storage systems indexed by \\(s \\in \\{1,2,...,|\\mathcal{S}|\\}\\)\n\\(\\mathcal{W}\\) - Set of wind parks indexed by \\(w \\in \\{1,2,...,|\\mathcal{W}|\\}\\)\n\\(\\mathcal{V}\\) - Set of PV parks indexed by \\(v \\in \\{1,2,...,|\\mathcal{V}|\\}\\)",
    "crumbs": [
      "08 Design",
      "Lecture"
    ]
  },
  {
    "objectID": "part-08/lecture-design.html#decision-variables",
    "href": "part-08/lecture-design.html#decision-variables",
    "title": "Lecture VIII - Energy System Design Problem",
    "section": "Decision Variables",
    "text": "Decision Variables\n\nInvestment Variables\n\n\\(e^{nom}_s\\) - Nominal energy capacity of storage \\(s\\) [MWh]\n\\(p^{ch,nom}_s\\) - Nominal charging power of storage \\(s\\) [MW]\n\\(p^{dis,nom}_s\\) - Nominal discharging power of storage \\(s\\) [MW]\n\\(p^{nom}_w\\) - Nominal power of wind park \\(w\\) [MW]\n\\(p^{nom}_v\\) - Nominal power of PV park \\(v\\) [MW]\n\n\n\nOperational Variables\n\n\\(p_{w,t}\\) - Power output of wind park \\(w\\) at time \\(t\\) [MW]\n\\(p_{v,t}\\) - Power output of PV park \\(v\\) at time \\(t\\) [MW]\n\\(p^{in}_t\\) - Power inflow through market at time \\(t\\) [MW]\n\\(p^{out}_t\\) - Power outflow through market at time \\(t\\) [MW]\n\\(p^{ch}_{s,t}\\) - Charging power of storage \\(s\\) at time \\(t\\) [MW]\n\\(p^{dis}_{s,t}\\) - Discharging power of storage \\(s\\) at time \\(t\\) [MW]\n\\(e_{s,t}\\) - Energy level of storage \\(s\\) at time \\(t\\) [MWh]\n\n\n\nAnnual Cost Variables\n\n\\(AC^{inv}_s\\) - Annual investment cost for storage \\(s\\) [EUR/year]\n\\(AC^{inv}_w\\) - Annual investment cost for wind park \\(w\\) [EUR/year]\n\\(AC^{inv}_v\\) - Annual investment cost for PV park \\(v\\) [EUR/year]\n\\(AC^{grid,imp}\\) - Annual grid electricity import cost [EUR/year]\n\\(AR^{grid,exp}\\) - Annual grid electricity export revenue [EUR/year]",
    "crumbs": [
      "08 Design",
      "Lecture"
    ]
  },
  {
    "objectID": "part-08/lecture-design.html#parameters",
    "href": "part-08/lecture-design.html#parameters",
    "title": "Lecture VIII - Energy System Design Problem",
    "section": "Parameters",
    "text": "Parameters\n\nInvestment Costs\n\n\\(C^{E}_s\\) - Cost per MWh of energy capacity for storage \\(s\\) [EUR/MWh]\n\\(C^{P,ch}_s\\) - Cost per MW of charging power capacity for storage \\(s\\) [EUR/MW]\n\\(C^{P,dis}_s\\) - Cost per MW of discharging power capacity for storage \\(s\\) [EUR/MW]\n\\(C^{W}_w\\) - Cost per MW of wind park \\(w\\) [EUR/MW]\n\\(C^{PV}_v\\) - Cost per MW of PV park \\(v\\) [EUR/MW]\n\\(F^{PVAF}\\) - Present value annuity factor for investment costs\n\\(B^{max}\\) - Maximum investment budget [EUR]\n\n\n\nOperational Parameters\n\n\\(\\eta^{ch}_s\\) - Charging efficiency of storage \\(s\\)\n\\(\\eta^{dis}_s\\) - Discharging efficiency of storage \\(s\\)\n\\(sdr_s\\) - Self-discharge rate of storage \\(s\\) per time step\n\\(DoD_s\\) - Depth of discharge limit for storage \\(s\\) [%]\n\\(f_{w,t}\\) - Wind capacity factor at time \\(t\\) for wind park \\(w\\)\n\\(f_{v,t}\\) - Solar capacity factor at time \\(t\\) for PV park \\(v\\)\n\\(d_t\\) - Electric demand at time \\(t\\) [MW]\n\\(c^{MP}_t\\) - Grid electricity market price at time \\(t\\) [EUR/MWh]\n\\(c^{TaL}\\) - Grid electricity taxes and levies (including Netzentgelt) [EUR/MWh]",
    "crumbs": [
      "08 Design",
      "Lecture"
    ]
  },
  {
    "objectID": "part-08/lecture-design.html#present-value-annuity-factor-pvaf",
    "href": "part-08/lecture-design.html#present-value-annuity-factor-pvaf",
    "title": "Lecture VIII - Energy System Design Problem",
    "section": "Present Value Annuity Factor (PVAF)",
    "text": "Present Value Annuity Factor (PVAF)\nThe Present Value Annuity Factor (PVAF) is used to convert investment costs into equivalent annual costs. It is calculated as:\n\\(F^{PVAF} = \\frac{(1 + r)^n - 1}{r(1 + r)^n}\\)\nwhere: - \\(r\\) is the discount rate (e.g., 0.05 for 5%) - \\(n\\) is the component lifetime in years (we assume the same lifetime for all components in the following)\nThis factor allows us to:\n\nConvert one-time investment costs into equivalent annual costs\nAccount for the time value of money\nCompare investments with different lifetimes\nMake investment decisions based on annual costs",
    "crumbs": [
      "08 Design",
      "Lecture"
    ]
  },
  {
    "objectID": "part-08/lecture-design.html#objective-function-1",
    "href": "part-08/lecture-design.html#objective-function-1",
    "title": "Lecture VIII - Energy System Design Problem",
    "section": "Objective Function",
    "text": "Objective Function\n\\(\\text{Minimize} \\quad \\sum_{s \\in \\mathcal{S}} AC^{inv}_s + \\sum_{w \\in \\mathcal{W}} AC^{inv}_w + \\sum_{v \\in \\mathcal{V}} AC^{inv}_v + AC^{grid,imp} - AR^{grid,exp}\\)\n\n\n\n\n\n\nNote\n\n\n\nThe objective function minimizes the total annual costs of the energy system:\n\nInvestment costs for all components:\n\nStorage systems (energy and power capacity)\nWind parks\nPV parks\n\nGrid electricity costs/revenues:\n\nImport costs (market price + taxes/levies including Netzentgelt)\nExport revenue (market price only)",
    "crumbs": [
      "08 Design",
      "Lecture"
    ]
  },
  {
    "objectID": "part-08/lecture-design.html#annual-cost-constraints",
    "href": "part-08/lecture-design.html#annual-cost-constraints",
    "title": "Lecture VIII - Energy System Design Problem",
    "section": "Annual Cost Constraints",
    "text": "Annual Cost Constraints\n\nInvestment Costs\n\\(AC^{inv}_s = \\frac{C^{E}_s}{F^{PVAF}} e^{nom}_s + \\frac{C^{P,ch}_s}{F^{PVAF}} p^{ch,nom}_s + \\frac{C^{P,dis}_s}{F^{PVAF}} p^{dis,nom}_s \\quad \\forall s \\in \\mathcal{S}\\) \\(AC^{inv}_w = \\frac{C^{W}_w}{F^{PVAF}} p^{nom}_w \\quad \\forall w \\in \\mathcal{W}\\) \\(AC^{inv}_v = \\frac{C^{PV}_v}{F^{PVAF}} p^{nom}_v \\quad \\forall v \\in \\mathcal{V}\\)\n\n\n\n\n\n\nNote\n\n\n\nThe investment costs are annualized using the Present Value Annuity Factor (PVAF):\n\nStorage investment includes:\n\nEnergy capacity costs\nCharging power capacity costs\nDischarging power capacity costs\n\nWind and PV investment include:\n\nPower capacity costs only\n\n\n\n\n\n\nInvestment Budget\n\\(\\sum_{s \\in \\mathcal{S}} (C^{E}_s e^{nom}_s + C^{P,ch}_s p^{ch,nom}_s + C^{P,dis}_s p^{dis,nom}_s) + \\sum_{w \\in \\mathcal{W}} C^{W}_w p^{nom}_w + \\sum_{v \\in \\mathcal{V}} C^{PV}_v p^{nom}_v \\leq B^{max}\\)\n\n\n\n\n\n\nNote\n\n\n\nThe investment budget constraint ensures that:\n\nTotal investment costs do not exceed the maximum budget\nIncludes all component investments:\n\nStorage systems (energy and power capacity)\nWind parks\nPV parks\n\n\n\n\n\n\nGrid Electricity Costs\n\\(AC^{grid,imp} = \\sum_{t \\in \\mathcal{T}} (c^{MP}_t + c^{TaL}) p^{in}_t\\) \\(AR^{grid,exp} = \\sum_{t \\in \\mathcal{T}} c^{MP}_t p^{out}_t\\)\n\n\n\n\n\n\nNote\n\n\n\nThe grid electricity costs and revenues are calculated as:\n\nImport costs include:\n\nTime-dependent market price\nFixed taxes and levies (including Netzentgelt)\n\nExport revenue includes:\n\nTime-dependent market price only",
    "crumbs": [
      "08 Design",
      "Lecture"
    ]
  },
  {
    "objectID": "part-08/lecture-design.html#constraints",
    "href": "part-08/lecture-design.html#constraints",
    "title": "Lecture VIII - Energy System Design Problem",
    "section": "Constraints",
    "text": "Constraints\n\nPower Balance\n\\(\\sum_{w \\in \\mathcal{W}} p_{w,t} + \\sum_{v \\in \\mathcal{V}} p_{v,t} + (p^{in}_t - p^{out}_t) + \\sum_{s \\in \\mathcal{S}} (p^{dis}_{s,t} - p^{ch}_{s,t}) = d_t \\quad \\forall t \\in \\mathcal{T}\\)\n\n\n\n\n\n\nNote\n\n\n\nThe power balance ensures that at each time step:\n\nTotal generation equals total demand:\n\nWind generation\nPV generation\nGrid import/export\nStorage charging/discharging\n\nNet grid power flow is:\n\nPositive for import\nNegative for export\n\n\n\n\n\n\nComponent Limits\n\nWind Parks\n\\(0 \\leq p_{w,t} \\leq f_{w,t} p^{nom}_w \\quad \\forall w \\in \\mathcal{W}, t \\in \\mathcal{T}\\)\n\n\n\n\n\n\nNote\n\n\n\nWind power output is constrained by:\n\nNon-negativity (no negative generation)\nMaximum available power:\n\nTime-dependent capacity factor\nNominal power capacity\n\n\n\n\n\n\nPV Parks\n\\(0 \\leq p_{v,t} \\leq f_{v,t} p^{nom}_v \\quad \\forall v \\in \\mathcal{V}, t \\in \\mathcal{T}\\)\n\n\n\n\n\n\nNote\n\n\n\nPV power output is constrained by:\n\nNon-negativity (no negative generation)\nMaximum available power:\n\nTime-dependent capacity factor\nNominal power capacity\n\n\n\n\n\n\nStorage Systems\n\\(0 \\leq p^{ch}_{s,t} \\leq p^{ch,nom}_s \\quad \\forall s \\in \\mathcal{S}, t \\in \\mathcal{T}\\) \\(0 \\leq p^{dis}_{s,t} \\leq p^{dis,nom}_s \\quad \\forall s \\in \\mathcal{S}, t \\in \\mathcal{T}\\) \\(DoD_s e^{nom}_s \\leq e_{s,t} \\leq e^{nom}_s \\quad \\forall s \\in \\mathcal{S}, t \\in \\mathcal{T}\\)\n\n\n\n\n\n\nNote\n\n\n\nStorage operation is constrained by:\n\nCharging power limits:\n\nNon-negativity\nNominal charging power capacity\n\nDischarging power limits:\n\nNon-negativity\nNominal discharging power capacity\n\nEnergy level limits:\n\nMinimum level based on depth of discharge\nMaximum level based on nominal capacity\n\n\n\n\n\n\n\nStorage Energy Balance\n\\(e_{s,t} = (1-sdr_s)e_{s,t-1} + \\eta^{ch}_s p^{ch}_{s,t} - \\frac{p^{dis}_{s,t}}{\\eta^{dis}_s} \\quad \\forall s \\in \\mathcal{S}, t \\in \\mathcal{T}\\)\n\n\n\n\n\n\nNote\n\n\n\nThe storage energy balance accounts for:\n\nPrevious energy level:\n\nReduced by self-discharge\n\nCharging:\n\nIncreased by charging power\nReduced by charging efficiency losses\n\nDischarging:\n\nDecreased by discharging power\nIncreased by discharging efficiency losses",
    "crumbs": [
      "08 Design",
      "Lecture"
    ]
  },
  {
    "objectID": "part-08/lecture-design.html#model-characteristics-1",
    "href": "part-08/lecture-design.html#model-characteristics-1",
    "title": "Lecture VIII - Energy System Design Problem",
    "section": "Model Characteristics",
    "text": "Model Characteristics\n\nMixed-Integer Linear Programming (MILP) problem\nCombines investment and operational decisions\nLarge-scale optimization problem\nRequires efficient solution methods\n\n\n\n\n\n\n\nNote\n\n\n\nThe model can be adapted to the specific use case, i.e. if a windpark already has a fixed capacity, the corresponding variable can be coverted to a parameter.",
    "crumbs": [
      "08 Design",
      "Lecture"
    ]
  },
  {
    "objectID": "part-08/lecture-design.html#key-considerations",
    "href": "part-08/lecture-design.html#key-considerations",
    "title": "Lecture VIII - Energy System Design Problem",
    "section": "Key Considerations",
    "text": "Key Considerations\n\nTime Resolution:\n\nBalance between accuracy and computational effort\nConsider representative periods\nAccount for seasonal variations\n\nInvestment Costs:\n\nAnnualize investment costs using PVAF\nConsider component lifetimes\nInclude maintenance costs\n\nOperational Constraints:\n\nStorage cycling limits\nGrid connection capacity\nRenewable generation profiles\n\nSolution Methods:\n\nDecomposition approaches\nHeuristic methods\nCommercial solvers",
    "crumbs": [
      "08 Design",
      "Lecture"
    ]
  },
  {
    "objectID": "part-08/lecture-design.html#real-world-use-cases",
    "href": "part-08/lecture-design.html#real-world-use-cases",
    "title": "Lecture VIII - Energy System Design Problem",
    "section": "Real-World Use Cases",
    "text": "Real-World Use Cases\n\nLocal Energy Systems:\n\nMicrogrids\nIndustrial parks\nResidential communities\n\nGrid Integration:\n\nRenewable energy integration\nGrid capacity planning\nAncillary services\n\nEnergy Markets:\n\nMulti-market participation\nPrice arbitrage\nCapacity markets",
    "crumbs": [
      "08 Design",
      "Lecture"
    ]
  },
  {
    "objectID": "part-08/lecture-design.html#extensions",
    "href": "part-08/lecture-design.html#extensions",
    "title": "Lecture VIII - Energy System Design Problem",
    "section": "Extensions",
    "text": "Extensions\n\nMulti-Criteria Optimization:\n\nEconomic objectives\nEnvironmental impact\nSystem reliability\n\nUncertainty Handling:\n\nWeather forecasts\nPrice forecasts\nDemand forecasts\n\nAdvanced Features:\n\nBattery degradation\nMulti-market participation\nGrid services\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe sizing problem provides a foundation for comprehensive energy system planning and optimization.\n\n\n\n\nQuestions?\n\n\n\n\n\nLiterature\n\nLiterature I\nFor more interesting literature to learn more about Julia, take a look at the literature list of this course.\n\n\nLiterature II\nFor a detailed mathematical formulation of the Unit Commitment problem, see Morales-Espana, Latorre, and Ramos (2013) and Zimmermann and Kather (2019).",
    "crumbs": [
      "08 Design",
      "Lecture"
    ]
  },
  {
    "objectID": "part-08/lecture-design.html#literature-i",
    "href": "part-08/lecture-design.html#literature-i",
    "title": "Lecture VIII - Energy System Design Problem",
    "section": "Literature I",
    "text": "Literature I\nFor more interesting literature to learn more about Julia, take a look at the literature list of this course.",
    "crumbs": [
      "08 Design",
      "Lecture"
    ]
  },
  {
    "objectID": "part-08/lecture-design.html#literature-ii",
    "href": "part-08/lecture-design.html#literature-ii",
    "title": "Lecture VIII - Energy System Design Problem",
    "section": "Literature II",
    "text": "Literature II\nFor a detailed mathematical formulation of the Unit Commitment problem, see Morales-Espana, Latorre, and Ramos (2013) and Zimmermann and Kather (2019).",
    "crumbs": [
      "08 Design",
      "Lecture"
    ]
  }
]