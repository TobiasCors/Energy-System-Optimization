{
  "hash": "b0732c3c06624e3bfe73783abdf20fe4",
  "result": {
    "engine": "julia",
    "markdown": "---\ntitle: \"Lecture XI - Framework for Multi-Energy System Optimization\"\nsubtitle: \"Energy System Optimization with Julia\"\nauthor: \"Dr. Tobias Cors\"\ninstitute: \"Hamburg University of Applied Science - Summer 2025\"\ntitle-slide-attributes:\n    data-background-color: \"#025259\"\nhtml-math-method:\n  method: mathjax\n  url: \"https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js\"\n\nformat:\n    html:\n        theme: [litera, ../styles.scss]\n        include-in-header: \n            text: |\n                \\usepackage{tikz}\n                \\usepackage{pgfplots}\n                \\pgfplotsset{compat=1.18}\n    revealjs:\n        theme: [default, ../styles.scss]\n        transition: slide\n        transition-speed: fast\n        highlight-style: arrow\n        slide-number: true\n        code-copy: true\n        code-link: true\n        preview-links: auto\n        footer: \" {{< meta title >}} | {{< meta author >}} | [Home](lecture-mes.qmd)\"\n        output-file: lecture-presentation.html\n\nbibliography: ../ESO-bib.bib\n\nengine: julia\n\nexecute:\n    echo: true\n---\n\n\n\n\n\n\n\n\n# [Quick Recap from last Week]{.flow} {.title}\n\n## Multi-Energy System Design Problem Overview\n\n- **Objective**: Minimize total annual costs (investment + operational) while respecting budget constraints for multi-energy systems\n- **Decision Variables**:\n\n  - Investment variables (First Stage):\n    - Storage energy capacity ($e^{nom}_s$) for both electricity and hydrogen storage\n    - Storage charging power ($p^{ch,nom}_s$) for both energy carriers\n    - Storage discharging power ($p^{dis,nom}_s$) for both energy carriers\n    - Wind park capacity ($p^{nom}_w$)\n    - PV park capacity ($p^{nom}_v$)\n    - Electrolyzer capacity ($p^{nom}_x$)\n  - Operational variables (Second Stage):\n    - Wind power output ($p_{w,t,\\omega}$)\n    - PV power output ($p_{v,t,\\omega}$)\n    - Grid import/export ($p^{in}_{t,\\omega}$, $p^{out}_{t,\\omega}$)\n    - Storage operation ($p^{ch}_{s,t,\\omega}$, $p^{dis}_{s,t,\\omega}$, $e_{s,t,\\omega}$)\n    - Electrolyzer operation ($p_{x,t,\\omega}$, $h_{x,t,\\omega}$)\n\n- **Key Constraints**:\n\n  - Investment budget limit\n  - Electricity power balance\n  - Hydrogen balance\n  - Component capacity limits\n  - Storage energy balance\n  - Storage energy limits\n  - Storage power limits\n  - Electrolyzer conversion constraints\n\n::: {.callout-note}\nThe Multi-Energy System Design problem extends the basic energy system design by incorporating multiple energy carriers (electricity and hydrogen) and energy conversion technologies (electrolyzers). The stochastic formulation considers multiple scenarios to account for uncertainty in renewable generation, demand patterns, and price variations across different energy carriers.\n:::\n\n## Mathematical Formulation\n\n### Objective Function\n\n$\\text{Minimize} \\quad \\sum_{s \\in \\mathcal{S}} AC^{inv}_s + \\sum_{w \\in \\mathcal{W}} AC^{inv}_w + \\sum_{v \\in \\mathcal{V}} AC^{inv}_v + \\sum_{x \\in \\mathcal{X}} AC^{inv}_x + \\sum_{\\omega \\in \\Omega} \\pi_{\\omega} (AC^{grid,imp}_{\\omega} - AR^{grid,exp}_{\\omega})$\n\n### Key Constraints\n\n1. **Investment Budget**:\n\n$\\sum_{s \\in \\mathcal{S}} (C^{E}_s e^{nom}_s + C^{P,ch}_s p^{ch,nom}_s + C^{P,dis}_s p^{dis,nom}_s) + \\sum_{w \\in \\mathcal{W}} C^{W}_w p^{nom}_w + \\sum_{v \\in \\mathcal{V}} C^{PV}_v p^{nom}_v + \\sum_{x \\in \\mathcal{X}} C^{X}_x p^{nom}_x \\leq B^{max}$\n\n2. **Electricity Power Balance**:\n\n$\\sum_{w \\in \\mathcal{W}} p_{w,t,\\omega} + \\sum_{v \\in \\mathcal{V}} p_{v,t,\\omega} + (p^{in}_{t,\\omega} - p^{out}_{t,\\omega}) + \\sum_{s \\in \\mathcal{S}_{\\text{El}}} (p^{dis}_{s,t,\\omega} - p^{ch}_{s,t,\\omega}) = \\sum_{x \\in \\mathcal{X}} p_{x,t,\\omega} \\quad \\forall t \\in \\mathcal{T}, \\omega \\in \\Omega$\n\n3. **Hydrogen Balance**:\n\n$\\sum_{x \\in \\mathcal{X}} h_{x,t,\\omega} + \\sum_{s \\in \\mathcal{S}_{\\text{H2}}} (p^{dis}_{s,t,\\omega} - p^{ch}_{s,t,\\omega}) = d_{t,\\omega} \\quad \\forall t \\in \\mathcal{T}, \\omega \\in \\Omega$\n\n4. **Component Capacity Limits**:\n\n$0 \\leq p_{w,t,\\omega} \\leq f_{w,t,\\omega} p^{nom}_w \\quad \\forall w \\in \\mathcal{W}, t \\in \\mathcal{T}, \\omega \\in \\Omega$\n$0 \\leq p_{v,t,\\omega} \\leq f_{v,t,\\omega} p^{nom}_v \\quad \\forall v \\in \\mathcal{V}, t \\in \\mathcal{T}, \\omega \\in \\Omega$\n$0 \\leq p^{ch}_{s,t,\\omega} \\leq p^{ch,nom}_s \\quad \\forall s \\in \\mathcal{S}, t \\in \\mathcal{T}, \\omega \\in \\Omega$\n$0 \\leq p^{dis}_{s,t,\\omega} \\leq p^{dis,nom}_s \\quad \\forall s \\in \\mathcal{S}, t \\in \\mathcal{T}, \\omega \\in \\Omega$\n$DoD_s e^{nom}_s \\leq e_{s,t,\\omega} \\leq e^{nom}_s \\quad \\forall s \\in \\mathcal{S}, t \\in \\mathcal{T}, \\omega \\in \\Omega$\n\n5. **Storage Energy Balance**:\n\n$e_{s,t,\\omega} = (1-sdr_s)e_{s,t-1,\\omega} + \\eta^{ch}_s p^{ch}_{s,t,\\omega} - \\frac{p^{dis}_{s,t,\\omega}}{\\eta^{dis}_s} \\quad \\forall s \\in \\mathcal{S}, t \\in \\mathcal{T}, \\omega \\in \\Omega$\n\n6. **Electrolyzer Constraints**:\n\n$0 \\leq p_{x,t,\\omega} \\leq p^{nom}_x \\quad \\forall x \\in \\mathcal{X}, t \\in \\mathcal{T}, \\omega \\in \\Omega$\n$h_{x,t,\\omega} = \\beta_x p_{x,t,\\omega} \\quad \\forall x \\in \\mathcal{X}, t \\in \\mathcal{T}, \\omega \\in \\Omega$\n\n## Model Characteristics\n\n- Two-stage stochastic Linear Programming (LP) problem for multi-energy systems\n- Combines investment and operational decisions across multiple energy carriers\n- Large-scale optimization problem with energy conversion technologies\n- Requires efficient solution methods\n- Considers multiple scenarios for robust decision-making\n- Integrates electricity and hydrogen value chains\n\n::: {.callout-tip}\nThe multi-energy system model can be adapted to specific use cases, i.e., if certain components already have fixed capacities, the corresponding variables can be converted to parameters. The stochastic formulation allows for more robust investment decisions by considering multiple scenarios across different energy carriers.\n:::\n\n## Key Extensions from Single-Energy Systems\n\n### New Components\n- **Electrolyzers**: Convert electricity to hydrogen with efficiency $\\beta_x$\n- **Hydrogen Storage**: Separate storage systems for hydrogen with different characteristics\n- **Energy Conversion**: Explicit modeling of energy carrier conversion processes\n\n### New Constraints\n- **Hydrogen Balance**: Ensures hydrogen demand is met through production and storage\n- **Electrolyzer Operation**: Links electricity consumption to hydrogen production\n- **Multi-Carrier Storage**: Distinguishes between electricity ($\\mathcal{S}_{\\text{El}}$) and hydrogen ($\\mathcal{S}_{\\text{H2}}$) storage\n\n### Modified Constraints\n- **Electricity Balance**: Now includes electrolyzer consumption instead of direct demand\n- **Investment Budget**: Includes electrolyzer investment costs\n- **Objective Function**: Includes electrolyzer annualized investment costs\n\n::: {.callout-note}\nThese extensions enable comprehensive optimization of energy value chains, allowing for optimal sizing and operation of systems that convert between the different energy carriers while considering uncertainty and operational constraints.\n:::\n\n## Solutions from last Week\n\n- The tutorials from last week will again be [available on Friday]{.highlight}\n- You can access them in the project folder on Github\n- Click on the little cat icon on the bottom right\n\n. . .\n\n::: {.callout-tip}\n[You can ask questions anytime in class or via email!]{.highlight}\n:::\n\n# [Excursion: Big M Constraints in Mixed-Integer Programming]{.flow} {.title}\n\n## What are Big M Constraints?\n\nBig M constraints are a fundamental modeling technique in Mixed-Integer Linear Programming (MILP) used to create conditional relationships between continuous and binary variables. The \"M\" represents a large constant that acts as an upper bound, allowing constraints to be \"turned on\" or \"turned off\" based on binary variable values.\n\n::: {.callout-note}\nBig M constraints enable the modeling of complex logical relationships and conditional constraints that would otherwise be difficult to express in linear programming formulations.\n:::\n\n## Basic Concept\n\nThe general form of a big M constraint is:\n\n$f(x) \\leq M (1 - y)$\n\nwhere:\n\n- $f(x)$ is a function of continuous variables\n- $M$ is a large constant (the \"big M\")\n- $y$ is a binary variable (0 or 1)\n\n**Logic**: When $y = 1$, the constraint becomes $f(x) \\leq 0$ (active). When $y = 0$, the constraint becomes $f(x) \\leq M$ (inactive, since $M$ is large).\n\n## Example from Unit Commitment: Startup Timing Constraints\n\nConsider the constraint from the intermission lecture where generator 3 and generator 4 cannot start up within 3 time periods of each other:\n\n$\\sum_{\\tau \\in [t, \\min(t+3,|\\mathcal{T}|)]} v_{3,\\tau} \\leq (1 - v_{4,t}) M \\quad \\forall t \\in \\mathcal{T}$\n\n$\\sum_{\\tau \\in [t-1, \\max(t-3,1)]} v_{3,\\tau} \\leq (1 - v_{4,t}) M \\quad \\forall t \\in \\mathcal{T}$\n\n### How it Works:\n\n1. **When $v_{4,t} = 1$** (generator 4 starts at time $t$):\n   - The right-hand side becomes $(1-1) M = 0$\n   - The constraint forces $\\sum v_{3,\\tau} \\leq 0$\n   - This means generator 3 cannot start in the specified time windows\n\n2. **When $v_{4,t} = 0$** (generator 4 does not start at time $t$):\n   - The right-hand side becomes $(1-0) M = M$\n   - The constraint becomes $\\sum v_{3,\\tau} \\leq M$\n   - Since $M$ is large, this constraint is effectively not limiting the startup of generator 3 and hence not active\n\n::: {.callout-tip}\nThe choice of $M$ is crucial: it must be large enough to make constraints inactive when needed, but not so large that it causes numerical issues in the solver.\n:::\n\n## Choosing the Right Big M Value\n\n### Guidelines for Selecting M:\n\n1. **Upper Bound**: $M$ should be an upper bound on the left-hand side expression\n2. **Tightness**: Choose the smallest possible value that still works\n3. **Numerical Stability**: Avoid extremely large values that can cause solver issues\n\n### Example Calculation:\nFor the startup timing constraint, a good choice for $M$ would be:\n\n- $M = |\\mathcal{T}|$ (total number of time periods)\n- This ensures that even if all startup variables were 1, the constraint would still be satisfied when inactive\n- Considering that the fastest startup variable sequence is 1-0-1-0-..., M could be set to 2 here.\n\n## Advantages and Disadvantages\n\n### Advantages:\n- **Flexibility**: Enables modeling of complex logical relationships\n- **Linear Formulation**: Maintains linearity of the optimization problem\n- **Wide Applicability**: Can be used in many different contexts\n\n### Disadvantages:\n- **Numerical Issues**: Poor choice of $M$ can cause solver difficulties\n- **Weak Relaxation**: Can lead to weak linear programming relaxations\n- **Solution Quality**: May result in slower convergence\n\n## Alternative Approaches\n\n### 1. Indicator Constraints\nIndicator constraints replace big M constraints with direct logical relationships. They are best suited for **simple binary conditions** where you have clear \"if-then\" relationships.\n\n**Big M approach:**\n\n$p_g \\leq p_g^{max} u_g$\n\n**Indicator constraint approach:**\n```julia\n@constraint(model, u_g => {p_g <= p_g_max})  # If generator is ON, then power ≤ max\n@constraint(model, !u_g => {p_g == 0})       # If generator is OFF, then power = 0\n```\n\n**When to use**: Simple binary logic (on/off, yes/no, active/inactive)\n\n**Key characteristic**: Direct logical statements without mutual exclusivity requirements\n\n**Advantages:**\n\n- No need to choose M values\n- Often leads to tighter formulations\n- More intuitive modeling\n- Better numerical stability\n\n**Disadvantages:**\n\n- Not all solvers support indicator constraints\n- May require specialized solvers\n\n### 2. Disjunctive Programming\nDisjunctive programming handles **complex multi-state conditions** where exactly one state must be active. It uses special ordered sets (SOS1) to enforce mutual exclusivity.\n\n**Example**: A generator can operate in exactly one of three modes: off, minimum load, or full load.\n\n**Big M approach:**\n\n$p_g \\leq (1 - u_g^{off}) + p_g^{min} u_g^{min} + p_g^{max} u_g^{max}$\n\n$p_g \\geq (1 - u_g^{off}) + p_g^{min} u_g^{min} + p_g^{max} u_g^{max}$\n\n$u_g^{off} + u_g^{min} + u_g^{max} \\leq 1$\n\n**Disjunctive approach:**\n```julia\n# SOS1 ensures exactly one binary variable is 1, others are 0\n@constraint(model, [u_g_off, u_g_min, u_g_max] in MOI.SOS1(3))\n@constraint(model, u_g_off => {p_g == 0})                       # State 1: Off\n@constraint(model, u_g_min => {p_g == p_g_min})                 # State 2: Minimum load\n@constraint(model, u_g_max => {p_g == p_g_max})                 # State 3: Full load\n```\n\n**When to use**: Multiple mutually exclusive states or operational modes\n**Key characteristic**: Enforces that exactly one state is active at a time\n\n**Advantages:**\n\n- More structured for complex logical relationships\n- Can lead to better formulations\n- Easier to understand complex constraints\n- Enforces mutual exclusivity automatically\n\n**Disadvantages:**\n\n- More complex implementation\n- May not be supported by all solvers\n\n### Key Differences Between Approaches 1 and 2:\n\n| Aspect | Indicator Constraints | Disjunctive Programming |\n|--------|----------------------|-------------------------|\n| **Complexity** | Simple binary logic | Multiple states |\n| **Mutual Exclusivity** | Not enforced | Automatically enforced |\n| **Use Case** | \"If A, then B\" | \"Must be in exactly one of states A, B, C\" |\n| **Implementation** | Direct logical statements | SOS1 constraints |\n| **Example** | Generator on/off | Generator off/min/max modes |\n\n### 3. Reformulation\nSometimes big M constraints can be reformulated using additional variables or constraints that are more efficient or numerically stable.\n\n**Example**: Instead of using big M for minimum up time constraints, use a different approach.\n\n**Big M approach:**\n\n$\\sum_{t'=t}^{t+T^{min}-1} u_{g,t'} \\geq T^{min} v_{g,t}$\n\n**Reformulation approach:**\n```julia\n# Use a continuous variable to track remaining minimum up time\n@variable(model, 0 <= remaining_up_time[g, t] <= T_min)\n@constraint(model, remaining_up_time[g, t] <= T_min * u_g[t])\n@constraint(model, remaining_up_time[g, t] <= remaining_up_time[g, t-1] - 1 + T_min * v_g[t])\n@constraint(model, remaining_up_time[g, t] >= 0)\n```\n\n**Advantages:**\n\n- Often more numerically stable\n- Can provide tighter formulations\n- May lead to faster solution times\n\n**Disadvantages:**\n\n- More complex to implement\n- Requires more variables and constraints\n- May not always be possible\n\n::: {.callout-note}\nBig M constraints are a powerful tool in MILP modeling, but they should be used carefully with appropriate values for $M$ to ensure both correctness and computational efficiency.\n:::\n\n## Practical Tips\n\n1. **Document your choice of M**: Always explain why you chose a particular value\n2. **Test with small instances**: Verify that your constraints work as expected\n3. **Consider solver-specific features**: Some solvers have built-in support for certain constraint types\n4. **Monitor solution times**: If the problem is slow to solve, consider if big M constraints are the bottleneck\n\n# [Recap: Introduction to Multi-Energy Systems]{.flow} {.title}\n\n## Multi-Energy Systems: Definition\n\nA multi-energy system is a system that combines multiple energy carriers (e.g. electricity, hydrogen, heat, etc.) to meet the energy demand of a specific application.\n\n## Multi-Energy Systems: Example Hydrogen Value Chain\n\n![Example case of a hydrogen value chain](H2-mes.png){width=70%}\n\n::: {.callout-note}\nThe figure shows a multi-energy system with:\n\n- Renewable energy sources (PV and Wind) and grid connection\n- Electric bus bar for power distribution\n- Electrolyzer for hydrogen production\n- Hydrogen bus bar for hydrogen distribution\n- Hydrogen storage\n- Hydrogen demand\n:::\n\n## Framework for Multi-Energy System Design Problem\n\nIn this lecture, we reformulate the Stochastic Multi-Energy System Design problem to be applicable to a wide range of energy system applications *only by changing the sets and parameters*. This allows us to:\n\n1. Adapt the model to the specific energy system application by changing the sets and parameters\n2. Optimize technology selection over the entire energy value chain\n3. Determine optimal component sizes\n4. Balance investment and operational costs\n5. Plan local multi-energy systems holistically (e.g. electricity, hydrogen, heat, etc.)\n\n::: {.callout-note}\nRemember: The design problem combines investment planning (sizing) with operational optimization, enabling comprehensive (multi-)energy system design.\n:::\n\n# [Mathematical Formulation of the General Multi-Energy System Framework]{.flow} {.title}\n\n**... extending the stochastic design problem to a general multi-energy system framework**\n\n## Sets\n\n- $\\mathcal{T}$ - Set of time periods indexed by $t \\in \\{1,2,...,|\\mathcal{T}|\\}$\n- $\\mathcal{E}$ - Set of energy carriers/fuels indexed by $e \\in \\{1,2,...,|\\mathcal{E}|\\}$\n- $\\mathcal{E}^D$ - Subset of energy carriers associated with demand constraints\n- $\\mathcal{G}$ - Set of dispatchable technology units indexed by $g \\in \\{1,2,...,|\\mathcal{G}|\\}$\n- $\\mathcal{G}^S$ - Subset of storage technology units\n- $\\mathcal{G}^{UC}$ - Subset of technology units with unit commitment constraints\n- $\\mathcal{G}^{Var}$ - Subset of variable energy technology units (e.g., wind, solar)\n- $\\mathcal{G}^R$ - Subset of technology units with ramping constraints\n- $\\mathcal{E}_g^{In}$ - Mapping set of feedstock fuels to technology $g$\n- $\\mathcal{E}_g^{Out}$ - Mapping set of produced fuels from technology $g$\n- $\\Omega$ - Set of scenarios indexed by $\\omega \\in \\{1,2,...,|\\Omega|\\}$\n\n::: {.callout-note}\nThe general framework uses technology-agnostic sets that can represent any energy conversion technology (electrolyzers, fuel cells, heat pumps, etc.) and any energy carrier (electricity, hydrogen, heat, natural gas, etc.).\n:::\n\n## Decision Variables\n\n### Investment Variables (First Stage)\n- $P_g^{nom}$ - Nominal capacity of technology $g$ [MW or appropriate unit]\n- $SOC_g^{nom}$ - Nominal energy capacity of storage technology $g$ [MWh or appropriate unit]\n\n### Operational Variables (Second Stage)\n- $x_{g,e,t,\\omega}^{in}$ - Amount of feedstock fuel $e$ consumed in technology $g$ at time $t$ in scenario $\\omega$\n- $x_{g,e,t,\\omega}^{out}$ - Amount of produced fuel $e$ from technology $g$ at time $t$ in scenario $\\omega$\n- $x_{g,t,\\omega}^{total}$ - Total activity level of technology $g$ at time $t$ in scenario $\\omega$\n- $f_{e,t,\\omega}^{buy}$ - Flow of fuel $e$ bought at time $t$ in scenario $\\omega$\n- $f_{e,t,\\omega}^{sell}$ - Flow of fuel $e$ sold at time $t$ in scenario $\\omega$\n- $soc_{g,t,\\omega}$ - State of charge of storage technology $g$ at time $t$ in scenario $\\omega$\n\n### Binary Variables (for Unit Commitment)\n- $u_{g,t,\\omega}$ - Binary indicating online/offline status of technology $g$ at time $t$ in scenario $\\omega$\n- $v_{g,t,\\omega}$ - Binary indicating startup of technology $g$ at time $t$ in scenario $\\omega$\n- $o_{g,t,\\omega}$ - Binary indicating charging/discharging status of storage technology $g$ at time $t$ in scenario $\\omega$\n\n### Cost Variables\n- $AC_g^{inv}$ - Annual investment cost for technology $g$ [EUR/year]\n- $c_{g,t,\\omega}^{start}$ - Startup cost of technology $g$ at time $t$ in scenario $\\omega$\n\n## Parameters\n\n### Investment Costs (First Stage)\n- $C_g^{inv}$ - Investment cost per unit capacity for technology $g$ [EUR/MW or appropriate unit]\n- $C_g^{SOC}$ - Investment cost per unit energy capacity for storage technology $g$ [EUR/MWh or appropriate unit]\n- $F^{PVAF}$ - Present value annuity factor for investment costs\n- $B^{max}$ - Maximum investment budget [EUR]\n\n### Operational Parameters (Second Stage)\n- $\\sigma_{g,e}^{in}$ - Percentage of fuel $e$ used as feedstock in technology $g$\n- $\\sigma_{g,e}^{out}$ - Percentage of fuel $e$ produced by technology $g$\n- $\\Theta_g$ - Conversion efficiency ratio of technology $g$ (output/input ratio)\n- $C_g^{var}$ - Variable operating cost of technology $g$ [EUR/unit]\n- $C_g^{start}$ - Startup cost of technology $g$ [EUR]\n- $D_{e,t,\\omega}$ - Demand of energy carrier $e$ at time $t$ in scenario $\\omega$\n- $P_g^{max}$ - Maximum production level of technology $g$\n- $P_g^{min}$ - Minimum production level of technology $g$\n- $\\pi_{e,t,\\omega}^{buy}$ - Price of fuel $e$ bought at time $t$ in scenario $\\omega$\n- $\\pi_{e,t,\\omega}^{sell}$ - Price of fuel $e$ sold at time $t$ in scenario $\\omega$\n- $SOC_g^{init}$ - Initial state of charge of storage technology $g$\n- $SOC_g^{max}$ - Maximum state of charge of storage technology $g$\n- $\\pi_{\\omega}^{prob}$ - Probability of scenario $\\omega$\n\n## Objective Function\n<!-- \n$\\text{Maximize} \\quad \\sum_{\\omega \\in \\Omega} \\pi_{\\omega}^{prob} \\left( \\sum_{e \\in \\mathcal{E}} \\sum_{t \\in \\mathcal{T}} \\pi_{e,t,\\omega}^{sell} f_{e,t,\\omega}^{sell} \\right.$\n\n$\\left. - \\sum_{e \\in \\mathcal{E}} \\sum_{t \\in \\mathcal{T}} \\pi_{e,t,\\omega}^{buy} f_{e,t,\\omega}^{buy} - \\sum_{g \\in \\mathcal{G}} \\sum_{t \\in \\mathcal{T}} C_g^{var} x_{g,t,\\omega}^{total} \\right.$\n\n$\\left. - \\sum_{g \\in \\mathcal{G}^{UC}} \\sum_{t \\in \\mathcal{T}} c_{g,t,\\omega}^{start} \\right) - \\sum_{g \\in \\mathcal{G}} AC_g^{inv}$ -->\n\n**Maximize the following components:**\n\n$\\text{Maximize}$\n\n**Revenue from selling energy carriers:**\n\n$\\sum_{\\omega \\in \\Omega} \\pi_{\\omega}^{prob} \\sum_{e \\in \\mathcal{E}} \\sum_{t \\in \\mathcal{T}} \\pi_{e,t,\\omega}^{sell} f_{e,t,\\omega}^{sell}$\n\n**Costs of buying energy carriers:**\n\n$-\\sum_{\\omega \\in \\Omega} \\pi_{\\omega}^{prob} \\sum_{e \\in \\mathcal{E}} \\sum_{t \\in \\mathcal{T}} \\pi_{e,t,\\omega}^{buy} f_{e,t,\\omega}^{buy}$\n\n**Variable operating costs:**\n\n$-\\sum_{\\omega \\in \\Omega} \\pi_{\\omega}^{prob} \\sum_{g \\in \\mathcal{G}} \\sum_{t \\in \\mathcal{T}} C_g^{var} x_{g,t,\\omega}^{total}$\n\n**Startup costs:**\n\n$-\\sum_{\\omega \\in \\Omega} \\pi_{\\omega}^{prob} \\sum_{g \\in \\mathcal{G}^{UC}} \\sum_{t \\in \\mathcal{T}} c_{g,t,\\omega}^{start}$\n\n**Investment costs:**\n\n$-\\sum_{g \\in \\mathcal{G}} AC_g^{inv}$\n\n::: {.callout-note}\nThe objective maximizes profit: revenue from selling energy carriers minus costs of buying energy carriers, variable operating costs, startup costs, and investment costs.\n:::\n\n## Investment Cost Constraints\n\n$AC_g^{inv} = \\frac{C_g^{inv}}{F^{PVAF}} P_g^{nom} \\quad \\forall g \\in \\mathcal{G} \\setminus \\mathcal{G}^S$\n\n$AC_g^{inv} = \\frac{C_g^{inv}}{F^{PVAF}} P_g^{nom} + \\frac{C_g^{SOC}}{F^{PVAF}} SOC_g^{nom} \\quad \\forall g \\in \\mathcal{G}^S$\n\n### Investment Budget\n$\\sum_{g \\in \\mathcal{G}} AC_g^{inv} \\leq B^{max}$\n\n## Energy Conversion Constraints\n\n### Input-Output Relationships\n$x_{g,e,t,\\omega}^{in} = \\sigma_{g,e}^{in} x_{g,t,\\omega}^{total} \\quad \\forall g \\in \\mathcal{G}, e \\in \\mathcal{E}_g^{In}, t \\in \\mathcal{T}, \\omega \\in \\Omega$\n\n$x_{g,e,t,\\omega}^{out} = \\sigma_{g,e}^{out} \\Theta_g x_{g,t,\\omega}^{total} \\quad \\forall g \\in \\mathcal{G} \\setminus \\mathcal{G}^S, e \\in \\mathcal{E}_g^{Out}, t \\in \\mathcal{T}, \\omega \\in \\Omega$\n\n### Technology Capacity Limits\n$P_g^{min} u_{g,t,\\omega} \\leq x_{g,t,\\omega}^{total} \\leq P_g^{max} u_{g,t,\\omega} \\quad \\forall g \\in \\mathcal{G} \\setminus \\mathcal{G}^S, t \\in \\mathcal{T}, \\omega \\in \\Omega$\n\n### Variable Energy Technologies\n$0 \\leq x_{g,t,\\omega}^{total} \\leq f_{g,t,\\omega} P_g^{nom} \\quad \\forall g \\in \\mathcal{G}^{Var}, t \\in \\mathcal{T}, \\omega \\in \\Omega$\n\nwhere $f_{g,t,\\omega}$ is the capacity factor for variable technology $g$.\n\n## Storage Constraints\n\n### State of Charge Balance\n$soc_{g,t,\\omega} = soc_{g,t-1,\\omega} + \\Theta_g x_{g,t,\\omega}^{total} - \\sum_{e \\in \\mathcal{E}_g^{Out}} \\sigma_{g,e}^{out} x_{g,e,t,\\omega}^{out} \\quad \\forall g \\in \\mathcal{G}^S, t \\in \\mathcal{T}, \\omega \\in \\Omega$\n\n### Storage Capacity Limits\n$0 \\leq soc_{g,t,\\omega} \\leq SOC_g^{max} \\quad \\forall g \\in \\mathcal{G}^S, t \\in \\mathcal{T}, \\omega \\in \\Omega$\n\n### Initial and Final State\n$soc_{g,t=0,\\omega} = soc_{g,t=|\\mathcal{T}|,\\omega} = SOC_g^{init} \\quad \\forall g \\in \\mathcal{G}^S, \\omega \\in \\Omega$\n\n### Charging/Discharging Mutual Exclusion\n$P_g^{min} o_{g,t,\\omega} \\leq x_{g,t,\\omega}^{total} \\leq P_g^{max} o_{g,t,\\omega} \\quad \\forall g \\in \\mathcal{G}^S, t \\in \\mathcal{T}, \\omega \\in \\Omega$\n\n$P_g^{min} (1-o_{g,t,\\omega}) \\leq \\sum_{e \\in \\mathcal{E}_g^{Out}} \\sigma_{g,e}^{out} x_{g,e,t,\\omega}^{out} \\leq P_g^{max} (1-o_{g,t,\\omega}) \\quad \\forall g \\in \\mathcal{G}^S, t \\in \\mathcal{T}, \\omega \\in \\Omega$\n\n## Energy Balance Constraints\n\n### Energy Carrier Balance\n$\\sum_{g \\in \\mathcal{G}} x_{g,e,t,\\omega}^{out} + f_{e,t,\\omega}^{buy} = \\sum_{g \\in \\mathcal{G}} x_{g,e,t,\\omega}^{in} + f_{e,t,\\omega}^{sell} + D_{e,t,\\omega} \\quad \\forall e \\in \\mathcal{E}^D, t \\in \\mathcal{T}, \\omega \\in \\Omega$\n\n## Unit Commitment Constraints (if applicable)\n\n### Startup Variable Definition\n$v_{g,t,\\omega} \\geq u_{g,t,\\omega} - u_{g,t-1,\\omega} \\quad \\forall g \\in \\mathcal{G}^{UC}, t \\in \\mathcal{T}, \\omega \\in \\Omega$\n\n### Startup Cost\n$c_{g,t,\\omega}^{start} \\geq C_g^{start} v_{g,t,\\omega} \\quad \\forall g \\in \\mathcal{G}^{UC}, t \\in \\mathcal{T}, \\omega \\in \\Omega$\n\n::: {.callout-note}\nThis general framework can be specialized to specific applications by:\n\n1. Defining appropriate energy carriers in $\\mathcal{E}$\n2. Specifying technology types in $\\mathcal{G}$\n3. Setting conversion parameters $\\sigma_{g,e}^{in}$, $\\sigma_{g,e}^{out}$, and $\\Theta_g$\n4. Adding application-specific constraints as needed\n:::\n\n\n::: {.loud-slide}\n::: {.r-fit-text}\nQuestions?\n:::\n:::\n\n::: footer\n:::\n\n# [Literature]{.flow} {.title}\n\n## Literature I\n\nFor more interesting literature to learn more about Julia, take a look at the [literature list](../general/literature.qmd) of this course.\n\n## Literature II\n\n\n",
    "supporting": [
      "lecture-framework_files/figure-html"
    ],
    "filters": [],
    "includes": {}
  }
}