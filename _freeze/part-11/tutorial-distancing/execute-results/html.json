{
  "hash": "48f883978be0a64a993e0b20eb642fe9",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Tutorial XI - Arena Seat Planning under Distancing Rules\"\nsubtitle: \"Applied Optimization with Julia\"\n\nformat:\n    html:\n        theme: [litera, ../styles.scss]\n        highlight-style: arrow\n        linkcolor: \"#a60000\"\n        code-copy: true\n        code-link: true\n        toc: true\n        toc-location: right\n        code-overflow: wrap\n    ipynb:\n        code-copy: true\n        code-overflow: wrap\n---\n\n\n\n\n\n\n# Introduction\n\nImagine you're tasked with optimizing seating arrangements for a major event venue during a pandemic. You need to balance safety with efficiency, ensuring groups can enjoy the event while maintaining proper distancing.\n\nYour challenge is to:\n\n1. Place different-sized groups strategically\n2. Maintain safe distances between all attendees\n3. Maximize either revenue or total attendance\n4. Work around venue constraints and blocked seats\n\n## The Venue Layout\nHere's our event venue's seating arrangement, as we have used in the lecture:\n\n![Each white square represents an available seat, while grey squares are blocked](https://images.byndsim.com/ao/ao_arena-empty_exercise.svg)\n\n## Group Types and Their Characteristics\n\nWe have different types of groups wanting to attend the event:\n\n- Singles (Type 'a'): Solo attendees\n- Couples (Types 'b' and 'c'): Two people travelling together\n- Small families (Types 'd' and 'e'): Groups of four\n- Large families (Types 'f' and 'g'): Groups of six\n\nEach group type has:\n\n- A different ticket value (score)\n- Limited availability (how many such groups want tickets)\n- Space requirements (how many consecutive seats they need)\n\nAs we approach the end of the course, we'll remove some previous \"guardrails\" to give you more freedom in solving the problem.\n\n:::{.callout-tip}\n\nDon't worry, if you cannot solve everything by yourself. Try your best and ask for help if you need it!\n\n:::\n\n# 1. Implement the Model\n\nFirst, define all necessary sets, parameters, and variables to model the problem in Julia. The seating area layout is shown below:\n\n![](https://images.byndsim.com/ao/ao_arena-empty_exercise.svg)\n\n## Distance Requirements\n\nThe following distancing rules must be maintained:\n\n- Minimum one empty seat between groups\n- One empty seat between rows\n- One empty seat diagonally\n- Maximum two groups per row\n- Grey seats are obstacles and cannot be used\n\n:::{.callout-important}\n## Common Pitfalls\nWatch out for the edge cases when implementing distancing constraints - especially around blocked seats!\n:::\n\n## Define the Model\n\n::: {.callout-note}\nThe groups are given **differently than in the lecture**! Either adjust the data or the model, depending on what you think is easier.\n:::\n\n::: {.content-visible when-profile=\"solutions\"}\n\n::: {#b5595a94 .cell execution_count=1}\n``` {.julia .cell-code}\nusing JuMP\nusing HiGHS\n\n# Model\narena_model = Model(HiGHS.Optimizer)\n\n# Sets\nrow_set = 1:10\ncol_set = 1:10\n\n# Group data\ngroups = [\n    \"a\",\n    \"b\",\n    \"c\",\n    \"d\",\n    \"e\",\n    \"f\",\n    \"g\"]\nreq_seats = Dict(\n    \"a\" => 1,\n    \"b\" => 2,\n    \"c\" => 2,\n    \"d\" => 4,\n    \"e\" => 4,\n    \"f\" => 6,\n    \"g\" => 6)\nscores = Dict(\n    \"a\" => 1,\n    \"b\" => 2,\n    \"c\" => 4,\n    \"d\" => 4,\n    \"e\" => 5,\n    \"f\" => 6,\n    \"g\" => 12)\navailability = Dict(\n    \"a\" => 3,\n    \"b\" => 2,\n    \"c\" => 3,\n    \"d\" => 5,\n    \"e\" => 2,\n    \"f\" => 1,\n    \"g\" => 1)\n\n# Blocked seats (coordinates [row, column])\nblocked_seats = [\n    (1, 1),(1, 2),(1,9),(1,10),\n    (2, 1),(2, 10),\n    (6, 5),(6,6),\n    (7, 5),(7,6),\n]\n\n# Variables\n@variable(arena_model, x[groups, row_set, col_set], Bin)\n\n# Parameters\nh = 1  # horizontal safety distance\nb = 1  # vertical safety distance\np = 2  # max groups per row\n\n# Objective\n@objective(arena_model, Max, sum(scores[g] * x[g,r,c] for g in groups, r in row_set, c in col_set if c<=maximum(col_set)-req_seats[g]+1))\n\n# Constraints\n# Each group can only be assigned once\n@constraint(arena_model, [g in groups],\n    sum(x[g,r,c] for r in row_set, c in col_set) <= availability[g])\n\n# Maximum groups per row\n@constraint(arena_model, [r in row_set],\n    sum(x[g,r,c] for g in groups, c in col_set) <= p)\n\n# Horizontal and vertical social distancing\n@constraint(arena_model, [r in row_set, c in col_set],\n    sum(x[g,rr,cc] for g in groups,\n        rr in max(1,r-b):r,\n        cc in max(1,c-req_seats[g]+1-h):c) <= 1)\n\n# Constraints to prevent assignments to blocked seats\n@constraint(arena_model, [g in groups, (r,c) in blocked_seats],\n    sum(x[g,r,cc] for cc in max(1,c-req_seats[g]+1):c) == 0)\n\n# Solve the model\noptimize!(arena_model)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRunning HiGHS 1.9.0 (git hash: 66f735e60): Copyright (c) 2024 HiGHS under MIT licence terms\nCoefficient ranges:\n  Matrix [1e+00, 1e+00]\n  Cost   [1e+00, 1e+01]\n  Bound  [1e+00, 1e+00]\n  RHS    [1e+00, 5e+00]\nPresolving model\n112 rows, 422 cols, 3861 nonzeros  0s\n91 rows, 326 cols, 2644 nonzeros  0s\nObjective function is integral with scale 1\n\nSolving MIP model with:\n   91 rows\n   326 cols (326 binary, 0 integer, 0 implied int., 0 continuous)\n   2644 nonzeros\n\nSrc: B => Branching; C => Central rounding; F => Feasibility pump; H => Heuristic; L => Sub-MIP;\n     P => Empty MIP; R => Randomized rounding; S => Solve LP; T => Evaluate node; U => Unbounded;\n     z => Trivial zero; l => Trivial lower; u => Trivial upper; p => Trivial point\n\n        Nodes      |    B&B Tree     |            Objective Bounds              |  Dynamic Constraints |       Work      \nSrc  Proc. InQueue |  Leaves   Expl. | BestBound       BestSol              Gap |   Cuts   InLp Confl. | LpIters     Time\n\n z       0       0         0   0.00%   inf             -0                 Large        0    -91      0         0     0.0s\n R       0       0         0   0.00%   52.90909091     1               5190.91%        0      0      0       252     0.0s\n S       0       0         0   0.00%   52.90909091     43                23.04%       56      2      0       253     0.0s\n L       0       0         0   0.00%   52              52                 0.00%      839     15      3       587     0.1s\n         1       0         1 100.00%   52              52                 0.00%      839     15      3       622     0.1s\n\nSolving report\n  Status            Optimal\n  Primal bound      52\n  Dual bound        52\n  Gap               0% (tolerance: 0.01%)\n  P-D integral      0.451995187079\n  Solution status   feasible\n                    52 (objective)\n                    0 (bound viol.)\n                    0 (int. viol.)\n                    0 (row viol.)\n  Timing            0.09 (total)\n                    0.00 (presolve)\n                    0.00 (solve)\n                    0.00 (postsolve)\n  Max sub-MIP depth 1\n  Nodes             1\n  Repair LPs        0 (0 feasible; 0 iterations)\n  LP iterations     622 (total)\n                    0 (strong br.)\n                    335 (separation)\n                    35 (heuristics)\n```\n:::\n:::\n\n\n:::\n\n::: {.content-visible unless-profile=\"solutions\"}\n\n::: {#1870ac48 .cell execution_count=2}\n``` {.julia .cell-code}\nusing JuMP\nusing HiGHS\n\n# Model\narena_model = Model(HiGHS.Optimizer)\n\n# Sets\nrow_set = 1:10\ncol_set = 1:10\n\n# Group data\ngroups = [\n    \"a\",\n    \"b\",\n    \"c\",\n    \"d\",\n    \"e\",\n    \"f\",\n    \"g\"]\nreq_seats = Dict(\n    \"a\" => 1,\n    \"b\" => 2,\n    \"c\" => 2,\n    \"d\" => 4,\n    \"e\" => 4,\n    \"f\" => 6,\n    \"g\" => 6)\nscores = Dict(\n    \"a\" => 1,\n    \"b\" => 2,\n    \"c\" => 4,\n    \"d\" => 4,\n    \"e\" => 5,\n    \"f\" => 6,\n    \"g\" => 12)\navailability = Dict(\n    \"a\" => 3,\n    \"b\" => 2,\n    \"c\" => 3,\n    \"d\" => 5,\n    \"e\" => 2,\n    \"f\" => 1,\n    \"g\" => 1)\n\n# Blocked seats (coordinates [row, column])\nblocked_seats = [\n    (1, 1),(1, 2),(1,9),(1,10),\n    (2, 1),(2, 10),\n    (6, 5),(6,6),\n    (7, 5),(7,6),\n]\n\n# Variables\n@variable(arena_model, x[groups, row_set, col_set], Bin)\n\n# YOUR CODE BELOW\n\n# Suggested structure:\n# 1. Create parameters\n# 2. Set objective function\n# 3. Add constraints\n# 4. Solve the model\n```\n:::\n\n\n:::\n\n## Visualization\n\nTo test your solution, visualize it with a plot in Julia. The visualization is a great tool to [check if your solution is correct]{.highlight}. We figure it is likely, that you **won't have an applicable solution** after the first round, even if your model is working correctly. [If everything works from the start, great!]{.highlight}\n\n::: {#f5495f3b .cell execution_count=3}\n``` {.julia .cell-code}\nusing Plots\n\n# Create visualization of the solution\nfunction visualize_seating(model)\n    # Get solution values\n    solution_matrix = fill(\"\", 10, 10)\n\n    # Fill matrix with group assignments\n    for r in 1:10, c in 1:10\n        for g in groups\n            if value(model[:x][g,r,c]) > 0.5  # Using 0.5 to handle floating point\n                solution_matrix[r,c] = g\n            end\n        end\n    end\n\n    # Create color mapping for groups\n    color_map = Dict(\n        \"\" => :white,  # Empty seats\n        \"a\" => :blue,\n        \"b\" => :green,\n        \"c\" => :red,\n        \"d\" => :purple,\n        \"e\" => :orange,\n        \"f\" => :yellow,\n        \"g\" => :pink\n    )\n\n    # Mark blocked seats\n    for (r,c) in blocked_seats\n        solution_matrix[r,c] = \"\"  # Empty string for blocked seats\n    end\n\n    # Create plot\n    p = plot(\n        aspect_ratio=:equal,\n        xlims=(0.5,10.5),\n        ylims=(0.5,10.5),\n        yflip=true,  # Flip y-axis to match traditional seating layout\n        legend=:outerright\n    )\n\n    # Plot seats\n    for r in 1:10, c in 1:10\n        group = solution_matrix[r,c]\n        if group != \"\"\n            group_length = req_seats[group]\n            for i in 1:group_length\n                if c+i-1 <= 10\n                    println(\"Group $group in $r,$(c+i-1)\")\n                    scatter!([c+i-1], [r],\n                            color=color_map[group],\n                            label=nothing,\n                            markersize=10,\n                            markershape=:square)\n                end\n            end\n        else\n            # Plot empty or blocked seats\n            is_blocked = (r,c) in blocked_seats\n            if is_blocked\n                println(\"Blocked seat in $r,$c\")\n                scatter!([c], [r],\n                        color=is_blocked ? :gray : :white,\n                        markersize=10,\n                        markershape=:square,\n                        label= nothing)\n            end\n        end\n    end\n\n    title!(\"Arena Seating Layout\")\n    xlabel!(\"Column\")\n    ylabel!(\"Row\")\n\n    return p\nend\n\n# Display the visualization\np = visualize_seating(arena_model)\ndisplay(p)\n```\n:::\n\n\nIf you encounter any difficulties ad cannot solve the problem, please document your issues here:\n\n::: {#774bcadd .cell execution_count=4}\n``` {.julia .cell-code}\n#=\n\n\n\n=#\n```\n:::\n\n\n# 2. Maximize the number of seats in use\n\nNow let's explore a different optimization objective! Instead of focusing on revenue, imagine you're trying to accommodate as many people as possible at your venue - perhaps for a community event where maximizing attendance is more important than maximizing profit.\n\n:::{.callout-tip}\nThink about how this changes your objective function. What matters now is not the score per group, but how many seats each group occupies!\n:::\n\nTry implementing this new objective while keeping all the safety constraints in place.\n\n::: {#2932ca5d .cell execution_count=5}\n``` {.julia .cell-code}\n# YOUR CODE BELOW\n```\n:::\n\n\nCheck if your solution is correct by visualizing it with the `visualize_seating` function below.\n\n\nHow many seats more are in use when compared to the previous solution? Write a short code that calculates and prints the difference.\n\n::: {#795c44c7 .cell execution_count=7}\n``` {.julia .cell-code}\n# YOUR CODE BELOW\n```\n:::\n\n\n---\n\n\n# Solutions\n\nYou will likely find solutions to most exercises online. However, I strongly encourage you to work on these exercises independently without searching explicitly for the exact answers to the exercises. Understanding someone else's solution is very different from developing your own. Use the lecture notes and try to solve the exercises on your own. This approach will significantly enhance your learning and problem-solving skills.\n\nRemember, the goal is not just to complete the exercises, but to understand the concepts and improve your programming abilities. If you encounter difficulties, review the lecture materials, experiment with different approaches, and don't hesitate to ask for clarification during class discussions.\n\nLater, you will find the solutions to these exercises online in the associated GitHub repository, but we will also quickly go over them in next week's tutorial. To access the solutions, click on the Github button on the lower right and search for the folder with today's lecture and tutorial. Alternatively, you can ask ChatGPT or Claude to explain them to you. But please remember, the goal is not just to complete the exercises, but to understand the concepts and improve your programming abilities.\n\n",
    "supporting": [
      "tutorial-distancing_files"
    ],
    "filters": [],
    "includes": {}
  }
}