{
  "hash": "186def2e53a49dcaa290f69127f9066b",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Lecture X - Intermission: Exam Preparation\"\nsubtitle: \"Energy System Optimization with Julia\"\nauthor: \"Dr. Tobias Cors\"\ninstitute: \"Hamburg University of Applied Sciences - Summer 2025\"\ntitle-slide-attributes:\n    data-background-color: \"#025259\"\nhtml-math-method:\n  method: mathjax\n  url: \"https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js\"\n\nformat:\n    revealjs:\n        theme: [default, ../styles.scss]\n        transition: slide\n        transition-speed: fast\n        highlight-style: arrow\n        slide-number: true\n        code-copy: true\n        code-link: true\n        preview-links: auto\n        footer: \" {{< meta title >}} | {{< meta author >}} | [Home](lecture-intermission.qmd)\"\n        output-file: lecture-presentation.html\n    html:\n        theme: [litera, ../styles.scss]\n    pdf: \n        documentclass: report\n        geometry:\n            - margin=1in\n        fontfamily: roboto\n        fontfamilyoptions: sfdefault\n        colorlinks: true\n\nbibliography: ../ESO-bib.bib\n\nexecute:\n    eval: false\n\n---\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# [Intermission]{.flow} {.title}\n\n## Today's lecture\n\n- Today's lecture is a **little bit different**\n- Manage your expectations\n- Give you a **better idea** of what to expect from the exam\n- We will go through **some examples together!**\n\n## Energy System Optimization Exam\n\n- **Duration**: 90 minutes\n- **Total Points**: 60 points\n- **Structure**: Three parts (Modeling, Theory, Programming)\n- **Allowed**: One handwritten DIN A4 sheet\n\n. . .\n\n::: {.callout-important}\nYou can take a **handwritten** DIN A4 sheet of paper with you!\n\nEach point corresponds to approximately 1.5 minutes of work!\n:::\n\n## Exam Structure\n\n- **Part I**: Energy System Modeling (30 points)\n- **Part II**: Theory and Concepts (15 points)  \n- **Part III**: Julia Programming (15 points)\n\n## Exam Preparation Checklist\n\n::: {.callout-tip}\n## Before starting the exam:\n\n- [ ] Review modeling notation conventions\n- [ ] Practice writing sets, parameters, and variables\n- [ ] Review common constraint patterns\n- [ ] Practice Julia syntax\n- [ ] Prepare your DIN A4 cheat sheet\n:::\n\n# [Part I]{.flow} {.title}\n\n## Energy System Modeling\n\n## 1.a (8 Points) {.scrollable}\n\nA power system operator needs to optimize the economic dispatch of thermal generators to meet electricity demand. The system consists of:\n\n- Multiple thermal generators with different variable costs\n- Wind turbines with forecasted power output\n- A single aggregated demand that must be met\n\nEach generator has minimum and maximum power output limits. The wind turbines have zero variable cost but their output is limited by the forecast.\n\nDefine all sets, parameters, and variables required to model this Economic Dispatch problem. Use clear notation and explicitly state which elements are sets, parameters, and variables.\n\n::: {.content-visible when-profile=\"solutions\"}\n\n**Solution**\n\n**Sets:**\n- $g \\in \\mathcal{G}$ : Set of thermal generators\n- $w \\in \\mathcal{W}$ : Set of wind turbines\n\n**Parameters:**\n- $c^{var}_g$ : Variable cost of generator $g$ [€/MWh]\n- $p^{\\min}_g$ : Minimum power output of generator $g$ [MW]\n- $p^{\\max}_g$ : Maximum power output of generator $g$ [MW]\n- $p^f_w$ : Forecasted power output of wind turbine $w$ [MW]\n- $d^f$ : Forecasted demand [MW]\n\n**Variables:**\n- $p_g$ : Power output of thermal generator $g$ [MW]\n- $p_w$ : Power output of wind turbine $w$ [MW]\n\n\\newpage\n:::\n\n::: {.content-visible unless-profile=\"solutions\"}\n\\vspace{0.1in}\n\n\n\n\\newpage\n:::\n\n## 1.b (4 Points) {.scrollable}\n\nBased on your notation from 1.a, write the objective function for the Economic Dispatch problem.\n\n::: {.content-visible when-profile=\"solutions\"}\n\n**Solution**\n\n$$\n\\text{min} \\quad \\sum_{g \\in \\mathcal{G}} c^{var}_g p_g\n$$\n\nNote: Wind turbines have zero variable cost, so they don't appear in the objective function.\n\n\\newpage\n:::\n\n::: {.content-visible unless-profile=\"solutions\"}\n\\vspace{0.1in}\n\n\n\n\\newpage\n:::\n\n## 1.c (6 Points) {.scrollable}\n\nWrite all necessary constraints for the Economic Dispatch problem using your notation from 1.a.\n\n::: {.content-visible when-profile=\"solutions\"}\n\n**Solution**\n\n**Power Balance:**\n$$\n\\sum_{g \\in \\mathcal{G}} p_g + \\sum_{w \\in \\mathcal{W}} p_w = d^f\n$$\n\n**Generator Limits:**\n$$\np^{\\min}_g \\leq p_g \\leq p^{\\max}_g \\quad \\forall g \\in \\mathcal{G}\n$$\n\n**Wind Limits:**\n$$\n0 \\leq p_w \\leq p^f_w \\quad \\forall w \\in \\mathcal{W}\n$$\n\n\\newpage\n:::\n\n::: {.content-visible unless-profile=\"solutions\"}\n\\vspace{0.1in}\n\n\n\n\\newpage\n:::\n\n## 1.d (6 Points) {.scrollable}\n\nNow extend the Economic Dispatch model to include Unit Commitment decisions. The generators can be turned on/off and have additional start-up costs.\n\nDefine the additional sets, parameters, and variables needed for the Unit Commitment problem.\n\n::: {.content-visible when-profile=\"solutions\"}\n\n**Solution**\n\n**Additional Sets:**\n- $t \\in \\mathcal{T}$ : Set of time periods\n\n**Additional Parameters:**\n- $c^{start}_g$ : Start-up cost of generator $g$ [€]\n\n**Additional Variables:**\n- $u_{g,t}$ : Binary variable indicating if generator $g$ is on at time $t$\n- $v_{g,t}$ : Binary variable indicating if generator $g$ starts up at time $t$\n\n\\newpage\n:::\n\n::: {.content-visible unless-profile=\"solutions\"}\n\\vspace{0.1in}\n\n\n\n\\newpage\n:::\n\n## 1.e (6 Points) {.scrollable}\n\nWrite the objective function and start-up variable definition for the Unit Commitment problem using your notation from 1.d. In addition, consider that generator 1 and 2 use the same grid connection which is currently limited so that they cannot be on at the same time. Due to personnel reasons the startup of generator 3 has to be at least 3 timesteps away from startup of generator 4.\n\n::: {.content-visible when-profile=\"solutions\"}\n\n**Solution**\n\n**Objective Function:**\n$$\n\\text{min} \\quad \\sum_{t \\in \\mathcal{T}} \\left( \\sum_{g \\in \\mathcal{G}} (c^{var}_g p_{g,t} + c^{start}_g v_{g,t}) \\right)\n$$\n\n**Start-up Variable Definition:**\n$$\nv_{g,t} \\geq u_{g,t} - u_{g,t-1} \\quad \\forall g \\in \\mathcal{G}, t \\in \\mathcal{T}\n$$\n\n**Grid Connection Limits:**\n$$\nu_{1,t} + u_{2,t} \\leq 1 \\quad \\forall t \\in \\mathcal{T}\n$$\n\n**Startup of Generator 3 has to be at least 3 timesteps away from startup of generator 4:**\n$$\n\\sum_{\\tau \\in [t, \\min(t+3,|\\mathcal{T}|)]} v_{3,\\tau} \\leq (1 -v_{4,t}) M \\quad \\forall t \\in \\mathcal{T} \\quad \\text{with} \\quad M = |\\mathcal{T}|\n\n\\sum_{\\tau \\in [t-1, \\max(t-3,1)]} v_{3,\\tau} \\leq (1 -v_{4,t}) M \\quad \\forall t \\in \\mathcal{T} \\quad \\text{with} \\quad M = |\\mathcal{T}|\n$$\n\n\\newpage\n:::\n\n::: {.content-visible unless-profile=\"solutions\"}\n\\vspace{0.1in}\n\n\n\n\\newpage\n:::\n\n# [Part II]{.flow} {.title}\n\n## Theory and Concepts\n\n## 2.a (3 Points) {.scrollable}\n\nWhat is the main difference between Economic Dispatch and Unit Commitment problems? Explain in 2-3 sentences.\n\n::: {.content-visible when-profile=\"solutions\"}\n\n**Solution**\n\nEconomic Dispatch optimizes power generation for a single time step assuming all generators are already committed to operation, focusing only on power output levels. Unit Commitment extends this by adding binary decisions for generator on/off status, considering multiple time periods, and including operational constraints such as start-up costs, minimum up/down times, and ramp rate limits. This makes Unit Commitment more realistic but computationally more complex.\n\n\\newpage\n:::\n\n::: {.content-visible unless-profile=\"solutions\"}\n\\vspace{0.1in}\n\n\n\n\\newpage\n:::\n\n## 2.b (3 Points) {.scrollable}\n\nExplain what a \"tight formulation\" means in the context of Mixed-Integer Linear Programming (MILP) problems like Unit Commitment.\n\n::: {.content-visible when-profile=\"solutions\"}\n\n**Solution**\n\nA tight formulation in MILP has a small gap between the optimal solution of the linear programming (LP) relaxation and the integer solution. This is important because it helps solvers find optimal solutions faster, provides better lower bounds for branch-and-bound algorithms, and reduces the search space for integer solutions. For example, including both minimum and maximum power constraints for generators creates a tighter formulation than only including maximum constraints.\n\n\\newpage\n:::\n\n::: {.content-visible unless-profile=\"solutions\"}\n\\vspace{0.1in}\n\n\n\n\\newpage\n:::\n\n## 2.c (3 Points) {.scrollable}\n\nWhat is the purpose of storage systems in energy system optimization? Name three key constraints that are typically included in storage modeling.\n\n::: {.content-visible when-profile=\"solutions\"}\n\n**Solution**\n\nStorage systems in energy system optimization serve to balance supply and demand over time, store excess renewable energy, and provide flexibility to the power system. Three key constraints typically included in storage modeling are:\n\n1. **Energy balance constraint**: Links energy levels between consecutive time periods considering charging/discharging efficiency and self-discharge\n2. **Energy capacity limits**: Ensures storage energy level stays within minimum and maximum bounds\n3. **Power limits and mutual exclusion**: Prevents simultaneous charging and discharging while respecting maximum charging/discharging power rates\n\n\\newpage\n:::\n\n::: {.content-visible unless-profile=\"solutions\"}\n\\vspace{0.1in}\n\n\n\n\\newpage\n:::\n\n## 2.d (3 Points) {.scrollable}\n\nExplain the concept of \"two-stage stochastic programming\" in the context of energy system design problems.\n\n::: {.content-visible when-profile=\"solutions\"}\n\n**Solution**\n\nTwo-stage stochastic programming in energy system design separates decisions into two stages: first-stage (here-and-now) decisions made before uncertainty is revealed (e.g., investment in generation capacity, storage size), and second-stage (wait-and-see) decisions made after uncertainty is revealed (e.g., operational decisions like power dispatch, storage operation). This approach allows for robust investment decisions by considering multiple scenarios of renewable generation, demand patterns, and price variations, leading to more resilient energy system designs.\n\n\\newpage\n:::\n\n::: {.content-visible unless-profile=\"solutions\"}\n\\vspace{0.1in}\n\n\n\n\\newpage\n:::\n\n## 2.e (3 Points) {.scrollable}\n\nWhat are the main advantages of using Julia and JuMP for energy system optimization compared to other programming languages and modeling frameworks?\n\n::: {.content-visible when-profile=\"solutions\"}\n\n**Solution**\n\nJulia and JuMP offer several advantages for energy system optimization: high performance comparable to compiled languages while maintaining ease of use, seamless integration with multiple solvers (HiGHS, Gurobi, etc.), excellent support for mathematical notation that closely resembles mathematical formulations, efficient handling of large-scale optimization problems, and strong ecosystem for data analysis and visualization. Additionally, JuMP's syntax is intuitive for expressing mathematical models, making it easier to translate theoretical formulations into working code.\n\n\\newpage\n:::\n\n::: {.content-visible unless-profile=\"solutions\"}\n\\vspace{0.1in}\n\n\n\n\\newpage\n:::\n\n# [Part III]{.flow} {.title}\n\n## Julia Programming\n\n## Hints\n\n::: {.callout-note}\n## Programming Tips\n\n- Pay attention to variable names and consistency\n- Check for proper package imports\n- Verify array indexing\n- Remember to use the correct comparison operators\n- Make sure to use proper JuMP syntax\n:::\n\n\\newpage\n\n## 3.a (8 Points) {.scrollable}\n\nThe following Julia code contains four errors related to implementing an Economic Dispatch model. Identify and briefly describe each error.\n\n```julia\n# Load the necessary packages\nusing JuMP\nusing HiGHS\n\n# Define the size of the problem instance\nnrGenerators = length(generatorCosts)\nnrWindTurbines = length(windForecast)\n\n# Create model instance\ndispatch = Model(HiGHS.Optimizer)\n\n# Define variables\n@variable(dispatch_model, p_g[g = 1:nrGenerators] >= 0)\n@variable(dispatch_model, p_w[w = 1:nrWindTurbines] >= 0)\n\n# Define objective\n@objective(dispatch_model, Max, \n    sum(generatorCosts[g] * p_g[g] for g in 1:nrGenerators)\n    )\n\n# Define the constraints\n@constraint(dispatch_model, \n    power_balance, \n    sum(p_g[g] for g in 1:nrGenerators) + sum(p_w[w] for w in 1:nrWindTurbines) === demand\n    )\n\n@constraint(dispatch_model,\n    generator_limits[g=1:nrGenerators], \n    p_g[g] <= maxPower[g]\n    )\n\n@constraint(dispatch_model,\n    wind_limits[w=1:nrWindTurbines], \n    p_w[w] <= windForecast[w]\n    )\n\n# Start optimization\nsolve_model(dispatch_model)\n```\n\n::: {.content-visible when-profile=\"solutions\"}\n\n**Solution**\n\n1. Model is called 'dispatch' but referenced as 'dispatch_model'\n2. Objective should minimize costs, not maximize\n3. Power balance constraint uses '===' instead of '=='\n4. 'solve_model' should be 'optimize!'\n\n\n\n\\newpage\n:::\n\n::: {.content-visible unless-profile=\"solutions\"}\n\\vspace{0.1in}\n\n\n\n\\newpage\n:::\n\n## 3.b (4 Points) {.scrollable}\n\nWrite the Julia code to define a binary variable for generator commitment status in a Unit Commitment model. The variable should indicate whether generator g is on at time t.\n\n::: {.content-visible when-profile=\"solutions\"}\n\n**Solution**\n\n```julia\n@variable(model, u[g=1:nrGenerators, t=1:nrTimePeriods], Bin)\n```\n\n\\newpage\n:::\n\n::: {.content-visible unless-profile=\"solutions\"}\n\\vspace{0.1in}\n\n\n\n\\newpage\n:::\n\n## 3.c (3 Points) {.scrollable}\n\nWrite the Julia constraint that links generator power output to its commitment status, ensuring that if a generator is off (u[g,t] = 0), its power output must be zero.\n\n::: {.content-visible when-profile=\"solutions\"}\n\n**Solution**\n\n```julia\n@constraint(model, generator_limits[g=1:nrGenerators, t=1:nrTimePeriods], \n    p_min[g] * u[g,t] <= p[g,t] <= p_max[g] * u[g,t])\n```\n\n\\newpage\n:::\n\n::: {.content-visible unless-profile=\"solutions\"}\n\\vspace{0.1in}\n\n\n\n\\newpage\n:::\n\n# [Wrap Up]{.flow} {.title}\n\n## Key Takeaways\n\n::: {.callout-important}\n## Remember\n\n- Time management is crucial (1.5 minutes per point)\n- Read questions carefully\n- Show your mathematical work clearly\n- Use your cheat sheet strategically\n- Double-check your Julia syntax\n:::\n\n## The end\n\n::: {.callout-note}\n## Good luck with your exam!\n\nThis test exam covers the main concepts from the Energy System Optimization course. Make sure to review the course materials and practice implementing the models in Julia.\n:::\n\n## {.loud-slide}\n::: {.r-fit-text}\nQuestions?\n:::\n\n::: footer\n:::\n\n# [Literature]{.flow} {.title}\n\n## Literature\n\nFor more information about energy system optimization and Julia programming, refer to the course materials and the literature list in the general section of this course. \n\n",
    "supporting": [
      "lecture-intermission_files/figure-revealjs"
    ],
    "filters": [],
    "includes": {}
  }
}