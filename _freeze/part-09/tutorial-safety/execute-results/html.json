{
  "hash": "083ecc0872eedcd0c486fe164521ad6c",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Tutorial IX - Safety Planning for the Islamic Pilgrimage in Mecca\"\nsubtitle: \"Applied Optimization with Julia\"\n\nformat:\n    html:\n        theme: litera\n        highlight-style: arrow\n        linkcolor: \"#a60000\"\n        code-copy: true\n        code-link: true\n        toc: true\n        toc-location: right\n        code-overflow: wrap\n    ipynb:\n        code-copy: true\n        code-overflow: wrap\n\n---\n\n\n\n\n\n\n# Introduction\n\nThe Hajj, one of the world's largest religious gatherings, presents fascinating and very important optimization challenges. During this annual pilgrimage to Mecca, millions of Muslims perform sacred rituals, including the symbolic stoning of the devil. Your task is to create an efficient scheduling system that ensures both safety and spiritual fulfillment for all pilgrims.\n\n## The challenge\n\nYou're responsible for scheduling 15 pilgrim groups $\\mathcal{S} \\in \\{g1,g2,...,g15\\}$ across 6 time periods $\\mathcal{T} \\in \\{t1,t2,...,t6\\}$ for the Jamarat ritual.\n\nThe groups $\\mathcal{S}$ reside in two different camps $\\mathcal{C} \\in \\{A,B\\}$. The first 6 groups are in camp A while the other groups are in camp B. Each camp has only one path $\\mathcal{P} \\in \\{A-S-A,B-S-B\\}$ and both paths have only one resource $\\mathcal{R}$, the stoning of the devil.\n\nThe capacity of the stoning is 10,000 pilgrims per period and there is no period offset between the stoning and the capacity utilization. Each group can stone the devil in any period $t$. \n\nTo constrain the fluctuation of the resource utilization $\\sigma$ was set to 0.3 while the first period is not constrained. Consider that the number of pilgrims per group $s$ and the penalty value $f_{s,t}$ are given.\n\n# 1. Problem Identification\n\nYou'll need to create an optimization model that:\n\n1. Keeps everyone safe by respecting capacity limits\n2. Maintains steady flow between periods\n3. Maximizes pilgrim satisfaction by considering their time preferences\n\n::: {.callout-attention}\n\nThe model can be simplified when compared to the full model from the lecture in several ways!\n:::\n\nPlease illustrate possible simplifications in a few sentences in the cell below and document the key sets, parameters, and decision variables needed and which elements we can eliminate and why.\n\n::: {.callout-tip}\n\nTo solve this task, it can be helpful to work with paper and pen to sketch the problem, and get a better understanding.\n:::\n\n::: {#39047031 .cell execution_count=1}\n``` {.julia .cell-code}\n#=\n\n\n\n=#\n```\n:::\n\n\n# 2. Implementing the Model\n\nNow, implement and solve the problem defined in the previous task. This time, a draft is not available and you have to implement everything yourself. Note, that the number of pilgrims per group $s$ and the penalty value $f_{s,t}$ are provided as CSV files. You can find them in the `data` folder of this lectures folder in the Github repository.\n\n## Load the Data\n\nStart by loading the data into the notebook for the number of pilgrims per group and the penalty value per group per period.\n\n::: {#7d802040 .cell execution_count=2}\n``` {.julia .cell-code}\n# YOUR CODE BELOW\n```\n:::\n\n\n## Define all Sets, Parameters and Variables\n\nPlease define all sets, parameters and variables you are going to use in the following cell. Make sure to read the task above carefully, as the problem can be modelled much simpler than the full model from the lecture, due to certain properties of the problem.\n\n::: {#6e215ccb .cell execution_count=3}\n``` {.julia .cell-code}\n# YOUR CODE BELOW\n\n```\n:::\n\n\n## Define the Model\n\nDefine the objective function and all constraints of the model in the following cell.\n\n::: {#7981359f .cell execution_count=4}\n``` {.julia .cell-code}\n# YOUR CODE BELOW\n\n```\n:::\n\n\n## Solve the Model\n\nSolve the model and print the results. What is the total dissatisfaction with the resulting timetable?\n\n::: {#6054f556 .cell execution_count=5}\n``` {.julia .cell-code}\n# YOUR CODE BELOW\n```\n:::\n\n\n::: {.callout-tip}\n\nIf you end up with an objective value of approximately 7, you have likely found the optimal solution to the problem.\n:::\n\n## Analyze the Results\n\nPlot the utilization of the resource by using the `Plots` package.\n\n::: {#470e0ee3 .cell execution_count=6}\n``` {.julia .cell-code}\n# YOUR CODE BELOW\n```\n:::\n\n\nFinally, reflect in a few sentences on the simplifications you made to the model and how they affected the solution. \n\n::: {#e68d8902 .cell execution_count=7}\n``` {.julia .cell-code}\n#=\n\n\n\n=#\n```\n:::\n\n\n---\n\n\n# Solutions\n\nYou will likely find solutions to most exercises online. However, I strongly encourage you to work on these exercises independently without searching explicitly for the exact answers to the exercises. Understanding someone else's solution is very different from developing your own. Use the lecture notes and try to solve the exercises on your own. This approach will significantly enhance your learning and problem-solving skills.\n\nRemember, the goal is not just to complete the exercises, but to understand the concepts and improve your programming abilities. If you encounter difficulties, review the lecture materials, experiment with different approaches, and don't hesitate to ask for clarification during class discussions.\n\nLater, you will find the solutions to these exercises online in the associated GitHub repository, but we will also quickly go over them in next week's tutorial. To access the solutions, click on the Github button on the lower right and search for the folder with today's lecture and tutorial. Alternatively, you can ask ChatGPT or Claude to explain them to you. But please remember, the goal is not just to complete the exercises, but to understand the concepts and improve your programming abilities.\n\n",
    "supporting": [
      "tutorial-safety_files"
    ],
    "filters": [],
    "includes": {}
  }
}