{
  "hash": "450ed71a366cc26191f514d2f2304e7e",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Tutorial XII - Passenger Flow Control in Urban Rail\"\nsubtitle: \"Applied Optimization with Julia\"\n\nformat:\n    html:\n        theme: [litera, ../styles.scss]\n        highlight-style: arrow\n        linkcolor: \"#a60000\"\n        code-copy: true\n        code-link: true\n        toc: true\n        toc-location: right\n        code-overflow: wrap\n    ipynb:\n        code-copy: true\n        code-overflow: wrap\n\n---\n\n\n\n\n\n\n# Introduction\n\n![](https://images.beyondsimulations.com/ao/ao_metro-metro_tutorial.svg)\n\nConsider the depicted 'Golden Line' on the left with 4 different stations A, B, C, D. For an upcoming timeframe of **10 minutes divided into 10 periods**, the transportation demand is going to exceed the available capacity of the network and each origin-destination pair will be requested by at least 1 passenger. **To handle the inflow, queues will be put in place at each metro station.**\n\n# The Challenge\n\nYour task is to **minimize the queues** without exceeding the available transport capacity of **max. 100 passengers per minute of each arc**. A safety buffer per arc is not needed. Each station layout is excellent, with sufficient stairs and escalators. Thus, the station itself is fully capable of handling any inflow that may result from the optimized restricted inflow. Nonetheless, queues are still necessary as the arcs cannot handle each input.\n\n# 1. Flow Analysis\n\nSuppose we are in minute 7 at the arc of (D,A). Which inflows from which stations are going to impact the flow into the arc in this minute?\n\nWrite out the set $\\mathcal{R}_{(D,A),7}$ and **shortly explain** your answer. You can write out the set in a comment, for example like this:\n\n```julia\n#=\n{(A,B,1), (B,C,1), (C,D,1)}\n=#\n```\n\n::: {.callout-tip}\nTo solve this task, it might be helpful to work with paper and pen to sketch the problem.\n:::\n\n::: {.content-visible when-profile=\"solutions\"}\n\n::: {#55dcf672 .cell execution_count=1}\n``` {.julia .cell-code}\n#=\nYOUR ANSWER BELOW\n{\n    (D,A,7),\n    (C,A,6),\n    (B,A,4),\n    (D,B,7),\n    (D,C,7),\n    (C,B,6),\n}\n=#\n```\n:::\n\n\n:::\n\n::: {.content-visible unless-profile=\"solutions\"}\n\n::: {#1bf3532b .cell execution_count=2}\n``` {.julia .cell-code}\n#=\nYOUR ANSWER BELOW\n\n\n=#\n```\n:::\n\n\n:::\n\n# 2. Inflow Control\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n![Example: Fluctuations](https://images.beyondsimulations.com/ao/ao_metro-inflow_var.png)\n:::\n\n::: {.column width=\"50%\"}\n![Example: Smoothed](https://images.beyondsimulations.com/ao/ao_metro-inflow_smooth.png)\n:::\n\n::::\n\nAs there is a rather large fluctuation of allowed inflow between periods, you are asked to introduce new constraints for the model. In the first period, the inflow at each station is supposed to be unrestricted. Thereafter, it is maximally allowed to change by 20 persons in both directions per period at each station.\n\nCan you write out the decision variables and the additional constraints for the model as JuMP constraints? \n\n::: {.callout-tip}\nYou don't need to solve the model or define the objective function. You just need to constraint the fluctuations and add the appropriate variables.\n:::\n\n::: {.content-visible when-profile=\"solutions\"}\n\n::: {#a58fad9a .cell execution_count=3}\n``` {.julia .cell-code}\nusing JuMP\nmetro_model = Model()\n\n# YOUR CODE BELOW\nset_stations = [:A, :B, :C, :D]\nset_periods = 1:10\n@variable(metro_model, x[i in set_stations, p in set_periods] >= 0)\n@constraint(metro_model, upper_bound[i in set_stations, p in set_periods; p > 1], x[i, p] - x[i, p-1] <= 20)\n@constraint(metro_model, lower_bound[i in set_stations, p in set_periods; p > 1], x[i, p] - x[i, p-1] >= -20)\n```\n:::\n\n\n:::\n\n::: {.content-visible unless-profile=\"solutions\"}\n\n::: {#ede08365 .cell execution_count=4}\n``` {.julia .cell-code}\nusing JuMP\nmetro_model = Model()\n\n# YOUR CODE BELOW\n\n```\n:::\n\n\n:::\n\n\n# 3. Bidirectional Flow\n\n![Bidirectional Metro Network](https://images.beyondsimulations.com/ao/ao_metro-metro_tutorial_bidirect.svg)\n\nThe metro was improved and there is now the possibility to travel in both directions. How would this change the set $\\mathcal{R}_{(MD,MA),7}$ from 1.?\n\nWrite out the new set $\\mathcal{R}_{(D,A),7}$ manually and shortly explain your answer.\n\n::: {.content-visible when-profile=\"solutions\"}\n\n::: {#a5924577 .cell execution_count=5}\n``` {.julia .cell-code}\n#=\n# YOUR ANSWER BELOW\n{\n    (C, A, 6),\n    (D, A, 7)\n}\nIn case we acknowledge, that the travel time on some paths is identical, we can also include more entries such as (B,A,4).\n=#\n```\n:::\n\n\n:::\n\n::: {.content-visible unless-profile=\"solutions\"}\n\n::: {#24538be7 .cell execution_count=6}\n``` {.julia .cell-code}\n#=\n# YOUR ANSWER BELOW\n\n=#\n```\n:::\n\n\n:::\n\n# 4. Capacity Analysis\n\nAlthough the system is two-directional now, the **overall number of trains of the metro provider has not changed**. Would the change from a one-directional metro system to a two-directional metro system decrease the likelihood of crowd-accidents due to insufficient arc-capacities?\n\nPlease explain your answer in a few sentences.\n\n::: {.content-visible when-profile=\"solutions\"}\n\n::: {#9707566f .cell execution_count=7}\n``` {.julia .cell-code}\n#=\n# YOUR ANSWER BELOW\nThat does really depend on the actual demand for the different OD-pairs. Depending on the demand we can find cases where the two-directional flow is better and cases where the one-directional flow is better.\n\n=#\n```\n:::\n\n\n:::\n\n::: {.content-visible unless-profile=\"solutions\"}\n\n::: {#1fa4d9e2 .cell execution_count=8}\n``` {.julia .cell-code}\n#=\n# YOUR ANSWER BELOW\n\n=#\n```\n:::\n\n\n:::\n\n# 5. Computing the Set $\\mathcal{R}_{e,t}$\n\nCan you compute the set $\\mathcal{R}_{e,t}$ for the one-directional flow? Generate a dictionary $R$ that contains $e \\times t$ entries. Each entry $r_{e,t}$ should contain a vector with all origin-destination pairs and the corresponding time period saved as a tuple. Use the results to check your answer from the first task.\n\n::: {.callout-note}\nThis task can be a bit tricky, as it is a bit of a challenge. But as it is the last tutorial, I figured a small challenge is fine.\n:::\n\n::: {.content-visible when-profile=\"solutions\"}\n\n::: {#dc37172e .cell execution_count=9}\n``` {.julia .cell-code}\n# YOUR CODE BELOW\n# Solution for one directional flow\nR = Dict()\n\nMinutes = 1:10\nStations = [:A, :B, :C, :D]\nOD_pairs = [(o, d) for o in Stations, d in Stations if o != d]\nArcs = [(:A, :B), (:B, :C), (:C, :D), (:D, :A)]\n\ndist_dict = Dict(\n    (:A, :B) => 4,\n    (:B, :C) => 2,\n    (:C, :D) => 1,\n    (:D, :A) => 1\n)\n\n# Define paths for each origin-destination pair\npaths = Dict(\n    (:A, :B) => [(:A, :B)],\n    (:A, :C) => [(:A, :B), (:B, :C)],\n    (:A, :D) => [(:A, :B), (:B, :C), (:C, :D)],\n    (:B, :C) => [(:B, :C)],\n    (:B, :D) => [(:B, :C), (:C, :D)],\n    (:B, :A) => [(:B, :C), (:C, :D), (:D, :A)],\n    (:C, :D) => [(:C, :D)],\n    (:C, :A) => [(:C, :D), (:D, :A)],\n    (:C, :B) => [(:C, :D), (:D, :A), (:A, :B)],\n    (:D, :A) => [(:D, :A)],\n    (:D, :B) => [(:D, :A), (:A, :B)],\n    (:D, :C) => [(:D, :A), (:A, :B), (:B, :C)]\n)\n\n# Calculate total travel time for each OD pair\ntravel_times = Dict()\nfor (od_pair, path) in paths\n    travel_times[od_pair] = sum(dist_dict[arc] for arc in path)\nend\nfor station in Stations\n    travel_times[(station, station)] = 0\nend\n\n# Display the travel times\nfor (od_pair, time) in travel_times\n    println(\"Time from $(od_pair[1]) to $(od_pair[2]): $time minutes\")\nend\n\n# Populate R with tuples (o, d, p) based on the given conditions\nfor e in Arcs\n    for t in Minutes\n        R[(e, t)] = [\n            (o, d, tt) \n            for (o, d) in OD_pairs\n            for tt in Minutes\n            if e in paths[(o, d)] && (t - travel_times[(o,e[1])] == tt) && (tt >= 1) && (tt <= 10)\n        ]\n    end\nend\n\n# Display the computed R for verification\nfor e in Arcs\n    for t in Minutes\n        println(\"R[($e), $t] = \", R[(e, t)])\n    end\nend\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTime from D to D: 0 minutes\nTime from C to A: 2 minutes\nTime from C to C: 0 minutes\nTime from A to C: 6 minutes\nTime from D to B: 5 minutes\nTime from B to B: 0 minutes\nTime from B to D: 3 minutes\nTime from A to D: 7 minutes\nTime from C to D: 1 minutes\nTime from B to C: 2 minutes\nTime from A to B: 4 minutes\nTime from A to A: 0 minutes\nTime from C to B: 6 minutes\nTime from B to A: 4 minutes\nTime from D to A: 1 minutes\nTime from D to C: 7 minutes\nR[((:A, :B)), 1] = [(:A, :B, 1), (:A, :C, 1), (:A, :D, 1)]\nR[((:A, :B)), 2] = [(:A, :B, 2), (:D, :B, 1), (:A, :C, 2), (:D, :C, 1), (:A, :D, 2)]\nR[((:A, :B)), 3] = [(:A, :B, 3), (:C, :B, 1), (:D, :B, 2), (:A, :C, 3), (:D, :C, 2), (:A, :D, 3)]\nR[((:A, :B)), 4] = [(:A, :B, 4), (:C, :B, 2), (:D, :B, 3), (:A, :C, 4), (:D, :C, 3), (:A, :D, 4)]\nR[((:A, :B)), 5] = [(:A, :B, 5), (:C, :B, 3), (:D, :B, 4), (:A, :C, 5), (:D, :C, 4), (:A, :D, 5)]\nR[((:A, :B)), 6] = [(:A, :B, 6), (:C, :B, 4), (:D, :B, 5), (:A, :C, 6), (:D, :C, 5), (:A, :D, 6)]\nR[((:A, :B)), 7] = [(:A, :B, 7), (:C, :B, 5), (:D, :B, 6), (:A, :C, 7), (:D, :C, 6), (:A, :D, 7)]\nR[((:A, :B)), 8] = [(:A, :B, 8), (:C, :B, 6), (:D, :B, 7), (:A, :C, 8), (:D, :C, 7), (:A, :D, 8)]\nR[((:A, :B)), 9] = [(:A, :B, 9), (:C, :B, 7), (:D, :B, 8), (:A, :C, 9), (:D, :C, 8), (:A, :D, 9)]\nR[((:A, :B)), 10] = [(:A, :B, 10), (:C, :B, 8), (:D, :B, 9), (:A, :C, 10), (:D, :C, 9), (:A, :D, 10)]\nR[((:B, :C)), 1] = [(:B, :A, 1), (:B, :C, 1), (:B, :D, 1)]\nR[((:B, :C)), 2] = [(:B, :A, 2), (:B, :C, 2), (:B, :D, 2)]\nR[((:B, :C)), 3] = [(:B, :A, 3), (:B, :C, 3), (:B, :D, 3)]\nR[((:B, :C)), 4] = [(:B, :A, 4), (:B, :C, 4), (:B, :D, 4)]\nR[((:B, :C)), 5] = [(:B, :A, 5), (:A, :C, 1), (:B, :C, 5), (:A, :D, 1), (:B, :D, 5)]\nR[((:B, :C)), 6] = [(:B, :A, 6), (:A, :C, 2), (:B, :C, 6), (:D, :C, 1), (:A, :D, 2), (:B, :D, 6)]\nR[((:B, :C)), 7] = [(:B, :A, 7), (:A, :C, 3), (:B, :C, 7), (:D, :C, 2), (:A, :D, 3), (:B, :D, 7)]\nR[((:B, :C)), 8] = [(:B, :A, 8), (:A, :C, 4), (:B, :C, 8), (:D, :C, 3), (:A, :D, 4), (:B, :D, 8)]\nR[((:B, :C)), 9] = [(:B, :A, 9), (:A, :C, 5), (:B, :C, 9), (:D, :C, 4), (:A, :D, 5), (:B, :D, 9)]\nR[((:B, :C)), 10] = [(:B, :A, 10), (:A, :C, 6), (:B, :C, 10), (:D, :C, 5), (:A, :D, 6), (:B, :D, 10)]\nR[((:C, :D)), 1] = [(:C, :A, 1), (:C, :B, 1), (:C, :D, 1)]\nR[((:C, :D)), 2] = [(:C, :A, 2), (:C, :B, 2), (:C, :D, 2)]\nR[((:C, :D)), 3] = [(:B, :A, 1), (:C, :A, 3), (:C, :B, 3), (:B, :D, 1), (:C, :D, 3)]\nR[((:C, :D)), 4] = [(:B, :A, 2), (:C, :A, 4), (:C, :B, 4), (:B, :D, 2), (:C, :D, 4)]\nR[((:C, :D)), 5] = [(:B, :A, 3), (:C, :A, 5), (:C, :B, 5), (:B, :D, 3), (:C, :D, 5)]\nR[((:C, :D)), 6] = [(:B, :A, 4), (:C, :A, 6), (:C, :B, 6), (:B, :D, 4), (:C, :D, 6)]\nR[((:C, :D)), 7] = [(:B, :A, 5), (:C, :A, 7), (:C, :B, 7), (:A, :D, 1), (:B, :D, 5), (:C, :D, 7)]\nR[((:C, :D)), 8] = [(:B, :A, 6), (:C, :A, 8), (:C, :B, 8), (:A, :D, 2), (:B, :D, 6), (:C, :D, 8)]\nR[((:C, :D)), 9] = [(:B, :A, 7), (:C, :A, 9), (:C, :B, 9), (:A, :D, 3), (:B, :D, 7), (:C, :D, 9)]\nR[((:C, :D)), 10] = [(:B, :A, 8), (:C, :A, 10), (:C, :B, 10), (:A, :D, 4), (:B, :D, 8), (:C, :D, 10)]\nR[((:D, :A)), 1] = [(:D, :A, 1), (:D, :B, 1), (:D, :C, 1)]\nR[((:D, :A)), 2] = [(:C, :A, 1), (:D, :A, 2), (:C, :B, 1), (:D, :B, 2), (:D, :C, 2)]\nR[((:D, :A)), 3] = [(:C, :A, 2), (:D, :A, 3), (:C, :B, 2), (:D, :B, 3), (:D, :C, 3)]\nR[((:D, :A)), 4] = [(:B, :A, 1), (:C, :A, 3), (:D, :A, 4), (:C, :B, 3), (:D, :B, 4), (:D, :C, 4)]\nR[((:D, :A)), 5] = [(:B, :A, 2), (:C, :A, 4), (:D, :A, 5), (:C, :B, 4), (:D, :B, 5), (:D, :C, 5)]\nR[((:D, :A)), 6] = [(:B, :A, 3), (:C, :A, 5), (:D, :A, 6), (:C, :B, 5), (:D, :B, 6), (:D, :C, 6)]\nR[((:D, :A)), 7] = [(:B, :A, 4), (:C, :A, 6), (:D, :A, 7), (:C, :B, 6), (:D, :B, 7), (:D, :C, 7)]\nR[((:D, :A)), 8] = [(:B, :A, 5), (:C, :A, 7), (:D, :A, 8), (:C, :B, 7), (:D, :B, 8), (:D, :C, 8)]\nR[((:D, :A)), 9] = [(:B, :A, 6), (:C, :A, 8), (:D, :A, 9), (:C, :B, 8), (:D, :B, 9), (:D, :C, 9)]\nR[((:D, :A)), 10] = [(:B, :A, 7), (:C, :A, 9), (:D, :A, 10), (:C, :B, 9), (:D, :B, 10), (:D, :C, 10)]\n```\n:::\n:::\n\n\n::: {#85e20bd3 .cell execution_count=10}\n``` {.julia .cell-code}\n# YOUR CODE BELOW\n# Solution for bi-directional flow\nR = Dict()\n\nMinutes = 1:10\nStations = [:A, :B, :C, :D]\nOD_pairs = [(o, d) for o in Stations, d in Stations if o != d]\nArcs = [\n    (:A, :B), \n    (:B, :C), \n    (:C, :D), \n    (:D, :A),\n    (:B, :A), \n    (:C, :B), \n    (:D, :C), \n    (:A, :D),\n]\n\ndist_dict = Dict(\n    (:A, :B) => 4,\n    (:B, :C) => 2,\n    (:C, :D) => 1,\n    (:D, :A) => 1,\n    (:B, :A) => 4,\n    (:C, :B) => 2,\n    (:D, :C) => 1,\n    (:A, :D) => 1\n)\n\n# Define paths for each shortest path origin-destination pair\npaths = Dict(\n    (:A, :B) => [(:A, :B)],\n    (:A, :C) => [(:A, :D), (:D, :C)],\n    (:A, :D) => [(:A, :D)],\n    (:B, :C) => [(:B, :C)],\n    (:B, :D) => [(:B, :C), (:C, :D)],\n    (:B, :A) => [(:B, :A)],\n    (:C, :D) => [(:C, :D)],\n    (:C, :A) => [(:C, :D), (:D, :A)],\n    (:C, :B) => [(:C, :B)],\n    (:D, :A) => [(:D, :A)],\n    (:D, :B) => [(:D, :C), (:C, :B)],\n    (:D, :C) => [(:D, :C)]\n)\n\n# Calculate total travel time for each OD pair\ntravel_times = Dict()\nfor (od_pair, path) in paths\n    travel_times[od_pair] = sum(dist_dict[arc] for arc in path)\nend\nfor station in Stations\n    travel_times[(station, station)] = 0\nend\n\n# Display the travel times\nfor (od_pair, time) in travel_times\n    println(\"Time from $(od_pair[1]) to $(od_pair[2]): $time minutes\")\nend\n\n# Populate R with tuples (o, d, p) based on the given conditions\nfor e in Arcs\n    for t in Minutes\n        R[(e, t)] = [\n            (o, d, tt) \n            for (o, d) in OD_pairs\n            for tt in Minutes\n            if e in paths[(o, d)] && (t - travel_times[(o,e[1])] == tt) && (tt >= 1) && (tt <= 10)\n        ]\n    end\nend\n\n# Display the computed R for verification\nfor e in Arcs\n    for t in Minutes\n        println(\"R[($e), $t] = \", R[(e, t)])\n    end\nend\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTime from D to D: 0 minutes\nTime from C to A: 2 minutes\nTime from C to C: 0 minutes\nTime from A to C: 2 minutes\nTime from D to B: 3 minutes\nTime from B to B: 0 minutes\nTime from B to D: 3 minutes\nTime from A to D: 1 minutes\nTime from C to D: 1 minutes\nTime from B to C: 2 minutes\nTime from A to B: 4 minutes\nTime from A to A: 0 minutes\nTime from C to B: 2 minutes\nTime from B to A: 4 minutes\nTime from D to A: 1 minutes\nTime from D to C: 1 minutes\nR[((:A, :B)), 1] = [(:A, :B, 1)]\nR[((:A, :B)), 2] = [(:A, :B, 2)]\nR[((:A, :B)), 3] = [(:A, :B, 3)]\nR[((:A, :B)), 4] = [(:A, :B, 4)]\nR[((:A, :B)), 5] = [(:A, :B, 5)]\nR[((:A, :B)), 6] = [(:A, :B, 6)]\nR[((:A, :B)), 7] = [(:A, :B, 7)]\nR[((:A, :B)), 8] = [(:A, :B, 8)]\nR[((:A, :B)), 9] = [(:A, :B, 9)]\nR[((:A, :B)), 10] = [(:A, :B, 10)]\nR[((:B, :C)), 1] = [(:B, :C, 1), (:B, :D, 1)]\nR[((:B, :C)), 2] = [(:B, :C, 2), (:B, :D, 2)]\nR[((:B, :C)), 3] = [(:B, :C, 3), (:B, :D, 3)]\nR[((:B, :C)), 4] = [(:B, :C, 4), (:B, :D, 4)]\nR[((:B, :C)), 5] = [(:B, :C, 5), (:B, :D, 5)]\nR[((:B, :C)), 6] = [(:B, :C, 6), (:B, :D, 6)]\nR[((:B, :C)), 7] = [(:B, :C, 7), (:B, :D, 7)]\nR[((:B, :C)), 8] = [(:B, :C, 8), (:B, :D, 8)]\nR[((:B, :C)), 9] = [(:B, :C, 9), (:B, :D, 9)]\nR[((:B, :C)), 10] = [(:B, :C, 10), (:B, :D, 10)]\nR[((:C, :D)), 1] = [(:C, :A, 1), (:C, :D, 1)]\nR[((:C, :D)), 2] = [(:C, :A, 2), (:C, :D, 2)]\nR[((:C, :D)), 3] = [(:C, :A, 3), (:B, :D, 1), (:C, :D, 3)]\nR[((:C, :D)), 4] = [(:C, :A, 4), (:B, :D, 2), (:C, :D, 4)]\nR[((:C, :D)), 5] = [(:C, :A, 5), (:B, :D, 3), (:C, :D, 5)]\nR[((:C, :D)), 6] = [(:C, :A, 6), (:B, :D, 4), (:C, :D, 6)]\nR[((:C, :D)), 7] = [(:C, :A, 7), (:B, :D, 5), (:C, :D, 7)]\nR[((:C, :D)), 8] = [(:C, :A, 8), (:B, :D, 6), (:C, :D, 8)]\nR[((:C, :D)), 9] = [(:C, :A, 9), (:B, :D, 7), (:C, :D, 9)]\nR[((:C, :D)), 10] = [(:C, :A, 10), (:B, :D, 8), (:C, :D, 10)]\nR[((:D, :A)), 1] = [(:D, :A, 1)]\nR[((:D, :A)), 2] = [(:C, :A, 1), (:D, :A, 2)]\nR[((:D, :A)), 3] = [(:C, :A, 2), (:D, :A, 3)]\nR[((:D, :A)), 4] = [(:C, :A, 3), (:D, :A, 4)]\nR[((:D, :A)), 5] = [(:C, :A, 4), (:D, :A, 5)]\nR[((:D, :A)), 6] = [(:C, :A, 5), (:D, :A, 6)]\nR[((:D, :A)), 7] = [(:C, :A, 6), (:D, :A, 7)]\nR[((:D, :A)), 8] = [(:C, :A, 7), (:D, :A, 8)]\nR[((:D, :A)), 9] = [(:C, :A, 8), (:D, :A, 9)]\nR[((:D, :A)), 10] = [(:C, :A, 9), (:D, :A, 10)]\nR[((:B, :A)), 1] = [(:B, :A, 1)]\nR[((:B, :A)), 2] = [(:B, :A, 2)]\nR[((:B, :A)), 3] = [(:B, :A, 3)]\nR[((:B, :A)), 4] = [(:B, :A, 4)]\nR[((:B, :A)), 5] = [(:B, :A, 5)]\nR[((:B, :A)), 6] = [(:B, :A, 6)]\nR[((:B, :A)), 7] = [(:B, :A, 7)]\nR[((:B, :A)), 8] = [(:B, :A, 8)]\nR[((:B, :A)), 9] = [(:B, :A, 9)]\nR[((:B, :A)), 10] = [(:B, :A, 10)]\nR[((:C, :B)), 1] = [(:C, :B, 1)]\nR[((:C, :B)), 2] = [(:C, :B, 2), (:D, :B, 1)]\nR[((:C, :B)), 3] = [(:C, :B, 3), (:D, :B, 2)]\nR[((:C, :B)), 4] = [(:C, :B, 4), (:D, :B, 3)]\nR[((:C, :B)), 5] = [(:C, :B, 5), (:D, :B, 4)]\nR[((:C, :B)), 6] = [(:C, :B, 6), (:D, :B, 5)]\nR[((:C, :B)), 7] = [(:C, :B, 7), (:D, :B, 6)]\nR[((:C, :B)), 8] = [(:C, :B, 8), (:D, :B, 7)]\nR[((:C, :B)), 9] = [(:C, :B, 9), (:D, :B, 8)]\nR[((:C, :B)), 10] = [(:C, :B, 10), (:D, :B, 9)]\nR[((:D, :C)), 1] = [(:D, :B, 1), (:D, :C, 1)]\nR[((:D, :C)), 2] = [(:D, :B, 2), (:A, :C, 1), (:D, :C, 2)]\nR[((:D, :C)), 3] = [(:D, :B, 3), (:A, :C, 2), (:D, :C, 3)]\nR[((:D, :C)), 4] = [(:D, :B, 4), (:A, :C, 3), (:D, :C, 4)]\nR[((:D, :C)), 5] = [(:D, :B, 5), (:A, :C, 4), (:D, :C, 5)]\nR[((:D, :C)), 6] = [(:D, :B, 6), (:A, :C, 5), (:D, :C, 6)]\nR[((:D, :C)), 7] = [(:D, :B, 7), (:A, :C, 6), (:D, :C, 7)]\nR[((:D, :C)), 8] = [(:D, :B, 8), (:A, :C, 7), (:D, :C, 8)]\nR[((:D, :C)), 9] = [(:D, :B, 9), (:A, :C, 8), (:D, :C, 9)]\nR[((:D, :C)), 10] = [(:D, :B, 10), (:A, :C, 9), (:D, :C, 10)]\nR[((:A, :D)), 1] = [(:A, :C, 1), (:A, :D, 1)]\nR[((:A, :D)), 2] = [(:A, :C, 2), (:A, :D, 2)]\nR[((:A, :D)), 3] = [(:A, :C, 3), (:A, :D, 3)]\nR[((:A, :D)), 4] = [(:A, :C, 4), (:A, :D, 4)]\nR[((:A, :D)), 5] = [(:A, :C, 5), (:A, :D, 5)]\nR[((:A, :D)), 6] = [(:A, :C, 6), (:A, :D, 6)]\nR[((:A, :D)), 7] = [(:A, :C, 7), (:A, :D, 7)]\nR[((:A, :D)), 8] = [(:A, :C, 8), (:A, :D, 8)]\nR[((:A, :D)), 9] = [(:A, :C, 9), (:A, :D, 9)]\nR[((:A, :D)), 10] = [(:A, :C, 10), (:A, :D, 10)]\n```\n:::\n:::\n\n\n:::\n\n::: {.content-visible unless-profile=\"solutions\"}\n\n::: {#b3901cff .cell execution_count=11}\n``` {.julia .cell-code}\n# YOUR CODE BELOW\n\n```\n:::\n\n\nIf you encounter any difficulties ad cannot solve the problem, please document your issues here:\n\n::: {#5a9dc4fb .cell execution_count=12}\n``` {.julia .cell-code}\n#=\n\n\n\n=#\n```\n:::\n\n\n:::\n\n---\n\n\n# Solutions\n\nYou will likely find solutions to most exercises online. However, I strongly encourage you to work on these exercises independently without searching explicitly for the exact answers to the exercises. Understanding someone else's solution is very different from developing your own. Use the lecture notes and try to solve the exercises on your own. This approach will significantly enhance your learning and problem-solving skills.\n\nRemember, the goal is not just to complete the exercises, but to understand the concepts and improve your programming abilities. If you encounter difficulties, review the lecture materials, experiment with different approaches, and don't hesitate to ask for clarification during class discussions.\n\nLater, you will find the solutions to these exercises online in the associated GitHub repository, but we will also quickly go over them in next week's tutorial. To access the solutions, click on the Github button on the lower right and search for the folder with today's lecture and tutorial. Alternatively, you can ask ChatGPT or Claude to explain them to you. But please remember, the goal is not just to complete the exercises, but to understand the concepts and improve your programming abilities.\n\n",
    "supporting": [
      "tutorial-rail_files"
    ],
    "filters": [],
    "includes": {}
  }
}