{
  "hash": "9c7d1ff3a018067f34fbcc671dbf8bcd",
  "result": {
    "engine": "julia",
    "markdown": "---\ntitle: \"Lecture XII - Course Repetition and Summary\"\nsubtitle: \"Energy System Optimization with Julia\"\nauthor: \"Dr. Tobias Cors\"\ninstitute: \"Hamburg University of Applied Science - Summer 2025\"\ntitle-slide-attributes:\n    data-background-color: \"#025259\"\nhtml-math-method:\n  method: mathjax\n  url: \"https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js\"\n\nformat:\n    html:\n        theme: [litera, ../styles.scss]\n    revealjs:\n        theme: [default, ../styles.scss]\n        transition: slide\n        transition-speed: fast\n        highlight-style: arrow\n        slide-number: true\n        code-copy: true\n        code-link: true\n        preview-links: auto\n        footer: \" {{< meta title >}} | {{< meta author >}} | [Home](lecture-repetition.qmd)\"\n        output-file: lecture-presentation.html\n\nbibliography: ../ESO-bib.bib\n\nengine: julia\n\nexecute:\n    echo: true\n---\n\n\n\n\n\n\n\n\n# [Course Overview]{.flow} {.title}\n\n## What We Have Covered\n\nThis course has been organized into three main parts:\n\n1. **Part I**: Introduction to Julia and Modelling (Lectures I-IV)\n2. **Part II**: Energy System Optimization with Basic Models (Lectures V-VIII)\n3. **Part III**: Energy System Optimization with Advanced Models (Lectures IX-XI)\n\n. . .\n\n::: {.callout-tip}\nThis repetition lecture will help you consolidate your understanding of all key concepts covered throughout the course.\n:::\n\n# [Part I: Introduction to Julia and Modelling]{.flow} {.title}\n\n## Lecture I: Welcome and Introduction\n\n### Course Objectives\n- Understanding and applying optimization to real-world problems\n- Learning to recognize and solve problem structures\n- Energy system optimization applications\n\n### Key Topics Covered\n- Course structure and assignments\n- Energy system optimization applications\n- Julia programming language introduction\n- Real-world applications in operations research\n\n## Lecture II: First Steps in Julia\n\n### Core Programming Concepts\n- **Variables**: Assignment and data types\n- **Vectors**: Creation, indexing, and manipulation\n- **Comparisons**: Boolean operations and conditional logic\n- **Loops**: `for` and `while` loops for iteration\n- **Dictionaries**: Key-value data structures\n\n### Technical Setup\n- Julia installation and configuration\n- VS Code setup with Julia extension\n- IJulia for Jupyter notebooks\n- Assignment submission process\n\n## Lecture III: Packages and Data Management\n\n### Advanced Julia Concepts\n- **Functions**: Definition, arguments, and return values\n- **Packages**: Installation and usage with `using` and `import`\n- **DataFrames**: Tabular data manipulation\n- **Input/Output**: File reading and writing operations\n- **Plotting**: Data visualization with Plots.jl\n\n### Key Skills Developed\n- Package management with `Pkg`\n- Data manipulation with DataFrames.jl\n- File I/O operations with CSV.jl\n- Basic plotting and visualization\n\n## Lecture IV: Modelling with JuMP\n\n### Mathematical Optimization Foundation\n- **JuMP Framework**: Optimization modeling in Julia\n- **Variables**: Declaration with bounds and types\n- **Constraints**: Equality and inequality constraints\n- **Objective Functions**: Linear and nonlinear objectives\n- **Solvers**: Integration with various optimization solvers\n\n### Modeling Skills\n- Problem formulation in mathematical notation\n- Translation to JuMP code\n- Solver selection and parameter setting\n- Solution analysis and interpretation\n\n# [Part II: Energy System Optimization with Basic Models]{.flow} {.title}\n\n## Lecture V: Economic Dispatch Problem\n\n### Problem Definition\n- **Objective**: Minimize electricity generation costs\n- **Constraints**: Demand satisfaction, generator limits, renewable integration\n- **Decision Variables**: Power output of thermal generators and renewables\n\n### Mathematical Formulation\n**Sets:**\n\n- $\\mathcal{G}$ - Set of thermal generators\n- $\\mathcal{W}$ - Set of wind turbines\n\n**Parameters:**\n\n- $c^{var}_g$ - Variable cost of generator $g$\n- $p^{\\min}_g, p^{\\max}_g$ - Power limits of generator $g$\n- $p^{f}_w$ - Forecasted wind power\n- $d^f$ - Forecasted demand\n\n**Decision Variables:**\n\n- $p_g$ - Power output of generator $g$\n- $p_w$ - Power output of wind turbine $w$\n\n**Objective:**\n\n$\\min \\sum_{g \\in \\mathcal{G}} c^{var}_g p_g + \\sum_{w \\in \\mathcal{W}} c^{var}_w p_w$\n\n**Constraints:**\n\n- Power balance: $\\sum_{g \\in \\mathcal{G}} p_g + \\sum_{w \\in \\mathcal{W}} p_w = d^f$\n- Generator limits: $p^{\\min}_g \\leq p_g \\leq p^{\\max}_g \\quad \\forall g \\in \\mathcal{G}$\n- Wind limits: $0 \\leq p_w \\leq p^{f}_w \\quad \\forall w \\in \\mathcal{W}$\n\n## Lecture VI: Unit Commitment Problem\n\n### Problem Extension\n- **Binary Variables**: Startup/shutdown decisions\n- **Time Dimension**: Multi-period optimization\n- **Additional Constraints**: Minimum up/down times, ramp rates\n\n### Key Modeling Concepts\n- **Binary Variables**: $v_{g,t}$ (startup), $u_{g,t}$ (commitment)\n- **Minimum Up/Down Times**: Prevent rapid cycling\n- **Ramp Rate Limits**: Constrain power change rates\n- **Startup Costs**: Additional costs for starting generators\n\n### Mathematical Extensions\n**Additional Sets:**\n\n- $\\mathcal{T}$ - Set of time periods\n\n**Additional Variables:**\n\n- $v_{g,t}$ - Binary startup variable\n- $u_{g,t}$ - Binary commitment variable\n\n**Additional Constraints:**\n\n- Minimum up time: $\\sum_{\\tau=t}^{t+UT_g-1} u_{g,\\tau} \\geq UT_g v_{g,t}$\n- Minimum down time: $\\sum_{\\tau=t}^{t+DT_g-1} (1-u_{g,\\tau}) \\geq DT_g (1-u_{g,t-1})$\n- Ramp rate: $p_{g,t} - p_{g,t-1} \\leq RampUp_g u_{g,t}$\n\n## Lecture VII: Storage Systems\n\n### Storage Modeling Concepts\n- **Energy Balance**: Storage level evolution over time\n- **Power Limits**: Charging and discharging rate constraints\n- **Efficiency**: Energy conversion losses\n- **State of Charge**: Energy level constraints\n\n### Mathematical Formulation\n**Sets:**\n\n- $\\mathcal{S}$ - Set of storage systems\n\n**Variables:**\n\n- $e_{s,t}$ - Energy level of storage $s$ at time $t$\n- $p^{ch}_{s,t}$ - Charging power of storage $s$ at time $t$\n- $p^{dis}_{s,t}$ - Discharging power of storage $s$ at time $t$\n\n**Constraints:**\n\n- Energy balance: $e_{s,t} = e_{s,t-1} + \\eta^{ch}_s p^{ch}_{s,t} - \\frac{p^{dis}_{s,t}}{\\eta^{dis}_s}$\n- Energy limits: $E^{\\min}_s \\leq e_{s,t} \\leq E^{\\max}_s$\n- Power limits: $0 \\leq p^{ch}_{s,t} \\leq P^{ch,\\max}_s$, $0 \\leq p^{dis}_{s,t} \\leq P^{dis,\\max}_s$\n\n## Lecture VIII: Investment Planning\n\n### Long-term Planning Problem\n- **Investment Decisions**: Capacity expansion decisions\n- **Multi-period Optimization**: Long-term planning horizon\n- **Cost Components**: Investment, operational, and maintenance costs\n\n### Key Concepts\n- **Annualized Costs**: Converting investment costs to annual equivalents\n- **Capacity Planning**: Optimal sizing of generation and storage\n- **Economic Analysis**: Cost-benefit evaluation of investments\n- **System Reliability**: Ensuring adequate capacity margins\n\n# [Part III: Energy System Optimization with Advanced Models]{.flow} {.title}\n\n## Lecture IX: Multi-Energy Systems\n\n### System Integration\n- **Multiple Energy Carriers**: Electricity, heat, hydrogen, etc.\n- **Energy Conversion**: Technologies linking different carriers\n- **System Optimization**: Coordinated optimization across carriers\n\n### Key Components\n- **Electrolyzers**: Electricity to hydrogen conversion\n- **Heat Pumps**: Electricity to heat conversion\n- **Combined Heat and Power**: Simultaneous electricity and heat generation\n- **Energy Storage**: Multiple storage types for different carriers\n\n### Mathematical Extensions\n**Additional Sets:**\n\n- $\\mathcal{C}$ - Set of energy carriers\n- $\\mathcal{X}$ - Set of conversion technologies\n\n**Additional Variables:**\n\n- $h_{x,t}$ - Hydrogen production from electrolyzer $x$\n- $q_{chp,t}$ - Heat production from CHP unit\n\n**Additional Constraints:**\n\n- Hydrogen balance: $\\sum_{x \\in \\mathcal{X}} h_{x,t} = d^{H2}_t$\n- Heat balance: $\\sum_{chp \\in \\mathcal{CHP}} q_{chp,t} = d^{Heat}_t$\n\n## Lecture X: Uncertainty Modeling and Renewable Integration\n\n### Stochastic Programming\n- **Scenarios**: Multiple possible realizations of uncertain parameters\n- **Two-Stage Problems**: Here-and-now vs. wait-and-see decisions\n- **Risk Management**: Robust optimization approaches\n\n### Uncertainty Sources\n- **Renewable Generation**: Wind and solar power variability\n- **Demand Patterns**: Load forecasting uncertainty\n- **Price Volatility**: Energy market price fluctuations\n- **Weather Conditions**: Temperature and weather impacts\n\n### Mathematical Framework\n**Sets:**\n\n- $\\Omega$ - Set of scenarios\n- $\\pi_{\\omega}$ - Probability of scenario $\\omega$\n\n**Two-Stage Structure:**\n\n- **First Stage**: Investment decisions (here-and-now)\n- **Second Stage**: Operational decisions (wait-and-see)\n\n**Objective:**\n\n$\\min \\sum_{i} C^{inv}_i x_i + \\sum_{\\omega \\in \\Omega} \\pi_{\\omega} \\sum_{t} C^{op}_{t,\\omega} y_{t,\\omega}$\n\n## Lecture XI: Framework for Multi-Energy System Optimization\n\n### Comprehensive Framework\n- **Multi-Carrier Integration**: Electricity and hydrogen systems\n- **Stochastic Formulation**: Uncertainty in renewable generation and demand\n- **Investment and Operations**: Combined planning and operational optimization\n\n### Advanced Modeling Concepts\n- **Big M Constraints**: Conditional constraint modeling\n- **Mixed-Integer Programming**: Binary variables for discrete decisions\n- **Large-Scale Optimization**: Efficient solution methods\n- **Scenario Generation**: Creating representative uncertainty scenarios\n\n### Framework Components\n**Investment Variables:**\n\n- Storage capacities: $e^{nom}_s$, $p^{ch,nom}_s$, $p^{dis,nom}_s$\n- Generation capacities: $p^{nom}_w$, $p^{nom}_v$\n- Conversion capacities: $p^{nom}_x$\n\n**Operational Variables:**\n\n- Power outputs: $p_{w,t,\\omega}$, $p_{v,t,\\omega}$\n- Storage operation: $p^{ch}_{s,t,\\omega}$, $p^{dis}_{s,t,\\omega}$, $e_{s,t,\\omega}$\n- Conversion operation: $p_{x,t,\\omega}$, $h_{x,t,\\omega}$\n\n# [Key Mathematical Concepts]{.flow} {.title}\n\n## Optimization Problem Structure\n\n### General Form\n$\\min f(x)$\n\nsubject to:\n\n$g_i(x) \\leq 0 \\quad \\forall i \\in \\mathcal{I}$\n$h_j(x) = 0 \\quad \\forall j \\in \\mathcal{J}$\n$x \\in \\mathcal{X}$\n\n### Problem Types\n- **Linear Programming (LP)**: Linear objective and constraints\n- **Mixed-Integer Linear Programming (MILP)**: Linear with binary variables\n- **Nonlinear Programming (NLP)**: Nonlinear objective or constraints\n- **Stochastic Programming**: Multiple scenarios with probabilities\n\n## Constraint Types\n\n### Equality Constraints\n- Power balance: $\\sum_{g} p_g = d$\n- Energy balance: $e_t = e_{t-1} + p^{ch}_t - p^{dis}_t$\n\n### Inequality Constraints\n- Capacity limits: $p_g \\leq p^{\\max}_g$\n- Ramp rates: $p_{g,t} - p_{g,t-1} \\leq RampUp_g$\n\n### Binary Variable Constraints\n- Minimum up time: $\\sum_{\\tau=t}^{t+UT-1} u_{\\tau} \\geq UT \\cdot v_t$\n- Logical constraints: $p_g \\leq p^{\\max}_g \\cdot u_g$\n\n## Solution Methods\n\n### Solver Types\n- **LP Solvers**: HiGHS, GLPK, Gurobi\n- **MILP Solvers**: Gurobi, CPLEX, HiGHS\n- **NLP Solvers**: IPOPT, KNITRO\n\n### Solution Analysis\n- **Feasibility**: Check if solution satisfies all constraints\n- **Optimality**: Verify solution is globally optimal\n- **Sensitivity**: Analyze impact of parameter changes\n\n# [Julia Programming Skills]{.flow} {.title}\n\n## Core Programming Concepts\n\n### Data Types and Structures\n```julia\n# Variables and basic types\nx = 5.0          # Float64\ny = [1, 2, 3]    # Vector{Int64}\nz = Dict(\"a\" => 1, \"b\" => 2)  # Dict{String, Int64}\n\n# Arrays and matrices\nA = [1 2; 3 4]   # Matrix\nB = zeros(3, 3)  # 3x3 zero matrix\n```\n\n### Control Structures\n```julia\n# Loops\nfor i in 1:10\n    println(i)\nend\n\n# Conditionals\nif x > 0\n    println(\"Positive\")\nelseif x < 0\n    println(\"Negative\")\nelse\n    println(\"Zero\")\nend\n```\n\n### Functions\n```julia\n# Function definition\nfunction calculate_cost(power, cost_rate)\n    return power * cost_rate\nend\n\n# Anonymous functions\nf = x -> x^2 + 2*x + 1\n```\n\n## Data Management\n\n### DataFrames\n```julia\nusing DataFrames\n\n# Create DataFrame\ndf = DataFrame(\n    generator = [\"G1\", \"G2\", \"G3\"],\n    capacity = [100, 150, 200],\n    cost = [50, 60, 45]\n)\n\n# Access and manipulate\ndf.capacity[1] = 120\ndf[!, :efficiency] = [0.8, 0.85, 0.9]\n```\n\n### File I/O\n```julia\nusing CSV\n\n# Read CSV file\ndata = CSV.read(\"generators.csv\", DataFrame)\n\n# Write CSV file\nCSV.write(\"results.csv\", results_df)\n```\n\n## Optimization with JuMP\n\n### Basic Model Structure\n```julia\nusing JuMP, HiGHS\n\n# Create model\nmodel = Model(HiGHS.Optimizer)\n\n# Variables\n@variable(model, p[g] >= 0)  # Power output\n@variable(model, u[g, t], Bin)  # Binary commitment\n\n# Objective\n@objective(model, Min, sum(cost[g] * p[g] for g in generators))\n\n# Constraints\n@constraint(model, power_balance[t in time], \n    sum(p[g] for g in generators) == demand[t])\n\n# Solve\noptimize!(model)\n```\n\n### Advanced Modeling\n```julia\n# Conditional constraints with Big M\n@constraint(model, p[g] <= max_power[g] * u[g])\n\n# Minimum up time constraints\n@constraint(model, min_up_time[g, t], \n    sum(u[g, tau] for tau in t:t+min_up[g]-1) >= min_up[g] * v[g, t])\n```\n\n# [Energy System Applications]{.flow} {.title}\n\n## Real-World Problem Types\n\n### Generation Planning\n- **Economic Dispatch**: Optimal power generation for given demand\n- **Unit Commitment**: Optimal generator scheduling with startup/shutdown\n- **Generation Expansion**: Long-term capacity planning\n\n### Storage Integration\n- **Battery Storage**: Short-term energy storage\n- **Pumped Hydro**: Large-scale energy storage\n- **Thermal Storage**: Heat storage for district heating\n\n### Renewable Integration\n- **Wind Power**: Variable generation with forecasting\n- **Solar Power**: Diurnal patterns and weather dependence\n- **Grid Integration**: Balancing variable renewable energy\n\n### Multi-Energy Systems\n- **Power-to-Gas**: Hydrogen production from electricity\n- **District Heating**: Combined heat and power systems\n- **Transport Integration**: Electric vehicle charging\n\n## Industry Applications\n\n### Power System Operations\n- **Day-ahead Markets**: 24-hour ahead generation scheduling\n- **Real-time Balancing**: Minute-to-minute power balance\n- **Ancillary Services**: Frequency regulation and reserves\n\n### Energy Planning\n- **Investment Planning**: Long-term capacity expansion\n- **Policy Analysis**: Impact of carbon pricing and regulations\n- **Technology Assessment**: Comparison of different energy technologies\n\n### Research Applications\n- **Academic Research**: Novel optimization algorithms\n- **Industry Collaboration**: Real-world problem solving\n- **Policy Support**: Evidence-based energy policy design\n\n# [Exam Preparation Tips]{.flow} {.title}\n\n## Key Areas to Review\n\n### Mathematical Modeling\n- **Problem Formulation**: Converting word problems to mathematical models\n- **Constraint Types**: Understanding different constraint formulations\n- **Variable Types**: Continuous vs. binary variables\n- **Objective Functions**: Cost minimization and profit maximization\n\n### Julia Programming\n- **Basic Syntax**: Variables, loops, functions\n- **Data Structures**: Arrays, DataFrames, Dictionaries\n- **JuMP Modeling**: Variable declaration, constraints, objectives\n- **Solution Analysis**: Accessing and interpreting results\n\n### Energy System Concepts\n- **Power Balance**: Supply equals demand constraints\n- **Generator Characteristics**: Cost curves, capacity limits, ramp rates\n- **Storage Operation**: Energy balance and efficiency\n- **Multi-energy Integration**: Energy carrier conversion and storage\n\n## Practice Exercises\n\n### Modeling Problems\n1. **Economic Dispatch**: Formulate and solve a simple dispatch problem\n2. **Unit Commitment**: Add binary variables and startup constraints\n3. **Storage Integration**: Include storage operation in power balance\n4. **Multi-energy**: Model electricity-hydrogen system\n\n### Programming Problems\n1. **Data Manipulation**: Read, process, and analyze energy data\n2. **Optimization Models**: Implement JuMP models for energy problems\n3. **Result Analysis**: Plot and interpret optimization results\n4. **Scenario Analysis**: Handle uncertainty in energy systems\n\n## Exam Strategy\n\n### Time Management\n- **Part I (30 points)**: Energy system modeling (45 minutes)\n- **Part II (15 points)**: Theory and concepts (22 minutes)\n- **Part III (15 points)**: Julia programming (22 minutes)\n\n### Problem-Solving Approach\n1. **Read Carefully**: Understand the problem requirements\n2. **Plan Solution**: Outline your approach before coding\n3. **Test Incrementally**: Verify each step before proceeding\n4. **Check Results**: Ensure your solution makes sense\n\n. . .\n\n::: {.callout-important}\nRemember: You can bring one handwritten DIN A4 sheet with notes to the exam!\n:::\n\n# [Course Summary]{.flow} {.title}\n\n## What You Have Learned\n\n### Programming Skills\n- **Julia Language**: Modern, high-performance programming\n- **Data Management**: Working with real-world energy data\n- **Optimization Modeling**: Mathematical problem formulation\n- **Solution Analysis**: Interpreting and visualizing results\n\n### Energy System Knowledge\n- **Power System Operations**: How electricity systems work\n- **Optimization Applications**: Real-world energy problems\n- **Multi-energy Systems**: Integration of different energy carriers\n- **Uncertainty Handling**: Stochastic programming approaches\n\n### Problem-Solving Skills\n- **Mathematical Modeling**: Converting problems to optimization models\n- **Algorithm Implementation**: Coding optimization algorithms\n- **Result Interpretation**: Understanding and communicating solutions\n- **Team Collaboration**: Working in groups on complex problems\n\n## Career Applications\n\n### Industry Opportunities\n- **Energy Companies**: Power system planning and operations\n- **Consulting Firms**: Energy system analysis and optimization\n- **Research Institutions**: Academic and applied research\n- **Government Agencies**: Energy policy and regulation\n\n### Skill Transfer\n- **Programming**: Julia skills transfer to other languages\n- **Optimization**: Mathematical modeling skills for various domains\n- **Data Analysis**: Energy data skills apply to other sectors\n- **Problem Solving**: Systematic approach to complex problems\n\n. . .\n\n::: {.callout-tip}\nThe skills you've learned in this course are valuable for many careers in energy, operations research, and data science!\n:::\n\n# [Final Thoughts]{.flow} {.title}\n\n## Course Objectives Achieved\n\n✅ **Understanding Optimization**: You can now recognize and formulate optimization problems\n\n✅ **Julia Programming**: You can write, debug, and optimize Julia code\n\n✅ **Energy System Modeling**: You understand how to model energy system problems\n\n✅ **Real-World Applications**: You can apply optimization to practical energy problems\n\n✅ **Team Collaboration**: You've worked effectively in groups on complex problems\n\n## Next Steps\n\n### Further Learning\n- **Advanced Optimization**: Nonlinear and stochastic programming\n- **Machine Learning**: Data-driven approaches to energy systems\n- **Energy Markets**: Market design and price formation\n- **Policy Analysis**: Impact of regulations on energy systems\n\n### Resources\n- **Julia Documentation**: [docs.julialang.org](https://docs.julialang.org/)\n- **JuMP Documentation**: [jump.dev](https://jump.dev/)\n- **Energy Literature**: Academic journals and industry reports\n- **Online Courses**: MOOCs on energy systems and optimization\n\n### Stay Connected\n- **Research Opportunities**: Consider thesis projects in energy optimization\n- **Industry Internships**: Apply your skills in real-world settings\n- **Professional Networks**: Join energy and operations research societies\n- **Continuing Education**: Pursue advanced degrees in related fields\n\n. . .\n\n::: {.callout-note}\nThank you for your active participation throughout this course. Your questions and engagement have made this a rewarding experience for everyone!\n:::\n\n# [Literature]{.flow} {.title}\n\n## Core References\n\n### Julia Programming\n- Lauwens, B., & Downey, A. B. (2019). Think Julia: How to think like a computer scientist. O'Reilly®.\n\n### Optimization\n- Winston, W. L. (2004). Operations Research: Applications and Algorithms. Thomson Brooks/Cole.\n- Hillier, F. S., & Lieberman, G. J. (2015). Introduction to Operations Research. McGraw-Hill.\n\n### Energy Systems\n- Wood, A. J., & Wollenberg, B. F. (2012). Power Generation, Operation, and Control. Wiley.\n- Kirschen, D. S., & Strbac, G. (2018). Fundamentals of Power System Economics. Wiley.\n\n### Multi-Energy Systems\n- Mancarella, P. (2014). MES (multi-energy systems): An overview of concepts and evaluation models. Energy, 65, 1-17.\n- Geidl, M., & Andersson, G. (2007). Optimal power flow of multiple energy carriers. IEEE Transactions on Power Systems, 22(1), 145-155.\n\n## Online Resources\n\n### Documentation\n- [Julia Documentation](https://docs.julialang.org/)\n- [JuMP Documentation](https://jump.dev/)\n- [DataFrames.jl Documentation](https://dataframes.juliadata.org/)\n\n### Tutorials and Examples\n- [Julia Academy](https://juliaacademy.com/)\n- [JuMP Tutorials](https://jump.dev/tutorials/)\n- [Energy System Modeling Examples](https://github.com/JuliaEnergy)\n\n### Research Papers\n- Recent papers in journals like:\n  - IEEE Transactions on Power Systems\n  - Energy\n  - Applied Energy\n  - European Journal of Operational Research\n\n",
    "supporting": [
      "lecture-repetition_files/figure-html"
    ],
    "filters": [],
    "includes": {}
  }
}