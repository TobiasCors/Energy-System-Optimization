{
  "hash": "5f72539200244524eb468b2d6a2a87bc",
  "result": {
    "engine": "julia",
    "markdown": "---\ntitle: \"Lecture VI - Unit Commitment Problem\"\nsubtitle: \"Energy System Optimization with Julia\"\nauthor: \"Dr. Tobias Cors\"\ninstitute: \"Hamburg University of Applied Science - Summer 2025\"\ntitle-slide-attributes:\n    data-background-color: \"#025259\"\nhtml-math-method:\n  method: mathjax\n  url: \"https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js\"\n\nformat:\n    html:\n        theme: [litera, ../styles.scss]\n    revealjs:\n        theme: [default, ../styles.scss]\n        transition: slide\n        transition-speed: fast\n        highlight-style: arrow\n        slide-number: true\n        code-copy: true\n        code-link: true\n        preview-links: auto\n        footer: \" {{< meta title >}} | {{< meta author >}} | [Home](lecture-jump.qmd)\"\n        output-file: lecture-presentation.html\n\nbibliography: ../ESO-bib.bib\n\nengine: julia\n\nexecute:\n    echo: true\n---\n\n\n\n\n\n\n\n\n# [Quick Recap from last Week]{.flow} {.title}\n\n\n## NamedTuples in Julia\n\n- NamedTuples are immutable collections of key-value pairs\n- They provide a convenient way to group related data\n- Can be created using a function that returns a tuple with named fields\n\n```julia\n# Example: Creating a NamedTuple for a student\nfunction Student(name::String, age::Int, grade::Float64)\n    return (name = name, age = age, grade = grade)\nend\n\n# Create a dictionary of students\nstudents = Dict(\n    \"Alice\" => Student(\"Alice\", 20, 3.7),\n    \"Bob\" => Student(\"Bob\", 21, 3.5)\n)\n\n# Access data using dot notation\nprintln(students[\"Alice\"].grade)  # Output: 3.7\n```\n\n## Model-Solving Function Pattern\n\n- Encapsulate optimization models in functions for reusability\n- Return results as NamedTuples for easy access\n- Store results in DataFrames for analysis\n\n```julia\n# Example data for different scenarios\ndata = Dict(\n    \"base\" => Dict(\n        \"cost\" => 10.0,\n        \"limit\" => 100.0\n    ),\n    \"high_cost\" => Dict(\n        \"cost\" => 15.0,\n        \"limit\" => 100.0\n    ),\n    \"low_limit\" => Dict(\n        \"cost\" => 10.0,\n        \"limit\" => 50.0\n    )\n)\n\n# Example: Function to solve a simple optimization problem\nfunction solve_optimization(data::Dict)\n    model = Model(HiGHS.Optimizer)\n    set_silent(model)\n    \n    # Define variables and solve model\n    @variable(model, x >= 0)\n    @objective(model, Min, data[\"cost\"] * x)\n    @constraint(model, x <= data[\"limit\"])\n    optimize!(model)\n    \n    # Return results as NamedTuple\n    return (\n        solution = value(x),\n        objective = objective_value(model)\n    )\nend\n\n# Store results in DataFrame\nresults = DataFrame(\n    scenario = String[],\n    solution = Float64[],\n    objective = Float64[]\n)\n\n# Solve multiple scenarios\nfor (name, scenario_data) in data\n    solution = solve_optimization(scenario_data)\n    push!(results, (name, solution.solution, solution.objective))\nend\n```\n\n## Economic Dispatch Problem Recap\n\n- **Objective**: Minimize total generation cost\n- **Decision Variables**: \n  - Power output of thermal generators ($p_g$)\n  - Power output of wind turbines ($p_w$)\n- **Key Constraints**:\n  - Power balance: $\\sum_g p_g + \\sum_w p_w = d^f$\n  - Generator limits: $p^{\\min}_g \\leq p_g \\leq p^{\\max}_g$\n  - Wind limits: $0 \\leq p_w \\leq p^f_w$\n\n::: {.callout-note}\nThe Economic Dispatch problem optimizes power generation for a single time step, assuming all generators are already committed to operation.\n:::\n\n## From Economic Dispatch to Unit Commitment\n\n**Limitations of Economic Dispatch**:\n- Assumes generators are already running\n- Ignores start-up and shut-down costs\n- Doesn't consider minimum up/down times\n- Single time step optimization\n\n**Unit Commitment Solution**:\n- Adds binary variables for generator on/off status\n- Considers multiple time steps\n- Includes start-up/shut-down costs\n- Enforces minimum up/down time, ramping, etc. constraints\n- More realistic but computationally more complex\n\n::: {.callout-tip}\nUnit Commitment extends Economic Dispatch by adding operational constraints and time-dependent decisions.\n:::\n\n## Solutions from last Week\n\n- The tutorials from last week will again be [available on Friday]{.highlight}\n- You can access them in the project folder on Github\n- Click on the little cat icon on the bottom right\n\n. . .\n\n::: {.callout-tip}\n[You can ask questions anytime in class or via email!]{.highlight}\n:::\n\n\n# [Introduction]{.flow} {.title}\n\n## Power System Basic Models: Unit Commitment\n\n::: {.columns}\n::: {.column width=\"30%\"} \n[![](https://images.unsplash.com/photo-1503427315916-2ba435dee667?q=80&w=2727&auto=format&fit=crop&ixlib=rb-4.1.0&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D){width=\"90%\"}](https://unsplash.com/){width=\"85%\"}\n:::\n\n::: {.column width=\"70%\"}\n**Power system with generators and an aggregated demand**\n\n- Generators can be switched on/off to meet the demand\n- Generators have different costs and operational constraints\n- Decisions are made over multiple time steps\n:::\n:::\n\n## Unit Commitment Problem\n\n- **Objective**: Minimize the total cost of producing electricity\n- **Constraints**:\n    - Demand must be met\n    - Generators have limits on their power output\n    - Renewable power injection\n    - Generator on/off status\n    - Minimum up/down times\n    - Ramp rate limits\n- **Decision variables**: \n    - Power output of thermal generators\n    - Power output of renewables\n    - Binary variables for generator status\n\n## {.loud-slide}\n::: {.r-fit-text}\nHow does the mathematical model look like?\n:::\n\n::: footer\n:::\n\n\n# [Problem Structure]{.flow} {.title}\n\n## Available Sets\n\n[Question:]{.question} **What are the sets we need?**\n\n. . .\n\n- $\\mathcal{G}$ - Set of thermal generators indexed by $g \\in \\{1,2,...,|\\mathcal{G}|\\}$\n- $\\mathcal{W}$ - Set of wind turbines indexed by $w \\in \\{1,2,...,|\\mathcal{W}|\\}$\n- $\\mathcal{T}$ - Set of time periods indexed by $t \\in \\{1,2,...,|\\mathcal{T}|\\}$\n\n## Available Parameters\n\n[Question:]{.question} **What are possible parameters?**\n\n. . .\n\n- $C^{var}_g$ - Variable cost of thermal generator $g\\in\\mathcal{G}$ in [$EUR/\\text{MWh}$]\n- $C^{fix}_g$ - Fixed cost of thermal generator $g\\in\\mathcal{G}$ in [$EUR$]\n- $C^{var}_w$ - Cost of wind turbine $w\\in\\mathcal{W}$ in [$EUR/\\text{MWh}$]\n- $P^{\\min}_g$ - Minimum power output of thermal generator $g\\in\\mathcal{G}$ in [MW]\n- $P^{\\max}_g$ - Maximum power output of thermal generator $g\\in\\mathcal{G}$ in [MW]\n- $P^{f}_{w,t}$ - Forecasted power output of wind turbine $w\\in\\mathcal{W}$ at time $t$ in [MW]\n- $D^f_t$ - Forecasted demand at time $t$ in [MW]\n- $T^{up}_g$ - Minimum up time of generator $g\\in\\mathcal{G}$ in [h]\n- $T^{down}_g$ - Minimum down time of generator $g\\in\\mathcal{G}$ in [h]\n- $R^{up}_g$ - Maximum ramp-up rate of generator $g\\in\\mathcal{G}$ in [MW/h]\n- $R^{down}_g$ - Maximum ramp-down rate of generator $g\\in\\mathcal{G}$ in [MW/h]\n\n## Decision Variables\n\n- $p_{g,t}$ - Power output of thermal generator $g\\in\\mathcal{G}$ at time $t$\n- $p_{w,t}$ - Power injection of wind turbine $w\\in\\mathcal{W}$ at time $t$\n- $u_{g,t}$ - Binary variable indicating if generator $g\\in\\mathcal{G}$ is on at time $t$\n\n# [Model Formulation]{.flow} {.title}\n\n## Objective Function\n\n$\\text{Minimize} \\quad \\sum_{t \\in \\mathcal{T}} \\left( \\sum_{g \\in \\mathcal{G}} (C^{var}_g p_{g,t} + C^{fix}_g u_{g,t}) + \\sum_{w \\in \\mathcal{W}} C^{var}_w p_{w,t} \\right)$\n\n::: {.callout-note}\n## The objective includes:\n- Variable costs for power generation ($C^{var}_g p_{g,t}$): Cost per hour of electricity produced\n- Fixed costs for keeping generators on ($C^{fix}_g u_{g,t}$): Cost of maintaining a generator in operation\n- Wind power costs ($C^{var}_w p_{w,t}$): Variable costs per hour for wind power production\n:::\n\n## Power Balance Constraints\n\n$\\sum_{g \\in \\mathcal{G}} p_{g,t} + \\sum_{w \\in \\mathcal{W}} p_{w,t} = D^f_t \\quad \\forall t \\in \\mathcal{T}$\n\n::: {.callout-tip}\nThis constraint ensures that at each time step $t$:\n- The sum of all thermal generator outputs ($\\sum_{g \\in \\mathcal{G}} p_{g,t}$)\n- Plus all wind power outputs ($\\sum_{w \\in \\mathcal{W}} p_{w,t}$)\n- Must exactly match the forecasted demand ($D^f_t$)\n:::\n\n## Generator Limits Constraints\n\n$P^{\\min}_g u_{g,t} \\leq p_{g,t} \\leq P^{\\max}_g u_{g,t} \\quad \\forall g \\in \\mathcal{G}, t \\in \\mathcal{T}$\n\n::: {.callout-tip}\nFor each generator $g$ at time $t$:\n- If the generator is on ($u_{g,t} = 1$), its output must be between minimum ($P^{\\min}_g$) and maximum ($P^{\\max}_g$) power\n- If the generator is off ($u_{g,t} = 0$), its output must be zero\n- The binary variable $u_{g,t}$ ensures these limits are enforced\n:::\n\n## Wind Power Injection Constraints\n\n$0 \\leq p_{w,t} \\leq P^f_{w,t} \\quad \\forall w \\in \\mathcal{W}, t \\in \\mathcal{T}$\n\n::: {.callout-tip}\nFor each wind turbine $w$ at time $t$:\n- Power output must be non-negative\n- Cannot exceed the forecasted available wind power ($P^f_{w,t}$)\n- Unlike thermal generators, wind turbines don't have binary variables as the power injection is controllable between 0 and the forecasted available wind power\n:::\n\n## Minimum Up/Down Time Constraints\n\n$u_{g,t} - u_{g,t-1} \\leq u_{g,\\tau} \\quad \\forall g \\in \\mathcal{G}, t \\in \\mathcal{T}, \\tau \\in [t+1, \\min(t+T^{up}_g-1,|\\mathcal{T}|)]$\n\n$u_{g,t-1} - u_{g,t} \\leq 1 - u_{g,\\tau} \\quad \\forall g \\in \\mathcal{G}, t \\in \\mathcal{T}, \\tau \\in [t+1, \\min(t+T^{down}_g-1,|\\mathcal{T}|)]$\n\n::: {.callout-tip}\nThese constraints enforce minimum operating times:\n- First equation: If a generator starts up at time $t$, it must stay on for at least $T^{up}_g$ time periods\n- Second equation: If a generator shuts down at time $t$, it must stay off for at least $T^{down}_g$ time periods\n- $\\tau$ represents the time periods during which these constraints must be enforced\n:::\n\n## Ramp Rate Constraints\n\n$p_{g,t} - p_{g,t-1} \\leq R^{up}_g \\quad \\forall g \\in \\mathcal{G}, t \\in \\mathcal{T}$\n\n$p_{g,t-1} - p_{g,t} \\leq R^{down}_g \\quad \\forall g \\in \\mathcal{G}, t \\in \\mathcal{T}$\n\n::: {.callout-tip}\nThese constraints limit how quickly generators can change their output:\n- First equation: Power increase between consecutive time steps cannot exceed ramp-up rate $R^{up}_g$\n- Second equation: Power decrease between consecutive time steps cannot exceed ramp-down rate $R^{down}_g$\n- Prevents sudden changes in generator output that could damage equipment\n:::\n\n## Complete Unit Commitment Model\n\n$\\text{Minimize} \\quad \\sum_{t \\in \\mathcal{T}} \\left( \\sum_{g \\in \\mathcal{G}} (C^{var}_g p_{g,t} + C^{fix}_g u_{g,t}) + \\sum_{w \\in \\mathcal{W}} C^{var}_w p_{w,t} \\right)$\n\nsubject to\n\n$\\sum_{g \\in \\mathcal{G}} p_{g,t} + \\sum_{w \\in \\mathcal{W}} p_{w,t} = D^f_t \\quad \\forall t \\in \\mathcal{T}$\n\n$P^{\\min}_g u_{g,t} \\leq p_{g,t} \\leq P^{\\max}_g u_{g,t} \\quad \\forall g \\in \\mathcal{G}, t \\in \\mathcal{T}$\n\n$0 \\leq p_{w,t} \\leq P^f_{w,t} \\quad \\forall w \\in \\mathcal{W}, t \\in \\mathcal{T}$\n\n$u_{g,t} - u_{g,t-1} \\leq u_{g,\\tau} \\quad \\forall g \\in \\mathcal{G}, t \\in \\mathcal{T}, \\tau \\in [t+1, \\min(t+T^{up}_g-1,|\\mathcal{T}|)]$\n\n$u_{g,t-1} - u_{g,t} \\leq 1 - u_{g,\\tau} \\quad \\forall g \\in \\mathcal{G}, t \\in \\mathcal{T}, \\tau \\in [t+1, \\min(t+T^{down}_g-1,|\\mathcal{T}|)]$\n\n$p_{g,t} - p_{g,t-1} \\leq R^{up}_g \\quad \\forall g \\in \\mathcal{G}, t \\in \\mathcal{T}$\n\n$p_{g,t-1} - p_{g,t} \\leq R^{down}_g \\quad \\forall g \\in \\mathcal{G}, t \\in \\mathcal{T}$\n\n$u_{g,t} \\in \\{0,1\\} \\quad \\forall g \\in \\mathcal{G}, t \\in \\mathcal{T}$\n\n# [Model Characteristics]{.flow} {.title}\n\n## Model Type\n\n[Question:]{.question} **What type of optimization problem is this?**\n\n. . .\n\n- Mixed-Integer Linear Programming (MILP)\n- Binary variables for generator status\n- Linear constraints and objective\n- Time-dependent decisions\n\n## Solution Methods\n\n[Question:]{.question} **How can we solve this problem?**\n\n. . .\n\n- Branch and Bound algorithm\n- Commercial solvers (Gurobi, CPLEX)\n- Open-source solvers (HiGHS)\n- Decomposition methods for large problems\n\n## Computational Challenges\n\n[Question:]{.question} **What makes this problem challenging?**\n\n. . .\n\n- Large number of binary variables\n- Time-dependent inter-temporal constraints\n- Minimum up/down time constraints\n- Ramp rate constraints\n- Multiple time periods\n\n# [Impact]{.flow} {.title}\n\n## Real-World Applications\n\n- Generation scheduling\n- Day-ahead market clearing\n- Ancillary services\n- Reserve capacity planning\n\n## Further Extensions\n\n- Battery storage\n- Demand response\n- Network constraints\n- Reserve requirements\n- Multiple fuel types\n- Emission constraints\n- Uncertainty in forecasts\n\n::: {.callout-note}\n## And that's it for today's lecture!\n\nWe have covered the Unit Commitment problem and its mathematical formulation. The tutorial will help you implement and solve this problem using Julia and JuMP.\n:::\n\n\n## {.loud-slide}\n::: {.r-fit-text}\nQuestions?\n:::\n\n::: footer\n:::\n\n# [Literature]{.flow} {.title}\n\n## Literature I\n\nFor more interesting literature to learn more about Julia, take a look at the [literature list](../general/literature.qmd) of this course.\n\n## Literature II\n\nFor a detailed mathematical formulation of the Unit Commitment problem, see @morales2013tight and @zimmermann2019increasing.\n\n",
    "supporting": [
      "lecture-commitment_files/figure-html"
    ],
    "filters": [],
    "includes": {}
  }
}